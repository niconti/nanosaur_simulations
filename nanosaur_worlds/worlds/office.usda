#usda 1.0
(
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def "office"
{
    def PhysicsScene "physics"
    {
        vector3f physics:gravityDirection = (0, 0, -1)
        float physics:gravityMagnitude = 9.8
    }

    def Xform "ground_plane"
    {
        float3 xformOp:rotateXYZ = (0, -0, 0)
        double3 xformOp:translate = (0, 0, -0.125)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "link"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "visual"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def Cube "geometry"
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    rel material:binding = </Looks/Material_0>
                    double size = 1
                    float3 xformOp:scale = (100, 100, 0.25)
                    uniform token[] xformOpOrder = ["xformOp:scale"]
                }
            }

            def Xform "collision"
            {
                uniform token purpose = "guide"
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def Cube "geometry" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    rel material:binding = </Looks/MaterialPhysics_0>
                    double size = 1
                    float3 xformOp:scale = (100, 100, 0.25)
                    uniform token[] xformOpOrder = ["xformOp:scale"]
                }
            }
        }
    }

    def Xform "Table_1"
    {
        float3 xformOp:rotateXYZ = (0, -0, 90)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "body"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "visual"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry"
                {
                    def Mesh "table_Cylinder_001"
                    {
                        float3[] extent = [(-0.8, -0.412219, 0.006375), (0.8, 0.4, 0.802432)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407]
                        rel material:binding = </Looks/Material_1>
                        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0.9672039, -0.25400105), (0, 0.9672039, -0.25400105), (0, 0.9672039, -0.25400105), (0, 0.9672039, -0.25400105), (0, 0.9672039, -0.25400105), (0, 0.9672039, -0.25400105), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -0.9669137, 0.25510365), (0, -0.9669137, 0.25510365), (0, -0.9669137, 0.25510365), (0, -0.9669137, 0.25510365), (0, -0.9669137, 0.25510365), (0, -0.9669137, 0.25510365), (0, -0.25700283, -0.96641064), (0, -0.25700283, -0.96641064), (0, -0.25700283, -0.96641064), (0, -0.25700283, -0.96641064), (0, -0.25700283, -0.96641064), (0, -0.25700283, -0.96641064), (0, 0.4745232, 0.880243), (0, 0.30031282, 0.9538408), (0.21231306, 0.21231306, 0.9538587), (0, 0.4745232, 0.880243), (0.21231306, 0.21231306, 0.9538587), (0.33559886, 0.33559886, 0.88019705), (0.33559886, 0.33559886, 0.88019705), (0.21231306, 0.21231306, 0.9538587), (0.30031282, 0, 0.9538408), (0.33559886, 0.33559886, 0.88019705), (0.30031282, 0, 0.9538408), (0.4745232, 0, 0.880243), (0.4745232, 0, 0.880243), (0.30031282, 0, 0.9538408), (0.21231306, -0.21231306, 0.9538587), (0.4745232, 0, 0.880243), (0.21231306, -0.21231306, 0.9538587), (0.33559886, -0.33559886, 0.88019705), (0.33559886, -0.33559886, 0.88019705), (0.21231306, -0.21231306, 0.9538587), (0, -0.30031282, 0.9538408), (0.33559886, -0.33559886, 0.88019705), (0, -0.30031282, 0.9538408), (0, -0.4745232, 0.880243), (0, -0.4745232, 0.880243), (0, -0.30031282, 0.9538408), (-0.21231306, -0.21231306, 0.9538587), (0, -0.4745232, 0.880243), (-0.21231306, -0.21231306, 0.9538587), (-0.33559886, -0.33559886, 0.88019705), (-0.33559886, -0.33559886, 0.88019705), (-0.21231306, -0.21231306, 0.9538587), (-0.30031282, 0, 0.9538408), (-0.33559886, -0.33559886, 0.88019705), (-0.30031282, 0, 0.9538408), (-0.4745232, 0, 0.880243), (-0.4745232, 0, 0.880243), (-0.30031282, 0, 0.9538408), (-0.21231306, 0.21231306, 0.9538587), (-0.4745232, 0, 0.880243), (-0.21231306, 0.21231306, 0.9538587), (-0.33559886, 0.33559886, 0.88019705), (-0.33559886, 0.33559886, 0.88019705), (-0.21231306, 0.21231306, 0.9538587), (0, 0.30031282, 0.9538408), (-0.33559886, 0.33559886, 0.88019705), (0, 0.30031282, 0.9538408), (0, 0.4745232, 0.880243), (0, 1, 0), (0, 1, 0), (0.70710677, 0.70710677, 0), (0, 1, 0), (0.70710677, 0.70710677, 0), (0.70710677, 0.70710677, 0), (0.70710677, 0.70710677, 0), (0.70710677, 0.70710677, 0), (1, 0, 0), (0.70710677, 0.70710677, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0.70710677, -0.70710677, 0), (1, 0, 0), (0.70710677, -0.70710677, 0), (0.70710677, -0.70710677, 0), (0.70710677, -0.70710677, 0), (0.70710677, -0.70710677, 0), (0, -1, 0), (0.70710677, -0.70710677, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-0.70710677, -0.70710677, 0), (0, -1, 0), (-0.70710677, -0.70710677, 0), (-0.70710677, -0.70710677, 0), (-0.70710677, -0.70710677, 0), (-0.70710677, -0.70710677, 0), (-1, 0, 0), (-0.70710677, -0.70710677, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.70710677, 0.70710677, 0), (-1, 0, 0), (-0.70710677, 0.70710677, 0), (-0.70710677, 0.70710677, 0), (-0.70710677, 0.70710677, 0), (-0.70710677, 0.70710677, 0), (0, 1, 0), (-0.70710677, 0.70710677, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-0.70710677, 0.70710677, 0), (-0.70710677, 0.70710677, 0), (0, 1, 0), (-0.70710677, 0.70710677, 0), (0, 1, 0), (-0.70710677, 0.70710677, 0), (-1, 0, 0), (-1, 0, 0), (-0.70710677, 0.70710677, 0), (-1, 0, 0), (-0.70710677, 0.70710677, 0), (-1, 0, 0), (-0.70710677, -0.70710677, 0), (-0.70710677, -0.70710677, 0), (-1, 0, 0), (-0.70710677, -0.70710677, 0), (-1, 0, 0), (-0.70710677, -0.70710677, 0), (0, -1, 0), (0, -1, 0), (-0.70710677, -0.70710677, 0), (0, -1, 0), (-0.70710677, -0.70710677, 0), (0, -1, 0), (0.70710677, -0.70710677, 0), (0.70710677, -0.70710677, 0), (0, -1, 0), (0.70710677, -0.70710677, 0), (0, -1, 0), (0.70710677, -0.70710677, 0), (1, 0, 0), (1, 0, 0), (0.70710677, -0.70710677, 0), (1, 0, 0), (0.70710677, -0.70710677, 0), (1, 0, 0), (0.70710677, 0.70710677, 0), (0.70710677, 0.70710677, 0), (1, 0, 0), (0.70710677, 0.70710677, 0), (1, 0, 0), (0.70710677, 0.70710677, 0), (0, 1, 0), (0, 1, 0), (0.70710677, 0.70710677, 0), (0, 1, 0), (0.70710677, 0.70710677, 0)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.63401, 0.272939, 0.802432), (-0.646398, 0.302846, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.646398, 0.243032, 0.802432), (-0.63401, 0.272939, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.646398, 0.302846, 0.802432), (-0.676305, 0.315235, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.676305, 0.230643, 0.802432), (-0.646398, 0.243032, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.706213, 0.243032, 0.802432), (-0.676305, 0.230643, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.676305, 0.315235, 0.802432), (-0.706213, 0.302846, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.718601, 0.272939, 0.802432), (-0.706213, 0.243032, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.706213, 0.302846, 0.802432), (-0.718601, 0.272939, 0.802432), (-0.676305, 0.272939, 0.802432), (0.760192, 0.252642, 0.724234), (-0.760192, 0.252642, 0.724234), (-0.760192, 0.252642, 0.775), (0.760192, 0.252642, 0.724234), (-0.760192, 0.252642, 0.775), (0.760192, 0.252642, 0.775), (-0.760192, 0.148436, 0.724234), (0.760192, 0.148436, 0.724234), (0.760192, 0.148436, 0.775), (-0.760192, 0.148436, 0.724234), (0.760192, 0.148436, 0.775), (-0.760192, 0.148436, 0.775), (0.658403, 0.230104, 0.724234), (-0.658403, 0.230104, 0.724234), (-0.760192, 0.252642, 0.724234), (0.658403, 0.230104, 0.724234), (-0.760192, 0.252642, 0.724234), (0.760192, 0.252642, 0.724234), (0.658403, 0.170973, 0.760904), (-0.658403, 0.170973, 0.760904), (-0.658403, 0.230104, 0.760904), (0.658403, 0.170973, 0.760904), (-0.658403, 0.230104, 0.760904), (0.658403, 0.230104, 0.760904), (0.658403, 0.230104, 0.760904), (-0.658403, 0.230104, 0.760904), (-0.658403, 0.230104, 0.724234), (0.658403, 0.230104, 0.760904), (-0.658403, 0.230104, 0.724234), (0.658403, 0.230104, 0.724234), (0.658403, 0.230104, 0.724234), (0.760192, 0.252642, 0.724234), (0.760192, 0.148436, 0.724234), (0.658403, 0.230104, 0.724234), (0.760192, 0.148436, 0.724234), (0.658403, 0.170973, 0.724234), (0.760192, 0.252642, 0.724234), (0.760192, 0.252642, 0.775), (0.760192, 0.148436, 0.775), (0.760192, 0.252642, 0.724234), (0.760192, 0.148436, 0.775), (0.760192, 0.148436, 0.724234), (-0.658403, 0.170973, 0.724234), (-0.658403, 0.170973, 0.760904), (0.658403, 0.170973, 0.760904), (-0.658403, 0.170973, 0.724234), (0.658403, 0.170973, 0.760904), (0.658403, 0.170973, 0.724234), (0.658403, 0.230104, 0.724234), (0.658403, 0.170973, 0.724234), (0.658403, 0.170973, 0.760904), (0.658403, 0.230104, 0.724234), (0.658403, 0.170973, 0.760904), (0.658403, 0.230104, 0.760904), (0.670587, 0.22979, 0.006375), (0.670587, 0.22979, 0.045607), (0.670587, 0.4, 0.020199), (0.670587, 0.22979, 0.006375), (0.670587, 0.4, 0.020199), (0.670587, 0.4, 0.006375), (0.729416, 0.171287, 0.006375), (0.729416, 0.171287, 0.045607), (0.729416, -0.29688, 0.020199), (0.729416, 0.171287, 0.006375), (0.729416, -0.29688, 0.020199), (0.729416, -0.29688, 0.006375), (0.670587, 0.4, 0.006375), (0.670587, 0.4, 0.020199), (0.729416, 0.4, 0.020199), (0.670587, 0.4, 0.006375), (0.729416, 0.4, 0.020199), (0.729416, 0.4, 0.006375), (0.729416, -0.29688, 0.006375), (0.729416, -0.29688, 0.020199), (0.670587, -0.29688, 0.020199), (0.729416, -0.29688, 0.006375), (0.670587, -0.29688, 0.020199), (0.670587, -0.29688, 0.006375), (0.729416, 0.171287, 0.045607), (0.670587, 0.171287, 0.045607), (0.670587, -0.29688, 0.020199), (0.729416, 0.171287, 0.045607), (0.670587, -0.29688, 0.020199), (0.729416, -0.29688, 0.020199), (0.670587, -0.29688, 0.006375), (0.670587, -0.29688, 0.020199), (0.670587, 0.171287, 0.045607), (0.670587, -0.29688, 0.006375), (0.670587, 0.171287, 0.045607), (0.670587, 0.171287, 0.006375), (0.729416, 0.4, 0.006375), (0.729416, 0.4, 0.020199), (0.729416, 0.22979, 0.045607), (0.729416, 0.4, 0.006375), (0.729416, 0.22979, 0.045607), (0.729416, 0.22979, 0.006375), (0.729416, 0.4, 0.020199), (0.670587, 0.4, 0.020199), (0.670587, 0.22979, 0.045607), (0.729416, 0.4, 0.020199), (0.670587, 0.22979, 0.045607), (0.729416, 0.22979, 0.045607), (0.8, -0.4, 0.775), (-0.8, -0.4, 0.775), (-0.8, 0.4, 0.775), (0.8, -0.4, 0.775), (-0.8, 0.4, 0.775), (0.8, 0.4, 0.775), (0.8, 0.4, 0.775), (0.8, 0.4, 0.8), (0.8, -0.4, 0.8), (0.8, 0.4, 0.775), (0.8, -0.4, 0.8), (0.8, -0.4, 0.775), (-0.8, -0.4, 0.775), (0.8, -0.4, 0.775), (0.8, -0.4, 0.8), (-0.8, -0.4, 0.775), (0.8, -0.4, 0.8), (-0.8, -0.4, 0.8), (0.8, 0.4, 0.775), (-0.8, 0.4, 0.775), (-0.8, 0.4, 0.8), (0.8, 0.4, 0.775), (-0.8, 0.4, 0.8), (0.8, 0.4, 0.8), (0.760192, 0.148436, 0.724234), (-0.760192, 0.148436, 0.724234), (-0.658403, 0.170973, 0.724234), (0.760192, 0.148436, 0.724234), (-0.658403, 0.170973, 0.724234), (0.658403, 0.170973, 0.724234), (-0.658403, 0.230104, 0.724234), (-0.658403, 0.170973, 0.724234), (-0.760192, 0.148436, 0.724234), (-0.658403, 0.230104, 0.724234), (-0.760192, 0.148436, 0.724234), (-0.760192, 0.252642, 0.724234), (-0.760192, 0.252642, 0.724234), (-0.760192, 0.148436, 0.724234), (-0.760192, 0.148436, 0.775), (-0.760192, 0.252642, 0.724234), (-0.760192, 0.148436, 0.775), (-0.760192, 0.252642, 0.775), (-0.658403, 0.230104, 0.724234), (-0.658403, 0.230104, 0.760904), (-0.658403, 0.170973, 0.760904), (-0.658403, 0.230104, 0.724234), (-0.658403, 0.170973, 0.760904), (-0.658403, 0.170973, 0.724234), (-0.670587, 0.22979, 0.006375), (-0.670587, 0.4, 0.006375), (-0.670587, 0.4, 0.020199), (-0.670587, 0.22979, 0.006375), (-0.670587, 0.4, 0.020199), (-0.670587, 0.22979, 0.045607), (-0.729416, 0.171287, 0.006375), (-0.729416, -0.29688, 0.006375), (-0.729416, -0.29688, 0.020199), (-0.729416, 0.171287, 0.006375), (-0.729416, -0.29688, 0.020199), (-0.729416, 0.171287, 0.045607), (-0.670587, 0.4, 0.006375), (-0.729416, 0.4, 0.006375), (-0.729416, 0.4, 0.020199), (-0.670587, 0.4, 0.006375), (-0.729416, 0.4, 0.020199), (-0.670587, 0.4, 0.020199), (-0.729416, -0.29688, 0.006375), (-0.670587, -0.29688, 0.006375), (-0.670587, -0.29688, 0.020199), (-0.729416, -0.29688, 0.006375), (-0.670587, -0.29688, 0.020199), (-0.729416, -0.29688, 0.020199), (-0.729416, 0.171287, 0.045607), (-0.729416, -0.29688, 0.020199), (-0.670587, -0.29688, 0.020199), (-0.729416, 0.171287, 0.045607), (-0.670587, -0.29688, 0.020199), (-0.670587, 0.171287, 0.045607), (-0.670587, -0.29688, 0.006375), (-0.670587, 0.171287, 0.006375), (-0.670587, 0.171287, 0.045607), (-0.670587, -0.29688, 0.006375), (-0.670587, 0.171287, 0.045607), (-0.670587, -0.29688, 0.020199), (-0.729416, 0.4, 0.006375), (-0.729416, 0.22979, 0.006375), (-0.729416, 0.22979, 0.045607), (-0.729416, 0.4, 0.006375), (-0.729416, 0.22979, 0.045607), (-0.729416, 0.4, 0.020199), (-0.729416, 0.4, 0.020199), (-0.729416, 0.22979, 0.045607), (-0.670587, 0.22979, 0.045607), (-0.729416, 0.4, 0.020199), (-0.670587, 0.22979, 0.045607), (-0.670587, 0.4, 0.020199), (-0.8, 0.4, 0.775), (-0.8, -0.4, 0.775), (-0.8, -0.4, 0.8), (-0.8, 0.4, 0.775), (-0.8, -0.4, 0.8), (-0.8, 0.4, 0.8), (-0.8, 0.4, 0.8), (-0.8, -0.4, 0.8), (0.8, -0.4, 0.8), (-0.8, 0.4, 0.8), (0.8, -0.4, 0.8), (0.8, 0.4, 0.8), (0.541742, -0.412219, 0.728774), (0.541742, -0.400025, 0.775), (0.541742, -0.383604, 0.775), (0.541742, -0.412219, 0.728774), (0.541742, -0.383604, 0.775), (0.541742, -0.396821, 0.724678), (0.541742, -0.396821, 0.724678), (0.541742, -0.383604, 0.775), (0.658403, -0.383604, 0.775), (0.541742, -0.396821, 0.724678), (0.658403, -0.383604, 0.775), (0.658403, -0.396821, 0.724678), (0.658403, -0.396821, 0.724678), (0.658403, -0.383604, 0.775), (0.658403, -0.400025, 0.775), (0.658403, -0.396821, 0.724678), (0.658403, -0.400025, 0.775), (0.658403, -0.412219, 0.728774), (0.658403, -0.412219, 0.728774), (0.658403, -0.400025, 0.775), (0.541742, -0.400025, 0.775), (0.658403, -0.412219, 0.728774), (0.541742, -0.400025, 0.775), (0.541742, -0.412219, 0.728774), (0.541742, -0.396821, 0.724678), (0.658403, -0.396821, 0.724678), (0.658403, -0.412219, 0.728774), (0.541742, -0.396821, 0.724678), (0.658403, -0.412219, 0.728774), (0.541742, -0.412219, 0.728774), (-0.676305, 0.319746, 0.8), (-0.676305, 0.315235, 0.802432), (-0.646398, 0.302846, 0.802432), (-0.676305, 0.319746, 0.8), (-0.646398, 0.302846, 0.802432), (-0.643208, 0.306037, 0.8), (-0.643208, 0.306037, 0.8), (-0.646398, 0.302846, 0.802432), (-0.63401, 0.272939, 0.802432), (-0.643208, 0.306037, 0.8), (-0.63401, 0.272939, 0.802432), (-0.629498, 0.272939, 0.8), (-0.629498, 0.272939, 0.8), (-0.63401, 0.272939, 0.802432), (-0.646398, 0.243032, 0.802432), (-0.629498, 0.272939, 0.8), (-0.646398, 0.243032, 0.802432), (-0.643208, 0.239841, 0.8), (-0.643208, 0.239841, 0.8), (-0.646398, 0.243032, 0.802432), (-0.676305, 0.230643, 0.802432), (-0.643208, 0.239841, 0.8), (-0.676305, 0.230643, 0.802432), (-0.676305, 0.226132, 0.8), (-0.676305, 0.226132, 0.8), (-0.676305, 0.230643, 0.802432), (-0.706213, 0.243032, 0.802432), (-0.676305, 0.226132, 0.8), (-0.706213, 0.243032, 0.802432), (-0.709403, 0.239841, 0.8), (-0.709403, 0.239841, 0.8), (-0.706213, 0.243032, 0.802432), (-0.718601, 0.272939, 0.802432), (-0.709403, 0.239841, 0.8), (-0.718601, 0.272939, 0.802432), (-0.723113, 0.272939, 0.8), (-0.723113, 0.272939, 0.8), (-0.718601, 0.272939, 0.802432), (-0.706213, 0.302846, 0.802432), (-0.723113, 0.272939, 0.8), (-0.706213, 0.302846, 0.802432), (-0.709403, 0.306037, 0.8), (-0.709403, 0.306037, 0.8), (-0.706213, 0.302846, 0.802432), (-0.676305, 0.315235, 0.802432), (-0.709403, 0.306037, 0.8), (-0.676305, 0.315235, 0.802432), (-0.676305, 0.319746, 0.8), (0.700001, 0.242137, 0.006375), (0.700001, 0.242137, 0.724234), (0.729416, 0.229953, 0.724234), (0.700001, 0.242137, 0.006375), (0.729416, 0.229953, 0.724234), (0.729416, 0.229953, 0.006375), (0.729416, 0.229953, 0.006375), (0.729416, 0.229953, 0.724234), (0.7416, 0.200539, 0.724234), (0.729416, 0.229953, 0.006375), (0.7416, 0.200539, 0.724234), (0.7416, 0.200539, 0.006375), (0.7416, 0.200539, 0.006375), (0.7416, 0.200539, 0.724234), (0.729416, 0.171124, 0.724234), (0.7416, 0.200539, 0.006375), (0.729416, 0.171124, 0.724234), (0.729416, 0.171124, 0.006375), (0.729416, 0.171124, 0.006375), (0.729416, 0.171124, 0.724234), (0.700001, 0.15894, 0.724234), (0.729416, 0.171124, 0.006375), (0.700001, 0.15894, 0.724234), (0.700001, 0.15894, 0.006375), (0.700001, 0.15894, 0.006375), (0.700001, 0.15894, 0.724234), (0.670587, 0.171124, 0.724234), (0.700001, 0.15894, 0.006375), (0.670587, 0.171124, 0.724234), (0.670587, 0.171124, 0.006375), (0.670587, 0.171124, 0.006375), (0.670587, 0.171124, 0.724234), (0.658403, 0.200539, 0.724234), (0.670587, 0.171124, 0.006375), (0.658403, 0.200539, 0.724234), (0.658403, 0.200539, 0.006375), (0.658403, 0.200539, 0.006375), (0.658403, 0.200539, 0.724234), (0.670587, 0.229953, 0.724234), (0.658403, 0.200539, 0.006375), (0.670587, 0.229953, 0.724234), (0.670587, 0.229953, 0.006375), (0.670587, 0.229953, 0.006375), (0.670587, 0.229953, 0.724234), (0.700001, 0.242137, 0.724234), (0.670587, 0.229953, 0.006375), (0.700001, 0.242137, 0.724234), (0.700001, 0.242137, 0.006375), (-0.700001, 0.242137, 0.006375), (-0.729416, 0.229953, 0.006375), (-0.729416, 0.229953, 0.724234), (-0.700001, 0.242137, 0.006375), (-0.729416, 0.229953, 0.724234), (-0.700001, 0.242137, 0.724234), (-0.729416, 0.229953, 0.006375), (-0.7416, 0.200539, 0.006375), (-0.7416, 0.200539, 0.724234), (-0.729416, 0.229953, 0.006375), (-0.7416, 0.200539, 0.724234), (-0.729416, 0.229953, 0.724234), (-0.7416, 0.200539, 0.006375), (-0.729416, 0.171124, 0.006375), (-0.729416, 0.171124, 0.724234), (-0.7416, 0.200539, 0.006375), (-0.729416, 0.171124, 0.724234), (-0.7416, 0.200539, 0.724234), (-0.729416, 0.171124, 0.006375), (-0.700001, 0.15894, 0.006375), (-0.700001, 0.15894, 0.724234), (-0.729416, 0.171124, 0.006375), (-0.700001, 0.15894, 0.724234), (-0.729416, 0.171124, 0.724234), (-0.700001, 0.15894, 0.006375), (-0.670587, 0.171124, 0.006375), (-0.670587, 0.171124, 0.724234), (-0.700001, 0.15894, 0.006375), (-0.670587, 0.171124, 0.724234), (-0.700001, 0.15894, 0.724234), (-0.670587, 0.171124, 0.006375), (-0.658403, 0.200539, 0.006375), (-0.658403, 0.200539, 0.724234), (-0.670587, 0.171124, 0.006375), (-0.658403, 0.200539, 0.724234), (-0.670587, 0.171124, 0.724234), (-0.658403, 0.200539, 0.006375), (-0.670587, 0.229953, 0.006375), (-0.670587, 0.229953, 0.724234), (-0.658403, 0.200539, 0.006375), (-0.670587, 0.229953, 0.724234), (-0.658403, 0.200539, 0.724234), (-0.670587, 0.229953, 0.006375), (-0.700001, 0.242137, 0.006375), (-0.700001, 0.242137, 0.724234), (-0.670587, 0.229953, 0.006375), (-0.700001, 0.242137, 0.724234), (-0.670587, 0.229953, 0.724234)]
                        float2[] primvars:st = [(0.193676, 0.890095), (0.193676, 0.766982), (0.342287, 0.828539), (0.28073, 0.97715), (0.193676, 0.890095), (0.342287, 0.828539), (0.193676, 0.766982), (0.280731, 0.679928), (0.342287, 0.828539), (0.403844, 0.97715), (0.28073, 0.97715), (0.342287, 0.828539), (0.490898, 0.890095), (0.403844, 0.97715), (0.342287, 0.828539), (0.280731, 0.679928), (0.403844, 0.679928), (0.342287, 0.828539), (0.490898, 0.766982), (0.490898, 0.890095), (0.342287, 0.828539), (0.403844, 0.679928), (0.490898, 0.766982), (0.342287, 0.828539), (0.687803, 0.006217), (0.687803, 0.335146), (0.644874, 0.335146), (0.687803, 0.006217), (0.644874, 0.335146), (0.644873, 0.006217), (0.687803, 0.335146), (0.687803, 0.006217), (0.730732, 0.006217), (0.687803, 0.335146), (0.730732, 0.006217), (0.730732, 0.335146), (0.52581, 0.028239), (0.52581, 0.313124), (0.506752, 0.335146), (0.52581, 0.028239), (0.506752, 0.335146), (0.506751, 0.006217), (0.644873, 0.006217), (0.644873, 0.291102), (0.594871, 0.291102), (0.644873, 0.006217), (0.594871, 0.291102), (0.594871, 0.006217), (0.761742, 0.291102), (0.761742, 0.006217), (0.792751, 0.006217), (0.761742, 0.291102), (0.792751, 0.006217), (0.792751, 0.291102), (0.52581, 0.028239), (0.506751, 0.006217), (0.59487, 0.006217), (0.52581, 0.028239), (0.59487, 0.006217), (0.575812, 0.028239), (0.83568, 0.028762), (0.792751, 0.028762), (0.792751, 0.006217), (0.83568, 0.028762), (0.792751, 0.006217), (0.83568, 0.006217), (0.761742, 0.291102), (0.730732, 0.291102), (0.730732, 0.006217), (0.761742, 0.291102), (0.730732, 0.006217), (0.761741, 0.006217), (0.82376, 0.051306), (0.82376, 0.064099), (0.792751, 0.064099), (0.82376, 0.051306), (0.792751, 0.064099), (0.792751, 0.051306), (0.804349, 0.57432), (0.773018, 0.57432), (0.793309, 0.454733), (0.804349, 0.57432), (0.793309, 0.454733), (0.804349, 0.454733), (0.694706, 0.664074), (0.663375, 0.664074), (0.683666, 0.335146), (0.694706, 0.664074), (0.683666, 0.335146), (0.694706, 0.335146), (0.773018, 0.57432), (0.784058, 0.57432), (0.784058, 0.615653), (0.773018, 0.57432), (0.784058, 0.615653), (0.773018, 0.615653), (0.806139, 0.57432), (0.817179, 0.57432), (0.817179, 0.615653), (0.806139, 0.57432), (0.817179, 0.615653), (0.806139, 0.615653), (0.506752, 0.335146), (0.553732, 0.335146), (0.553732, 0.662873), (0.506752, 0.335146), (0.553732, 0.662873), (0.506752, 0.662873), (0.632044, 0.664074), (0.621004, 0.664074), (0.600713, 0.335146), (0.632044, 0.664074), (0.600713, 0.335146), (0.632044, 0.335146), (0.773018, 0.335146), (0.784058, 0.335146), (0.804349, 0.454733), (0.773018, 0.335146), (0.804349, 0.454733), (0.773018, 0.454733), (0.773018, 0.45544), (0.726037, 0.45544), (0.726037, 0.335146), (0.773018, 0.45544), (0.726037, 0.335146), (0.773018, 0.335146), (0.334923, 0.335146), (0.334923, 0.664074), (0.177823, 0.664074), (0.334923, 0.335146), (0.177823, 0.664074), (0.177823, 0.335146), (0.506752, 0.664074), (0.501842, 0.664074), (0.501842, 0.49961), (0.506752, 0.664074), (0.501842, 0.49961), (0.506752, 0.49961), (0.492023, 0.664074), (0.492023, 0.335146), (0.496933, 0.335146), (0.492023, 0.664074), (0.496933, 0.335146), (0.496933, 0.664074), (0.501842, 0.335146), (0.501842, 0.664074), (0.496933, 0.664074), (0.501842, 0.335146), (0.496933, 0.664074), (0.496933, 0.335146), (0.59487, 0.006217), (0.594871, 0.335146), (0.575812, 0.313124), (0.59487, 0.006217), (0.575812, 0.313124), (0.575812, 0.028239), (0.52581, 0.313124), (0.575812, 0.313124), (0.594871, 0.335146), (0.52581, 0.313124), (0.594871, 0.335146), (0.506752, 0.335146), (0.83568, 0.028762), (0.83568, 0.051306), (0.792751, 0.051306), (0.83568, 0.028762), (0.792751, 0.051306), (0.792751, 0.028762), (0.82376, 0.076892), (0.792751, 0.076892), (0.792751, 0.064099), (0.82376, 0.076892), (0.792751, 0.064099), (0.82376, 0.064099), (0.83568, 0.335146), (0.83568, 0.454733), (0.82464, 0.454733), (0.83568, 0.335146), (0.82464, 0.454733), (0.804349, 0.335146), (0.663375, 0.335146), (0.663375, 0.664074), (0.652335, 0.664074), (0.663375, 0.335146), (0.652335, 0.664074), (0.632044, 0.335146), (0.784058, 0.615653), (0.784058, 0.57432), (0.795099, 0.57432), (0.784058, 0.615653), (0.795099, 0.57432), (0.795099, 0.615653), (0.806139, 0.57432), (0.806139, 0.615653), (0.795099, 0.615653), (0.806139, 0.57432), (0.795099, 0.615653), (0.795099, 0.57432), (0.600713, 0.335146), (0.600713, 0.662873), (0.553732, 0.662873), (0.600713, 0.335146), (0.553732, 0.662873), (0.553732, 0.335146), (0.726037, 0.335146), (0.726037, 0.664074), (0.694706, 0.664074), (0.726037, 0.335146), (0.694706, 0.664074), (0.714997, 0.335146), (0.83568, 0.454733), (0.83568, 0.57432), (0.804349, 0.57432), (0.83568, 0.454733), (0.804349, 0.57432), (0.82464, 0.454733), (0.726037, 0.575733), (0.726037, 0.45544), (0.773018, 0.45544), (0.726037, 0.575733), (0.773018, 0.45544), (0.773018, 0.575733), (0.506752, 0.335146), (0.506752, 0.49961), (0.501842, 0.49961), (0.506752, 0.335146), (0.501842, 0.49961), (0.501842, 0.335146), (0.492023, 0.664074), (0.334923, 0.664074), (0.334923, 0.335146), (0.492023, 0.664074), (0.334923, 0.335146), (0.492023, 0.335146), (0.804154, 0.957324), (0.804283, 0.82253), (0.843948, 0.81077), (0.804154, 0.957324), (0.843948, 0.81077), (0.843948, 0.957465), (0.51502, 0.664074), (0.64496, 0.664074), (0.64496, 0.993003), (0.51502, 0.664074), (0.64496, 0.993003), (0.51502, 0.993003), (0.843948, 0.664074), (0.843948, 0.81077), (0.804283, 0.799009), (0.843948, 0.664074), (0.804283, 0.799009), (0.804154, 0.664215), (0.64496, 0.664074), (0.764359, 0.664074), (0.76436, 0.993003), (0.64496, 0.664074), (0.76436, 0.993003), (0.64496, 0.993003), (0.76436, 0.993003), (0.76436, 0.664074), (0.804154, 0.664074), (0.76436, 0.993003), (0.804154, 0.664074), (0.804154, 0.993003), (0.274164, 0.664074), (0.280731, 0.679928), (0.193676, 0.766982), (0.274164, 0.664074), (0.193676, 0.766982), (0.177823, 0.760415), (0.177823, 0.760415), (0.193676, 0.766982), (0.193676, 0.890095), (0.177823, 0.760415), (0.193676, 0.890095), (0.177823, 0.896662), (0.177823, 0.896662), (0.193676, 0.890095), (0.28073, 0.97715), (0.177823, 0.896662), (0.28073, 0.97715), (0.274164, 0.993003), (0.274164, 0.993003), (0.28073, 0.97715), (0.403844, 0.97715), (0.274164, 0.993003), (0.403844, 0.97715), (0.41041, 0.993003), (0.41041, 0.993003), (0.403844, 0.97715), (0.490898, 0.890095), (0.41041, 0.993003), (0.490898, 0.890095), (0.506751, 0.896662), (0.506751, 0.896662), (0.490898, 0.890095), (0.490898, 0.766982), (0.506751, 0.896662), (0.490898, 0.766982), (0.506752, 0.760415), (0.506752, 0.760415), (0.490898, 0.766982), (0.403844, 0.679928), (0.506752, 0.760415), (0.403844, 0.679928), (0.410411, 0.664074), (0.410411, 0.664074), (0.403844, 0.679928), (0.280731, 0.679928), (0.410411, 0.664074), (0.280731, 0.679928), (0.274164, 0.664074), (0.260055, 0.335146), (0.260055, 0.006217), (0.277086, 0.006217), (0.260055, 0.335146), (0.277086, 0.006217), (0.277086, 0.335146), (0.277086, 0.335146), (0.277086, 0.006217), (0.301171, 0.006217), (0.277086, 0.335146), (0.301171, 0.006217), (0.301171, 0.335146), (0.424519, 0.006217), (0.424519, 0.335146), (0.407488, 0.335146), (0.424519, 0.006217), (0.407488, 0.335146), (0.407489, 0.006217), (0.407489, 0.006217), (0.407488, 0.335146), (0.383403, 0.335146), (0.407489, 0.006217), (0.383403, 0.335146), (0.383404, 0.006217), (0.218939, 0.335146), (0.218939, 0.006217), (0.23597, 0.006217), (0.218939, 0.335146), (0.23597, 0.006217), (0.23597, 0.335146), (0.23597, 0.335146), (0.23597, 0.006217), (0.260055, 0.006217), (0.23597, 0.335146), (0.260055, 0.006217), (0.260055, 0.335146), (0.177823, 0.335146), (0.177823, 0.006217), (0.194854, 0.006217), (0.177823, 0.335146), (0.194854, 0.006217), (0.194854, 0.335146), (0.194854, 0.335146), (0.194854, 0.006217), (0.218939, 0.006217), (0.194854, 0.335146), (0.218939, 0.006217), (0.218939, 0.335146), (0.342287, 0.335146), (0.318202, 0.335146), (0.318202, 0.006217), (0.342287, 0.335146), (0.318202, 0.006217), (0.342287, 0.006217), (0.318202, 0.335146), (0.301171, 0.335146), (0.301171, 0.006217), (0.318202, 0.335146), (0.301171, 0.006217), (0.318202, 0.006217), (0.342287, 0.006217), (0.366372, 0.006217), (0.366372, 0.335146), (0.342287, 0.006217), (0.366372, 0.335146), (0.342287, 0.335146), (0.366372, 0.006217), (0.383403, 0.006217), (0.383403, 0.335146), (0.366372, 0.006217), (0.383403, 0.335146), (0.366372, 0.335146), (0.506751, 0.335146), (0.482666, 0.335146), (0.482666, 0.006217), (0.506751, 0.335146), (0.482666, 0.006217), (0.506751, 0.006217), (0.482666, 0.335146), (0.465635, 0.335146), (0.465635, 0.006217), (0.482666, 0.335146), (0.465635, 0.006217), (0.482666, 0.006217), (0.424519, 0.006217), (0.448605, 0.006217), (0.448605, 0.335146), (0.424519, 0.006217), (0.448605, 0.335146), (0.424519, 0.335146), (0.448605, 0.006217), (0.465635, 0.006217), (0.465635, 0.335146), (0.448605, 0.006217), (0.465635, 0.335146), (0.448605, 0.335146)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }

            def Xform "collision"
            {
                uniform token purpose = "guide"
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    rel material:binding = </Looks/MaterialPhysics_1>

                    def Mesh "Cube_Cube_001"
                    {
                        float3[] extent = [(-0.8, -0.412219, 0.006375), (0.8, 0.4, 0.810564)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
                        rel material:binding = </Looks/Material_2>
                        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.8, -0.412219, 0.728774), (-0.8, -0.412219, 0.810564), (-0.8, 0.4, 0.810564), (-0.8, -0.412219, 0.728774), (-0.8, 0.4, 0.810564), (-0.8, 0.4, 0.728774), (-0.8, 0.4, 0.728774), (-0.8, 0.4, 0.810564), (0.8, 0.4, 0.810564), (-0.8, 0.4, 0.728774), (0.8, 0.4, 0.810564), (0.8, 0.4, 0.728774), (0.8, 0.4, 0.728774), (0.8, 0.4, 0.810564), (0.8, -0.412219, 0.810564), (0.8, 0.4, 0.728774), (0.8, -0.412219, 0.810564), (0.8, -0.412219, 0.728774), (0.8, -0.412219, 0.728774), (0.8, -0.412219, 0.810564), (-0.8, -0.412219, 0.810564), (0.8, -0.412219, 0.728774), (-0.8, -0.412219, 0.810564), (-0.8, -0.412219, 0.728774), (-0.8, 0.4, 0.728774), (0.8, 0.4, 0.728774), (0.8, -0.412219, 0.728774), (-0.8, 0.4, 0.728774), (0.8, -0.412219, 0.728774), (-0.8, -0.412219, 0.728774), (0.8, 0.4, 0.810564), (-0.8, 0.4, 0.810564), (-0.8, -0.412219, 0.810564), (0.8, 0.4, 0.810564), (-0.8, -0.412219, 0.810564), (0.8, -0.412219, 0.810564)]
                        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0), (0.625, 0.25), (0.375, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.5), (0.375, 0.75), (0.125, 0.75), (0.625, 0.5), (0.875, 0.5), (0.875, 0.75), (0.625, 0.5), (0.875, 0.75), (0.625, 0.75)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }

                    def Mesh "Cube_001_Cube_002"
                    {
                        float3[] extent = [(-0.8, -0.412219, 0.006375), (0.8, 0.4, 0.810564)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
                        rel material:binding = </Looks/Material_3>
                        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.729416, -0.29688, 0.006375), (-0.729416, -0.29688, 0.728774), (-0.729416, 0.4, 0.728774), (-0.729416, -0.29688, 0.006375), (-0.729416, 0.4, 0.728774), (-0.729416, 0.4, 0.006375), (-0.729416, 0.4, 0.006375), (-0.729416, 0.4, 0.728774), (-0.670587, 0.4, 0.728774), (-0.729416, 0.4, 0.006375), (-0.670587, 0.4, 0.728774), (-0.670587, 0.4, 0.006375), (-0.670587, 0.4, 0.006375), (-0.670587, 0.4, 0.728774), (-0.670587, -0.29688, 0.728774), (-0.670587, 0.4, 0.006375), (-0.670587, -0.29688, 0.728774), (-0.670587, -0.29688, 0.006375), (-0.670587, -0.29688, 0.006375), (-0.670587, -0.29688, 0.728774), (-0.729416, -0.29688, 0.728774), (-0.670587, -0.29688, 0.006375), (-0.729416, -0.29688, 0.728774), (-0.729416, -0.29688, 0.006375), (-0.729416, 0.4, 0.006375), (-0.670587, 0.4, 0.006375), (-0.670587, -0.29688, 0.006375), (-0.729416, 0.4, 0.006375), (-0.670587, -0.29688, 0.006375), (-0.729416, -0.29688, 0.006375)]
                        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0), (0.625, 0.25), (0.375, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.5), (0.375, 0.75), (0.125, 0.75)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }

                    def Mesh "Cube_002_Cube_003"
                    {
                        float3[] extent = [(-0.8, -0.412219, 0.006375), (0.8, 0.4, 0.810564)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
                        rel material:binding = </Looks/Material_4>
                        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(0.658403, -0.29688, 0.006375), (0.658403, -0.29688, 0.728774), (0.658403, 0.4, 0.728774), (0.658403, -0.29688, 0.006375), (0.658403, 0.4, 0.728774), (0.658403, 0.4, 0.006375), (0.658403, 0.4, 0.006375), (0.658403, 0.4, 0.728774), (0.7416, 0.4, 0.728774), (0.658403, 0.4, 0.006375), (0.7416, 0.4, 0.728774), (0.7416, 0.4, 0.006375), (0.7416, 0.4, 0.006375), (0.7416, 0.4, 0.728774), (0.7416, -0.29688, 0.728774), (0.7416, 0.4, 0.006375), (0.7416, -0.29688, 0.728774), (0.7416, -0.29688, 0.006375), (0.7416, -0.29688, 0.006375), (0.7416, -0.29688, 0.728774), (0.658403, -0.29688, 0.728774), (0.7416, -0.29688, 0.006375), (0.658403, -0.29688, 0.728774), (0.658403, -0.29688, 0.006375), (0.658403, 0.4, 0.006375), (0.7416, 0.4, 0.006375), (0.7416, -0.29688, 0.006375), (0.658403, 0.4, 0.006375), (0.7416, -0.29688, 0.006375), (0.658403, -0.29688, 0.006375)]
                        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0), (0.625, 0.25), (0.375, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.5), (0.375, 0.75), (0.125, 0.75)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }
        }
    }

    def Xform "Table_2"
    {
        float3 xformOp:rotateXYZ = (0, -0, 90)
        double3 xformOp:translate = (0, 1.6, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "body"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "visual"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry"
                {
                    def Mesh "table_Cylinder_001"
                    {
                        float3[] extent = [(-0.8, -0.412219, 0.006375), (0.8, 0.4, 0.802432)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407]
                        rel material:binding = </Looks/Material_5>
                        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (0, -0.05420163, 0.99853003), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (0, 0.14760688, 0.9890461), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0.9672039, -0.25400105), (0, 0.9672039, -0.25400105), (0, 0.9672039, -0.25400105), (0, 0.9672039, -0.25400105), (0, 0.9672039, -0.25400105), (0, 0.9672039, -0.25400105), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -0.9669137, 0.25510365), (0, -0.9669137, 0.25510365), (0, -0.9669137, 0.25510365), (0, -0.9669137, 0.25510365), (0, -0.9669137, 0.25510365), (0, -0.9669137, 0.25510365), (0, -0.25700283, -0.96641064), (0, -0.25700283, -0.96641064), (0, -0.25700283, -0.96641064), (0, -0.25700283, -0.96641064), (0, -0.25700283, -0.96641064), (0, -0.25700283, -0.96641064), (0, 0.4745232, 0.880243), (0, 0.30031282, 0.9538408), (0.21231306, 0.21231306, 0.9538587), (0, 0.4745232, 0.880243), (0.21231306, 0.21231306, 0.9538587), (0.33559886, 0.33559886, 0.88019705), (0.33559886, 0.33559886, 0.88019705), (0.21231306, 0.21231306, 0.9538587), (0.30031282, 0, 0.9538408), (0.33559886, 0.33559886, 0.88019705), (0.30031282, 0, 0.9538408), (0.4745232, 0, 0.880243), (0.4745232, 0, 0.880243), (0.30031282, 0, 0.9538408), (0.21231306, -0.21231306, 0.9538587), (0.4745232, 0, 0.880243), (0.21231306, -0.21231306, 0.9538587), (0.33559886, -0.33559886, 0.88019705), (0.33559886, -0.33559886, 0.88019705), (0.21231306, -0.21231306, 0.9538587), (0, -0.30031282, 0.9538408), (0.33559886, -0.33559886, 0.88019705), (0, -0.30031282, 0.9538408), (0, -0.4745232, 0.880243), (0, -0.4745232, 0.880243), (0, -0.30031282, 0.9538408), (-0.21231306, -0.21231306, 0.9538587), (0, -0.4745232, 0.880243), (-0.21231306, -0.21231306, 0.9538587), (-0.33559886, -0.33559886, 0.88019705), (-0.33559886, -0.33559886, 0.88019705), (-0.21231306, -0.21231306, 0.9538587), (-0.30031282, 0, 0.9538408), (-0.33559886, -0.33559886, 0.88019705), (-0.30031282, 0, 0.9538408), (-0.4745232, 0, 0.880243), (-0.4745232, 0, 0.880243), (-0.30031282, 0, 0.9538408), (-0.21231306, 0.21231306, 0.9538587), (-0.4745232, 0, 0.880243), (-0.21231306, 0.21231306, 0.9538587), (-0.33559886, 0.33559886, 0.88019705), (-0.33559886, 0.33559886, 0.88019705), (-0.21231306, 0.21231306, 0.9538587), (0, 0.30031282, 0.9538408), (-0.33559886, 0.33559886, 0.88019705), (0, 0.30031282, 0.9538408), (0, 0.4745232, 0.880243), (0, 1, 0), (0, 1, 0), (0.70710677, 0.70710677, 0), (0, 1, 0), (0.70710677, 0.70710677, 0), (0.70710677, 0.70710677, 0), (0.70710677, 0.70710677, 0), (0.70710677, 0.70710677, 0), (1, 0, 0), (0.70710677, 0.70710677, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0.70710677, -0.70710677, 0), (1, 0, 0), (0.70710677, -0.70710677, 0), (0.70710677, -0.70710677, 0), (0.70710677, -0.70710677, 0), (0.70710677, -0.70710677, 0), (0, -1, 0), (0.70710677, -0.70710677, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-0.70710677, -0.70710677, 0), (0, -1, 0), (-0.70710677, -0.70710677, 0), (-0.70710677, -0.70710677, 0), (-0.70710677, -0.70710677, 0), (-0.70710677, -0.70710677, 0), (-1, 0, 0), (-0.70710677, -0.70710677, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.70710677, 0.70710677, 0), (-1, 0, 0), (-0.70710677, 0.70710677, 0), (-0.70710677, 0.70710677, 0), (-0.70710677, 0.70710677, 0), (-0.70710677, 0.70710677, 0), (0, 1, 0), (-0.70710677, 0.70710677, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-0.70710677, 0.70710677, 0), (-0.70710677, 0.70710677, 0), (0, 1, 0), (-0.70710677, 0.70710677, 0), (0, 1, 0), (-0.70710677, 0.70710677, 0), (-1, 0, 0), (-1, 0, 0), (-0.70710677, 0.70710677, 0), (-1, 0, 0), (-0.70710677, 0.70710677, 0), (-1, 0, 0), (-0.70710677, -0.70710677, 0), (-0.70710677, -0.70710677, 0), (-1, 0, 0), (-0.70710677, -0.70710677, 0), (-1, 0, 0), (-0.70710677, -0.70710677, 0), (0, -1, 0), (0, -1, 0), (-0.70710677, -0.70710677, 0), (0, -1, 0), (-0.70710677, -0.70710677, 0), (0, -1, 0), (0.70710677, -0.70710677, 0), (0.70710677, -0.70710677, 0), (0, -1, 0), (0.70710677, -0.70710677, 0), (0, -1, 0), (0.70710677, -0.70710677, 0), (1, 0, 0), (1, 0, 0), (0.70710677, -0.70710677, 0), (1, 0, 0), (0.70710677, -0.70710677, 0), (1, 0, 0), (0.70710677, 0.70710677, 0), (0.70710677, 0.70710677, 0), (1, 0, 0), (0.70710677, 0.70710677, 0), (1, 0, 0), (0.70710677, 0.70710677, 0), (0, 1, 0), (0, 1, 0), (0.70710677, 0.70710677, 0), (0, 1, 0), (0.70710677, 0.70710677, 0)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.63401, 0.272939, 0.802432), (-0.646398, 0.302846, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.646398, 0.243032, 0.802432), (-0.63401, 0.272939, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.646398, 0.302846, 0.802432), (-0.676305, 0.315235, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.676305, 0.230643, 0.802432), (-0.646398, 0.243032, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.706213, 0.243032, 0.802432), (-0.676305, 0.230643, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.676305, 0.315235, 0.802432), (-0.706213, 0.302846, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.718601, 0.272939, 0.802432), (-0.706213, 0.243032, 0.802432), (-0.676305, 0.272939, 0.802432), (-0.706213, 0.302846, 0.802432), (-0.718601, 0.272939, 0.802432), (-0.676305, 0.272939, 0.802432), (0.760192, 0.252642, 0.724234), (-0.760192, 0.252642, 0.724234), (-0.760192, 0.252642, 0.775), (0.760192, 0.252642, 0.724234), (-0.760192, 0.252642, 0.775), (0.760192, 0.252642, 0.775), (-0.760192, 0.148436, 0.724234), (0.760192, 0.148436, 0.724234), (0.760192, 0.148436, 0.775), (-0.760192, 0.148436, 0.724234), (0.760192, 0.148436, 0.775), (-0.760192, 0.148436, 0.775), (0.658403, 0.230104, 0.724234), (-0.658403, 0.230104, 0.724234), (-0.760192, 0.252642, 0.724234), (0.658403, 0.230104, 0.724234), (-0.760192, 0.252642, 0.724234), (0.760192, 0.252642, 0.724234), (0.658403, 0.170973, 0.760904), (-0.658403, 0.170973, 0.760904), (-0.658403, 0.230104, 0.760904), (0.658403, 0.170973, 0.760904), (-0.658403, 0.230104, 0.760904), (0.658403, 0.230104, 0.760904), (0.658403, 0.230104, 0.760904), (-0.658403, 0.230104, 0.760904), (-0.658403, 0.230104, 0.724234), (0.658403, 0.230104, 0.760904), (-0.658403, 0.230104, 0.724234), (0.658403, 0.230104, 0.724234), (0.658403, 0.230104, 0.724234), (0.760192, 0.252642, 0.724234), (0.760192, 0.148436, 0.724234), (0.658403, 0.230104, 0.724234), (0.760192, 0.148436, 0.724234), (0.658403, 0.170973, 0.724234), (0.760192, 0.252642, 0.724234), (0.760192, 0.252642, 0.775), (0.760192, 0.148436, 0.775), (0.760192, 0.252642, 0.724234), (0.760192, 0.148436, 0.775), (0.760192, 0.148436, 0.724234), (-0.658403, 0.170973, 0.724234), (-0.658403, 0.170973, 0.760904), (0.658403, 0.170973, 0.760904), (-0.658403, 0.170973, 0.724234), (0.658403, 0.170973, 0.760904), (0.658403, 0.170973, 0.724234), (0.658403, 0.230104, 0.724234), (0.658403, 0.170973, 0.724234), (0.658403, 0.170973, 0.760904), (0.658403, 0.230104, 0.724234), (0.658403, 0.170973, 0.760904), (0.658403, 0.230104, 0.760904), (0.670587, 0.22979, 0.006375), (0.670587, 0.22979, 0.045607), (0.670587, 0.4, 0.020199), (0.670587, 0.22979, 0.006375), (0.670587, 0.4, 0.020199), (0.670587, 0.4, 0.006375), (0.729416, 0.171287, 0.006375), (0.729416, 0.171287, 0.045607), (0.729416, -0.29688, 0.020199), (0.729416, 0.171287, 0.006375), (0.729416, -0.29688, 0.020199), (0.729416, -0.29688, 0.006375), (0.670587, 0.4, 0.006375), (0.670587, 0.4, 0.020199), (0.729416, 0.4, 0.020199), (0.670587, 0.4, 0.006375), (0.729416, 0.4, 0.020199), (0.729416, 0.4, 0.006375), (0.729416, -0.29688, 0.006375), (0.729416, -0.29688, 0.020199), (0.670587, -0.29688, 0.020199), (0.729416, -0.29688, 0.006375), (0.670587, -0.29688, 0.020199), (0.670587, -0.29688, 0.006375), (0.729416, 0.171287, 0.045607), (0.670587, 0.171287, 0.045607), (0.670587, -0.29688, 0.020199), (0.729416, 0.171287, 0.045607), (0.670587, -0.29688, 0.020199), (0.729416, -0.29688, 0.020199), (0.670587, -0.29688, 0.006375), (0.670587, -0.29688, 0.020199), (0.670587, 0.171287, 0.045607), (0.670587, -0.29688, 0.006375), (0.670587, 0.171287, 0.045607), (0.670587, 0.171287, 0.006375), (0.729416, 0.4, 0.006375), (0.729416, 0.4, 0.020199), (0.729416, 0.22979, 0.045607), (0.729416, 0.4, 0.006375), (0.729416, 0.22979, 0.045607), (0.729416, 0.22979, 0.006375), (0.729416, 0.4, 0.020199), (0.670587, 0.4, 0.020199), (0.670587, 0.22979, 0.045607), (0.729416, 0.4, 0.020199), (0.670587, 0.22979, 0.045607), (0.729416, 0.22979, 0.045607), (0.8, -0.4, 0.775), (-0.8, -0.4, 0.775), (-0.8, 0.4, 0.775), (0.8, -0.4, 0.775), (-0.8, 0.4, 0.775), (0.8, 0.4, 0.775), (0.8, 0.4, 0.775), (0.8, 0.4, 0.8), (0.8, -0.4, 0.8), (0.8, 0.4, 0.775), (0.8, -0.4, 0.8), (0.8, -0.4, 0.775), (-0.8, -0.4, 0.775), (0.8, -0.4, 0.775), (0.8, -0.4, 0.8), (-0.8, -0.4, 0.775), (0.8, -0.4, 0.8), (-0.8, -0.4, 0.8), (0.8, 0.4, 0.775), (-0.8, 0.4, 0.775), (-0.8, 0.4, 0.8), (0.8, 0.4, 0.775), (-0.8, 0.4, 0.8), (0.8, 0.4, 0.8), (0.760192, 0.148436, 0.724234), (-0.760192, 0.148436, 0.724234), (-0.658403, 0.170973, 0.724234), (0.760192, 0.148436, 0.724234), (-0.658403, 0.170973, 0.724234), (0.658403, 0.170973, 0.724234), (-0.658403, 0.230104, 0.724234), (-0.658403, 0.170973, 0.724234), (-0.760192, 0.148436, 0.724234), (-0.658403, 0.230104, 0.724234), (-0.760192, 0.148436, 0.724234), (-0.760192, 0.252642, 0.724234), (-0.760192, 0.252642, 0.724234), (-0.760192, 0.148436, 0.724234), (-0.760192, 0.148436, 0.775), (-0.760192, 0.252642, 0.724234), (-0.760192, 0.148436, 0.775), (-0.760192, 0.252642, 0.775), (-0.658403, 0.230104, 0.724234), (-0.658403, 0.230104, 0.760904), (-0.658403, 0.170973, 0.760904), (-0.658403, 0.230104, 0.724234), (-0.658403, 0.170973, 0.760904), (-0.658403, 0.170973, 0.724234), (-0.670587, 0.22979, 0.006375), (-0.670587, 0.4, 0.006375), (-0.670587, 0.4, 0.020199), (-0.670587, 0.22979, 0.006375), (-0.670587, 0.4, 0.020199), (-0.670587, 0.22979, 0.045607), (-0.729416, 0.171287, 0.006375), (-0.729416, -0.29688, 0.006375), (-0.729416, -0.29688, 0.020199), (-0.729416, 0.171287, 0.006375), (-0.729416, -0.29688, 0.020199), (-0.729416, 0.171287, 0.045607), (-0.670587, 0.4, 0.006375), (-0.729416, 0.4, 0.006375), (-0.729416, 0.4, 0.020199), (-0.670587, 0.4, 0.006375), (-0.729416, 0.4, 0.020199), (-0.670587, 0.4, 0.020199), (-0.729416, -0.29688, 0.006375), (-0.670587, -0.29688, 0.006375), (-0.670587, -0.29688, 0.020199), (-0.729416, -0.29688, 0.006375), (-0.670587, -0.29688, 0.020199), (-0.729416, -0.29688, 0.020199), (-0.729416, 0.171287, 0.045607), (-0.729416, -0.29688, 0.020199), (-0.670587, -0.29688, 0.020199), (-0.729416, 0.171287, 0.045607), (-0.670587, -0.29688, 0.020199), (-0.670587, 0.171287, 0.045607), (-0.670587, -0.29688, 0.006375), (-0.670587, 0.171287, 0.006375), (-0.670587, 0.171287, 0.045607), (-0.670587, -0.29688, 0.006375), (-0.670587, 0.171287, 0.045607), (-0.670587, -0.29688, 0.020199), (-0.729416, 0.4, 0.006375), (-0.729416, 0.22979, 0.006375), (-0.729416, 0.22979, 0.045607), (-0.729416, 0.4, 0.006375), (-0.729416, 0.22979, 0.045607), (-0.729416, 0.4, 0.020199), (-0.729416, 0.4, 0.020199), (-0.729416, 0.22979, 0.045607), (-0.670587, 0.22979, 0.045607), (-0.729416, 0.4, 0.020199), (-0.670587, 0.22979, 0.045607), (-0.670587, 0.4, 0.020199), (-0.8, 0.4, 0.775), (-0.8, -0.4, 0.775), (-0.8, -0.4, 0.8), (-0.8, 0.4, 0.775), (-0.8, -0.4, 0.8), (-0.8, 0.4, 0.8), (-0.8, 0.4, 0.8), (-0.8, -0.4, 0.8), (0.8, -0.4, 0.8), (-0.8, 0.4, 0.8), (0.8, -0.4, 0.8), (0.8, 0.4, 0.8), (0.541742, -0.412219, 0.728774), (0.541742, -0.400025, 0.775), (0.541742, -0.383604, 0.775), (0.541742, -0.412219, 0.728774), (0.541742, -0.383604, 0.775), (0.541742, -0.396821, 0.724678), (0.541742, -0.396821, 0.724678), (0.541742, -0.383604, 0.775), (0.658403, -0.383604, 0.775), (0.541742, -0.396821, 0.724678), (0.658403, -0.383604, 0.775), (0.658403, -0.396821, 0.724678), (0.658403, -0.396821, 0.724678), (0.658403, -0.383604, 0.775), (0.658403, -0.400025, 0.775), (0.658403, -0.396821, 0.724678), (0.658403, -0.400025, 0.775), (0.658403, -0.412219, 0.728774), (0.658403, -0.412219, 0.728774), (0.658403, -0.400025, 0.775), (0.541742, -0.400025, 0.775), (0.658403, -0.412219, 0.728774), (0.541742, -0.400025, 0.775), (0.541742, -0.412219, 0.728774), (0.541742, -0.396821, 0.724678), (0.658403, -0.396821, 0.724678), (0.658403, -0.412219, 0.728774), (0.541742, -0.396821, 0.724678), (0.658403, -0.412219, 0.728774), (0.541742, -0.412219, 0.728774), (-0.676305, 0.319746, 0.8), (-0.676305, 0.315235, 0.802432), (-0.646398, 0.302846, 0.802432), (-0.676305, 0.319746, 0.8), (-0.646398, 0.302846, 0.802432), (-0.643208, 0.306037, 0.8), (-0.643208, 0.306037, 0.8), (-0.646398, 0.302846, 0.802432), (-0.63401, 0.272939, 0.802432), (-0.643208, 0.306037, 0.8), (-0.63401, 0.272939, 0.802432), (-0.629498, 0.272939, 0.8), (-0.629498, 0.272939, 0.8), (-0.63401, 0.272939, 0.802432), (-0.646398, 0.243032, 0.802432), (-0.629498, 0.272939, 0.8), (-0.646398, 0.243032, 0.802432), (-0.643208, 0.239841, 0.8), (-0.643208, 0.239841, 0.8), (-0.646398, 0.243032, 0.802432), (-0.676305, 0.230643, 0.802432), (-0.643208, 0.239841, 0.8), (-0.676305, 0.230643, 0.802432), (-0.676305, 0.226132, 0.8), (-0.676305, 0.226132, 0.8), (-0.676305, 0.230643, 0.802432), (-0.706213, 0.243032, 0.802432), (-0.676305, 0.226132, 0.8), (-0.706213, 0.243032, 0.802432), (-0.709403, 0.239841, 0.8), (-0.709403, 0.239841, 0.8), (-0.706213, 0.243032, 0.802432), (-0.718601, 0.272939, 0.802432), (-0.709403, 0.239841, 0.8), (-0.718601, 0.272939, 0.802432), (-0.723113, 0.272939, 0.8), (-0.723113, 0.272939, 0.8), (-0.718601, 0.272939, 0.802432), (-0.706213, 0.302846, 0.802432), (-0.723113, 0.272939, 0.8), (-0.706213, 0.302846, 0.802432), (-0.709403, 0.306037, 0.8), (-0.709403, 0.306037, 0.8), (-0.706213, 0.302846, 0.802432), (-0.676305, 0.315235, 0.802432), (-0.709403, 0.306037, 0.8), (-0.676305, 0.315235, 0.802432), (-0.676305, 0.319746, 0.8), (0.700001, 0.242137, 0.006375), (0.700001, 0.242137, 0.724234), (0.729416, 0.229953, 0.724234), (0.700001, 0.242137, 0.006375), (0.729416, 0.229953, 0.724234), (0.729416, 0.229953, 0.006375), (0.729416, 0.229953, 0.006375), (0.729416, 0.229953, 0.724234), (0.7416, 0.200539, 0.724234), (0.729416, 0.229953, 0.006375), (0.7416, 0.200539, 0.724234), (0.7416, 0.200539, 0.006375), (0.7416, 0.200539, 0.006375), (0.7416, 0.200539, 0.724234), (0.729416, 0.171124, 0.724234), (0.7416, 0.200539, 0.006375), (0.729416, 0.171124, 0.724234), (0.729416, 0.171124, 0.006375), (0.729416, 0.171124, 0.006375), (0.729416, 0.171124, 0.724234), (0.700001, 0.15894, 0.724234), (0.729416, 0.171124, 0.006375), (0.700001, 0.15894, 0.724234), (0.700001, 0.15894, 0.006375), (0.700001, 0.15894, 0.006375), (0.700001, 0.15894, 0.724234), (0.670587, 0.171124, 0.724234), (0.700001, 0.15894, 0.006375), (0.670587, 0.171124, 0.724234), (0.670587, 0.171124, 0.006375), (0.670587, 0.171124, 0.006375), (0.670587, 0.171124, 0.724234), (0.658403, 0.200539, 0.724234), (0.670587, 0.171124, 0.006375), (0.658403, 0.200539, 0.724234), (0.658403, 0.200539, 0.006375), (0.658403, 0.200539, 0.006375), (0.658403, 0.200539, 0.724234), (0.670587, 0.229953, 0.724234), (0.658403, 0.200539, 0.006375), (0.670587, 0.229953, 0.724234), (0.670587, 0.229953, 0.006375), (0.670587, 0.229953, 0.006375), (0.670587, 0.229953, 0.724234), (0.700001, 0.242137, 0.724234), (0.670587, 0.229953, 0.006375), (0.700001, 0.242137, 0.724234), (0.700001, 0.242137, 0.006375), (-0.700001, 0.242137, 0.006375), (-0.729416, 0.229953, 0.006375), (-0.729416, 0.229953, 0.724234), (-0.700001, 0.242137, 0.006375), (-0.729416, 0.229953, 0.724234), (-0.700001, 0.242137, 0.724234), (-0.729416, 0.229953, 0.006375), (-0.7416, 0.200539, 0.006375), (-0.7416, 0.200539, 0.724234), (-0.729416, 0.229953, 0.006375), (-0.7416, 0.200539, 0.724234), (-0.729416, 0.229953, 0.724234), (-0.7416, 0.200539, 0.006375), (-0.729416, 0.171124, 0.006375), (-0.729416, 0.171124, 0.724234), (-0.7416, 0.200539, 0.006375), (-0.729416, 0.171124, 0.724234), (-0.7416, 0.200539, 0.724234), (-0.729416, 0.171124, 0.006375), (-0.700001, 0.15894, 0.006375), (-0.700001, 0.15894, 0.724234), (-0.729416, 0.171124, 0.006375), (-0.700001, 0.15894, 0.724234), (-0.729416, 0.171124, 0.724234), (-0.700001, 0.15894, 0.006375), (-0.670587, 0.171124, 0.006375), (-0.670587, 0.171124, 0.724234), (-0.700001, 0.15894, 0.006375), (-0.670587, 0.171124, 0.724234), (-0.700001, 0.15894, 0.724234), (-0.670587, 0.171124, 0.006375), (-0.658403, 0.200539, 0.006375), (-0.658403, 0.200539, 0.724234), (-0.670587, 0.171124, 0.006375), (-0.658403, 0.200539, 0.724234), (-0.670587, 0.171124, 0.724234), (-0.658403, 0.200539, 0.006375), (-0.670587, 0.229953, 0.006375), (-0.670587, 0.229953, 0.724234), (-0.658403, 0.200539, 0.006375), (-0.670587, 0.229953, 0.724234), (-0.658403, 0.200539, 0.724234), (-0.670587, 0.229953, 0.006375), (-0.700001, 0.242137, 0.006375), (-0.700001, 0.242137, 0.724234), (-0.670587, 0.229953, 0.006375), (-0.700001, 0.242137, 0.724234), (-0.670587, 0.229953, 0.724234)]
                        float2[] primvars:st = [(0.193676, 0.890095), (0.193676, 0.766982), (0.342287, 0.828539), (0.28073, 0.97715), (0.193676, 0.890095), (0.342287, 0.828539), (0.193676, 0.766982), (0.280731, 0.679928), (0.342287, 0.828539), (0.403844, 0.97715), (0.28073, 0.97715), (0.342287, 0.828539), (0.490898, 0.890095), (0.403844, 0.97715), (0.342287, 0.828539), (0.280731, 0.679928), (0.403844, 0.679928), (0.342287, 0.828539), (0.490898, 0.766982), (0.490898, 0.890095), (0.342287, 0.828539), (0.403844, 0.679928), (0.490898, 0.766982), (0.342287, 0.828539), (0.687803, 0.006217), (0.687803, 0.335146), (0.644874, 0.335146), (0.687803, 0.006217), (0.644874, 0.335146), (0.644873, 0.006217), (0.687803, 0.335146), (0.687803, 0.006217), (0.730732, 0.006217), (0.687803, 0.335146), (0.730732, 0.006217), (0.730732, 0.335146), (0.52581, 0.028239), (0.52581, 0.313124), (0.506752, 0.335146), (0.52581, 0.028239), (0.506752, 0.335146), (0.506751, 0.006217), (0.644873, 0.006217), (0.644873, 0.291102), (0.594871, 0.291102), (0.644873, 0.006217), (0.594871, 0.291102), (0.594871, 0.006217), (0.761742, 0.291102), (0.761742, 0.006217), (0.792751, 0.006217), (0.761742, 0.291102), (0.792751, 0.006217), (0.792751, 0.291102), (0.52581, 0.028239), (0.506751, 0.006217), (0.59487, 0.006217), (0.52581, 0.028239), (0.59487, 0.006217), (0.575812, 0.028239), (0.83568, 0.028762), (0.792751, 0.028762), (0.792751, 0.006217), (0.83568, 0.028762), (0.792751, 0.006217), (0.83568, 0.006217), (0.761742, 0.291102), (0.730732, 0.291102), (0.730732, 0.006217), (0.761742, 0.291102), (0.730732, 0.006217), (0.761741, 0.006217), (0.82376, 0.051306), (0.82376, 0.064099), (0.792751, 0.064099), (0.82376, 0.051306), (0.792751, 0.064099), (0.792751, 0.051306), (0.804349, 0.57432), (0.773018, 0.57432), (0.793309, 0.454733), (0.804349, 0.57432), (0.793309, 0.454733), (0.804349, 0.454733), (0.694706, 0.664074), (0.663375, 0.664074), (0.683666, 0.335146), (0.694706, 0.664074), (0.683666, 0.335146), (0.694706, 0.335146), (0.773018, 0.57432), (0.784058, 0.57432), (0.784058, 0.615653), (0.773018, 0.57432), (0.784058, 0.615653), (0.773018, 0.615653), (0.806139, 0.57432), (0.817179, 0.57432), (0.817179, 0.615653), (0.806139, 0.57432), (0.817179, 0.615653), (0.806139, 0.615653), (0.506752, 0.335146), (0.553732, 0.335146), (0.553732, 0.662873), (0.506752, 0.335146), (0.553732, 0.662873), (0.506752, 0.662873), (0.632044, 0.664074), (0.621004, 0.664074), (0.600713, 0.335146), (0.632044, 0.664074), (0.600713, 0.335146), (0.632044, 0.335146), (0.773018, 0.335146), (0.784058, 0.335146), (0.804349, 0.454733), (0.773018, 0.335146), (0.804349, 0.454733), (0.773018, 0.454733), (0.773018, 0.45544), (0.726037, 0.45544), (0.726037, 0.335146), (0.773018, 0.45544), (0.726037, 0.335146), (0.773018, 0.335146), (0.334923, 0.335146), (0.334923, 0.664074), (0.177823, 0.664074), (0.334923, 0.335146), (0.177823, 0.664074), (0.177823, 0.335146), (0.506752, 0.664074), (0.501842, 0.664074), (0.501842, 0.49961), (0.506752, 0.664074), (0.501842, 0.49961), (0.506752, 0.49961), (0.492023, 0.664074), (0.492023, 0.335146), (0.496933, 0.335146), (0.492023, 0.664074), (0.496933, 0.335146), (0.496933, 0.664074), (0.501842, 0.335146), (0.501842, 0.664074), (0.496933, 0.664074), (0.501842, 0.335146), (0.496933, 0.664074), (0.496933, 0.335146), (0.59487, 0.006217), (0.594871, 0.335146), (0.575812, 0.313124), (0.59487, 0.006217), (0.575812, 0.313124), (0.575812, 0.028239), (0.52581, 0.313124), (0.575812, 0.313124), (0.594871, 0.335146), (0.52581, 0.313124), (0.594871, 0.335146), (0.506752, 0.335146), (0.83568, 0.028762), (0.83568, 0.051306), (0.792751, 0.051306), (0.83568, 0.028762), (0.792751, 0.051306), (0.792751, 0.028762), (0.82376, 0.076892), (0.792751, 0.076892), (0.792751, 0.064099), (0.82376, 0.076892), (0.792751, 0.064099), (0.82376, 0.064099), (0.83568, 0.335146), (0.83568, 0.454733), (0.82464, 0.454733), (0.83568, 0.335146), (0.82464, 0.454733), (0.804349, 0.335146), (0.663375, 0.335146), (0.663375, 0.664074), (0.652335, 0.664074), (0.663375, 0.335146), (0.652335, 0.664074), (0.632044, 0.335146), (0.784058, 0.615653), (0.784058, 0.57432), (0.795099, 0.57432), (0.784058, 0.615653), (0.795099, 0.57432), (0.795099, 0.615653), (0.806139, 0.57432), (0.806139, 0.615653), (0.795099, 0.615653), (0.806139, 0.57432), (0.795099, 0.615653), (0.795099, 0.57432), (0.600713, 0.335146), (0.600713, 0.662873), (0.553732, 0.662873), (0.600713, 0.335146), (0.553732, 0.662873), (0.553732, 0.335146), (0.726037, 0.335146), (0.726037, 0.664074), (0.694706, 0.664074), (0.726037, 0.335146), (0.694706, 0.664074), (0.714997, 0.335146), (0.83568, 0.454733), (0.83568, 0.57432), (0.804349, 0.57432), (0.83568, 0.454733), (0.804349, 0.57432), (0.82464, 0.454733), (0.726037, 0.575733), (0.726037, 0.45544), (0.773018, 0.45544), (0.726037, 0.575733), (0.773018, 0.45544), (0.773018, 0.575733), (0.506752, 0.335146), (0.506752, 0.49961), (0.501842, 0.49961), (0.506752, 0.335146), (0.501842, 0.49961), (0.501842, 0.335146), (0.492023, 0.664074), (0.334923, 0.664074), (0.334923, 0.335146), (0.492023, 0.664074), (0.334923, 0.335146), (0.492023, 0.335146), (0.804154, 0.957324), (0.804283, 0.82253), (0.843948, 0.81077), (0.804154, 0.957324), (0.843948, 0.81077), (0.843948, 0.957465), (0.51502, 0.664074), (0.64496, 0.664074), (0.64496, 0.993003), (0.51502, 0.664074), (0.64496, 0.993003), (0.51502, 0.993003), (0.843948, 0.664074), (0.843948, 0.81077), (0.804283, 0.799009), (0.843948, 0.664074), (0.804283, 0.799009), (0.804154, 0.664215), (0.64496, 0.664074), (0.764359, 0.664074), (0.76436, 0.993003), (0.64496, 0.664074), (0.76436, 0.993003), (0.64496, 0.993003), (0.76436, 0.993003), (0.76436, 0.664074), (0.804154, 0.664074), (0.76436, 0.993003), (0.804154, 0.664074), (0.804154, 0.993003), (0.274164, 0.664074), (0.280731, 0.679928), (0.193676, 0.766982), (0.274164, 0.664074), (0.193676, 0.766982), (0.177823, 0.760415), (0.177823, 0.760415), (0.193676, 0.766982), (0.193676, 0.890095), (0.177823, 0.760415), (0.193676, 0.890095), (0.177823, 0.896662), (0.177823, 0.896662), (0.193676, 0.890095), (0.28073, 0.97715), (0.177823, 0.896662), (0.28073, 0.97715), (0.274164, 0.993003), (0.274164, 0.993003), (0.28073, 0.97715), (0.403844, 0.97715), (0.274164, 0.993003), (0.403844, 0.97715), (0.41041, 0.993003), (0.41041, 0.993003), (0.403844, 0.97715), (0.490898, 0.890095), (0.41041, 0.993003), (0.490898, 0.890095), (0.506751, 0.896662), (0.506751, 0.896662), (0.490898, 0.890095), (0.490898, 0.766982), (0.506751, 0.896662), (0.490898, 0.766982), (0.506752, 0.760415), (0.506752, 0.760415), (0.490898, 0.766982), (0.403844, 0.679928), (0.506752, 0.760415), (0.403844, 0.679928), (0.410411, 0.664074), (0.410411, 0.664074), (0.403844, 0.679928), (0.280731, 0.679928), (0.410411, 0.664074), (0.280731, 0.679928), (0.274164, 0.664074), (0.260055, 0.335146), (0.260055, 0.006217), (0.277086, 0.006217), (0.260055, 0.335146), (0.277086, 0.006217), (0.277086, 0.335146), (0.277086, 0.335146), (0.277086, 0.006217), (0.301171, 0.006217), (0.277086, 0.335146), (0.301171, 0.006217), (0.301171, 0.335146), (0.424519, 0.006217), (0.424519, 0.335146), (0.407488, 0.335146), (0.424519, 0.006217), (0.407488, 0.335146), (0.407489, 0.006217), (0.407489, 0.006217), (0.407488, 0.335146), (0.383403, 0.335146), (0.407489, 0.006217), (0.383403, 0.335146), (0.383404, 0.006217), (0.218939, 0.335146), (0.218939, 0.006217), (0.23597, 0.006217), (0.218939, 0.335146), (0.23597, 0.006217), (0.23597, 0.335146), (0.23597, 0.335146), (0.23597, 0.006217), (0.260055, 0.006217), (0.23597, 0.335146), (0.260055, 0.006217), (0.260055, 0.335146), (0.177823, 0.335146), (0.177823, 0.006217), (0.194854, 0.006217), (0.177823, 0.335146), (0.194854, 0.006217), (0.194854, 0.335146), (0.194854, 0.335146), (0.194854, 0.006217), (0.218939, 0.006217), (0.194854, 0.335146), (0.218939, 0.006217), (0.218939, 0.335146), (0.342287, 0.335146), (0.318202, 0.335146), (0.318202, 0.006217), (0.342287, 0.335146), (0.318202, 0.006217), (0.342287, 0.006217), (0.318202, 0.335146), (0.301171, 0.335146), (0.301171, 0.006217), (0.318202, 0.335146), (0.301171, 0.006217), (0.318202, 0.006217), (0.342287, 0.006217), (0.366372, 0.006217), (0.366372, 0.335146), (0.342287, 0.006217), (0.366372, 0.335146), (0.342287, 0.335146), (0.366372, 0.006217), (0.383403, 0.006217), (0.383403, 0.335146), (0.366372, 0.006217), (0.383403, 0.335146), (0.366372, 0.335146), (0.506751, 0.335146), (0.482666, 0.335146), (0.482666, 0.006217), (0.506751, 0.335146), (0.482666, 0.006217), (0.506751, 0.006217), (0.482666, 0.335146), (0.465635, 0.335146), (0.465635, 0.006217), (0.482666, 0.335146), (0.465635, 0.006217), (0.482666, 0.006217), (0.424519, 0.006217), (0.448605, 0.006217), (0.448605, 0.335146), (0.424519, 0.006217), (0.448605, 0.335146), (0.424519, 0.335146), (0.448605, 0.006217), (0.465635, 0.006217), (0.465635, 0.335146), (0.448605, 0.006217), (0.465635, 0.335146), (0.448605, 0.335146)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }

            def Xform "collision"
            {
                uniform token purpose = "guide"
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    rel material:binding = </Looks/MaterialPhysics_2>

                    def Mesh "Cube_Cube_001"
                    {
                        float3[] extent = [(-0.8, -0.412219, 0.006375), (0.8, 0.4, 0.810564)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
                        rel material:binding = </Looks/Material_6>
                        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.8, -0.412219, 0.728774), (-0.8, -0.412219, 0.810564), (-0.8, 0.4, 0.810564), (-0.8, -0.412219, 0.728774), (-0.8, 0.4, 0.810564), (-0.8, 0.4, 0.728774), (-0.8, 0.4, 0.728774), (-0.8, 0.4, 0.810564), (0.8, 0.4, 0.810564), (-0.8, 0.4, 0.728774), (0.8, 0.4, 0.810564), (0.8, 0.4, 0.728774), (0.8, 0.4, 0.728774), (0.8, 0.4, 0.810564), (0.8, -0.412219, 0.810564), (0.8, 0.4, 0.728774), (0.8, -0.412219, 0.810564), (0.8, -0.412219, 0.728774), (0.8, -0.412219, 0.728774), (0.8, -0.412219, 0.810564), (-0.8, -0.412219, 0.810564), (0.8, -0.412219, 0.728774), (-0.8, -0.412219, 0.810564), (-0.8, -0.412219, 0.728774), (-0.8, 0.4, 0.728774), (0.8, 0.4, 0.728774), (0.8, -0.412219, 0.728774), (-0.8, 0.4, 0.728774), (0.8, -0.412219, 0.728774), (-0.8, -0.412219, 0.728774), (0.8, 0.4, 0.810564), (-0.8, 0.4, 0.810564), (-0.8, -0.412219, 0.810564), (0.8, 0.4, 0.810564), (-0.8, -0.412219, 0.810564), (0.8, -0.412219, 0.810564)]
                        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0), (0.625, 0.25), (0.375, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.5), (0.375, 0.75), (0.125, 0.75), (0.625, 0.5), (0.875, 0.5), (0.875, 0.75), (0.625, 0.5), (0.875, 0.75), (0.625, 0.75)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }

                    def Mesh "Cube_001_Cube_002"
                    {
                        float3[] extent = [(-0.8, -0.412219, 0.006375), (0.8, 0.4, 0.810564)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
                        rel material:binding = </Looks/Material_7>
                        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.729416, -0.29688, 0.006375), (-0.729416, -0.29688, 0.728774), (-0.729416, 0.4, 0.728774), (-0.729416, -0.29688, 0.006375), (-0.729416, 0.4, 0.728774), (-0.729416, 0.4, 0.006375), (-0.729416, 0.4, 0.006375), (-0.729416, 0.4, 0.728774), (-0.670587, 0.4, 0.728774), (-0.729416, 0.4, 0.006375), (-0.670587, 0.4, 0.728774), (-0.670587, 0.4, 0.006375), (-0.670587, 0.4, 0.006375), (-0.670587, 0.4, 0.728774), (-0.670587, -0.29688, 0.728774), (-0.670587, 0.4, 0.006375), (-0.670587, -0.29688, 0.728774), (-0.670587, -0.29688, 0.006375), (-0.670587, -0.29688, 0.006375), (-0.670587, -0.29688, 0.728774), (-0.729416, -0.29688, 0.728774), (-0.670587, -0.29688, 0.006375), (-0.729416, -0.29688, 0.728774), (-0.729416, -0.29688, 0.006375), (-0.729416, 0.4, 0.006375), (-0.670587, 0.4, 0.006375), (-0.670587, -0.29688, 0.006375), (-0.729416, 0.4, 0.006375), (-0.670587, -0.29688, 0.006375), (-0.729416, -0.29688, 0.006375)]
                        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0), (0.625, 0.25), (0.375, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.5), (0.375, 0.75), (0.125, 0.75)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }

                    def Mesh "Cube_002_Cube_003"
                    {
                        float3[] extent = [(-0.8, -0.412219, 0.006375), (0.8, 0.4, 0.810564)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
                        rel material:binding = </Looks/Material_8>
                        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(0.658403, -0.29688, 0.006375), (0.658403, -0.29688, 0.728774), (0.658403, 0.4, 0.728774), (0.658403, -0.29688, 0.006375), (0.658403, 0.4, 0.728774), (0.658403, 0.4, 0.006375), (0.658403, 0.4, 0.006375), (0.658403, 0.4, 0.728774), (0.7416, 0.4, 0.728774), (0.658403, 0.4, 0.006375), (0.7416, 0.4, 0.728774), (0.7416, 0.4, 0.006375), (0.7416, 0.4, 0.006375), (0.7416, 0.4, 0.728774), (0.7416, -0.29688, 0.728774), (0.7416, 0.4, 0.006375), (0.7416, -0.29688, 0.728774), (0.7416, -0.29688, 0.006375), (0.7416, -0.29688, 0.006375), (0.7416, -0.29688, 0.728774), (0.658403, -0.29688, 0.728774), (0.7416, -0.29688, 0.006375), (0.658403, -0.29688, 0.728774), (0.658403, -0.29688, 0.006375), (0.658403, 0.4, 0.006375), (0.7416, 0.4, 0.006375), (0.7416, -0.29688, 0.006375), (0.658403, 0.4, 0.006375), (0.7416, -0.29688, 0.006375), (0.658403, -0.29688, 0.006375)]
                        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0), (0.625, 0.25), (0.375, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.5), (0.375, 0.75), (0.125, 0.75)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }
        }
    }

    def Xform "Drawer_1"
    {
        float3 xformOp:rotateXYZ = (0, -0, 90)
        double3 xformOp:translate = (0, -0.45, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "body"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "visual"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry"
                {
                    def Mesh "Drawer_LP"
                    {
                        float3[] extent = [(-0.205, -0.262323, 0.00878), (0.205, 0.24, 0.63)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317]
                        rel material:binding = </Looks/Material_9>
                        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.735945, 0.67704135, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, 0.5562874), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0, -0.2716953, -0.96238333), (0.11800486, -0.22860941, 0.96633977), (0, -0.2716953, 0.96238333), (0, -0.8193306, 0.5733214), (0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.11800486, -0.22860941, 0.96633977), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.39689103, -0.73008347, 0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.19449925, -0.1807993, -0.9640963), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.66527396, -0.6221757, -0.41268384), (0.39689103, -0.73008347, -0.5562874), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (-0.39689103, -0.73008347, 0.5562874), (-0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0, -0.8193306, 0.5733214), (-0.66527396, -0.6221757, 0.41268384), (-0.66527396, -0.6221757, -0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.2716953, -0.96238333), (-0, -0.8193306, -0.5733214), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, -0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0, -0.2716953, 0.96238333), (-0.19449925, -0.1807993, 0.9640963), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, 0.5562874), (-0.19449925, -0.1807993, 0.9640963), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.11800486, -0.22860941, -0.96633977), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, -0.41268384), (-0.11800486, -0.22860941, -0.96633977), (-0.66527396, -0.6221757, -0.41268384), (-0.19449925, -0.1807993, -0.9640963), (0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, 0.5562874), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0, -0.2716953, -0.96238333), (0.11800486, -0.22860941, 0.96633977), (0, -0.2716953, 0.96238333), (0, -0.8193306, 0.5733214), (0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.11800486, -0.22860941, 0.96633977), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.39689103, -0.73008347, 0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.19449925, -0.1807993, -0.9640963), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.66527396, -0.6221757, -0.41268384), (0.39689103, -0.73008347, -0.5562874), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (-0.39689103, -0.73008347, 0.5562874), (-0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0, -0.8193306, 0.5733214), (-0.66527396, -0.6221757, 0.41268384), (-0.66527396, -0.6221757, -0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.2716953, -0.96238333), (-0, -0.8193306, -0.5733214), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, -0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0, -0.2716953, 0.96238333), (-0.19449925, -0.1807993, 0.9640963), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, 0.5562874), (-0.19449925, -0.1807993, 0.9640963), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.11800486, -0.22860941, -0.96633977), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, -0.41268384), (-0.11800486, -0.22860941, -0.96633977), (-0.66527396, -0.6221757, -0.41268384), (-0.19449925, -0.1807993, -0.9640963), (0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, 0.5562874), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0, -0.2716953, -0.96238333), (0.11800486, -0.22860941, 0.96633977), (0, -0.2716953, 0.96238333), (0, -0.8193306, 0.5733214), (0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.11800486, -0.22860941, 0.96633977), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.39689103, -0.73008347, 0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.19449925, -0.1807993, -0.9640963), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.66527396, -0.6221757, -0.41268384), (0.39689103, -0.73008347, -0.5562874), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (-0.39689103, -0.73008347, 0.5562874), (-0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0, -0.8193306, 0.5733214), (-0.66527396, -0.6221757, 0.41268384), (-0.66527396, -0.6221757, -0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.2716953, -0.96238333), (-0, -0.8193306, -0.5733214), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, -0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0, -0.2716953, 0.96238333), (-0.19449925, -0.1807993, 0.9640963), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, 0.5562874), (-0.19449925, -0.1807993, 0.9640963), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.11800486, -0.22860941, -0.96633977), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, -0.41268384), (-0.11800486, -0.22860941, -0.96633977), (-0.66527396, -0.6221757, -0.41268384), (-0.19449925, -0.1807993, -0.9640963), (0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (0, 1, 0), (0.4740879, 0.88047755, 0)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.205, -0.241531, 0.00878), (-0.205, -0.241531, 0.63), (-0.205, 0.24, 0.63), (-0.205, -0.241531, 0.00878), (-0.205, 0.24, 0.63), (-0.205, 0.24, 0.00878), (-0.205, 0.24, 0.00878), (-0.205, 0.24, 0.63), (0.205, 0.24, 0.63), (-0.205, 0.24, 0.00878), (0.205, 0.24, 0.63), (0.205, 0.24, 0.00878), (0.205, 0.24, 0.00878), (0.205, 0.24, 0.63), (0.205, -0.241531, 0.63), (0.205, 0.24, 0.00878), (0.205, -0.241531, 0.63), (0.205, -0.241531, 0.00878), (0.205, -0.241531, 0.00878), (0.205, -0.241531, 0.63), (-0.205, -0.241531, 0.63), (0.205, -0.241531, 0.00878), (-0.205, -0.241531, 0.63), (-0.205, -0.241531, 0.00878), (0.205, 0.24, 0.63), (-0.205, 0.24, 0.63), (-0.205, -0.241531, 0.63), (0.205, 0.24, 0.63), (-0.205, -0.241531, 0.63), (0.205, -0.241531, 0.63), (0.032635, -0.238876, 0.565723), (0.032635, -0.238876, 0.556776), (0.021002, -0.251522, 0.556776), (0.032635, -0.238876, 0.565723), (0.021002, -0.251522, 0.556776), (0.021002, -0.251522, 0.565723), (0.025067, -0.257928, 0.563677), (0, -0.262323, 0.563677), (0, -0.262323, 0.558822), (0.025067, -0.257928, 0.563677), (0, -0.262323, 0.558822), (0.025067, -0.257928, 0.558822), (0.042834, -0.238948, 0.563677), (0.025067, -0.257928, 0.563677), (0.025067, -0.257928, 0.558822), (0.042834, -0.238948, 0.563677), (0.025067, -0.257928, 0.558822), (0.042834, -0.238948, 0.558822), (0.021002, -0.251522, 0.556776), (0.025067, -0.257928, 0.558822), (0, -0.262323, 0.558822), (0.021002, -0.251522, 0.556776), (0, -0.262323, 0.558822), (0, -0.254927, 0.556776), (0.021002, -0.251522, 0.565723), (0, -0.254927, 0.565723), (0, -0.262323, 0.563677), (0.021002, -0.251522, 0.565723), (0, -0.262323, 0.563677), (0.025067, -0.257928, 0.563677), (0.032635, -0.238876, 0.565723), (0.021002, -0.251522, 0.565723), (0.025067, -0.257928, 0.563677), (0.032635, -0.238876, 0.565723), (0.025067, -0.257928, 0.563677), (0.042834, -0.238948, 0.563677), (0.021002, -0.251522, 0.556776), (0.032635, -0.238876, 0.556776), (0.042834, -0.238948, 0.558822), (0.021002, -0.251522, 0.556776), (0.042834, -0.238948, 0.558822), (0.025067, -0.257928, 0.558822), (0.021002, -0.251522, 0.565723), (0.021002, -0.251522, 0.556776), (0, -0.254927, 0.556776), (0.021002, -0.251522, 0.565723), (0, -0.254927, 0.556776), (0, -0.254927, 0.565723), (-0.032635, -0.238876, 0.565723), (-0.021002, -0.251522, 0.565723), (-0.021002, -0.251522, 0.556776), (-0.032635, -0.238876, 0.565723), (-0.021002, -0.251522, 0.556776), (-0.032635, -0.238876, 0.556776), (-0.025067, -0.257928, 0.563677), (-0.025067, -0.257928, 0.558822), (0, -0.262323, 0.558822), (-0.025067, -0.257928, 0.563677), (0, -0.262323, 0.558822), (0, -0.262323, 0.563677), (-0.042834, -0.238948, 0.563677), (-0.042834, -0.238948, 0.558822), (-0.025067, -0.257928, 0.558822), (-0.042834, -0.238948, 0.563677), (-0.025067, -0.257928, 0.558822), (-0.025067, -0.257928, 0.563677), (-0.021002, -0.251522, 0.556776), (0, -0.254927, 0.556776), (0, -0.262323, 0.558822), (-0.021002, -0.251522, 0.556776), (0, -0.262323, 0.558822), (-0.025067, -0.257928, 0.558822), (-0.021002, -0.251522, 0.565723), (-0.025067, -0.257928, 0.563677), (0, -0.262323, 0.563677), (-0.021002, -0.251522, 0.565723), (0, -0.262323, 0.563677), (0, -0.254927, 0.565723), (-0.032635, -0.238876, 0.565723), (-0.042834, -0.238948, 0.563677), (-0.025067, -0.257928, 0.563677), (-0.032635, -0.238876, 0.565723), (-0.025067, -0.257928, 0.563677), (-0.021002, -0.251522, 0.565723), (-0.021002, -0.251522, 0.556776), (-0.025067, -0.257928, 0.558822), (-0.042834, -0.238948, 0.558822), (-0.021002, -0.251522, 0.556776), (-0.042834, -0.238948, 0.558822), (-0.032635, -0.238876, 0.556776), (-0.021002, -0.251522, 0.565723), (0, -0.254927, 0.565723), (0, -0.254927, 0.556776), (-0.021002, -0.251522, 0.565723), (0, -0.254927, 0.556776), (-0.021002, -0.251522, 0.556776), (0.032635, -0.238876, 0.425931), (0.032635, -0.238876, 0.416984), (0.021002, -0.251522, 0.416984), (0.032635, -0.238876, 0.425931), (0.021002, -0.251522, 0.416984), (0.021002, -0.251522, 0.425931), (0.025067, -0.257928, 0.423885), (0, -0.262323, 0.423885), (0, -0.262323, 0.41903), (0.025067, -0.257928, 0.423885), (0, -0.262323, 0.41903), (0.025067, -0.257928, 0.41903), (0.042834, -0.238948, 0.423885), (0.025067, -0.257928, 0.423885), (0.025067, -0.257928, 0.41903), (0.042834, -0.238948, 0.423885), (0.025067, -0.257928, 0.41903), (0.042834, -0.238948, 0.41903), (0.021002, -0.251522, 0.416984), (0.025067, -0.257928, 0.41903), (0, -0.262323, 0.41903), (0.021002, -0.251522, 0.416984), (0, -0.262323, 0.41903), (0, -0.254927, 0.416984), (0.021002, -0.251522, 0.425931), (0, -0.254927, 0.425931), (0, -0.262323, 0.423885), (0.021002, -0.251522, 0.425931), (0, -0.262323, 0.423885), (0.025067, -0.257928, 0.423885), (0.032635, -0.238876, 0.425931), (0.021002, -0.251522, 0.425931), (0.025067, -0.257928, 0.423885), (0.032635, -0.238876, 0.425931), (0.025067, -0.257928, 0.423885), (0.042834, -0.238948, 0.423885), (0.021002, -0.251522, 0.416984), (0.032635, -0.238876, 0.416984), (0.042834, -0.238948, 0.41903), (0.021002, -0.251522, 0.416984), (0.042834, -0.238948, 0.41903), (0.025067, -0.257928, 0.41903), (0.021002, -0.251522, 0.425931), (0.021002, -0.251522, 0.416984), (0, -0.254927, 0.416984), (0.021002, -0.251522, 0.425931), (0, -0.254927, 0.416984), (0, -0.254927, 0.425931), (-0.032635, -0.238876, 0.425931), (-0.021002, -0.251522, 0.425931), (-0.021002, -0.251522, 0.416984), (-0.032635, -0.238876, 0.425931), (-0.021002, -0.251522, 0.416984), (-0.032635, -0.238876, 0.416984), (-0.025067, -0.257928, 0.423885), (-0.025067, -0.257928, 0.41903), (0, -0.262323, 0.41903), (-0.025067, -0.257928, 0.423885), (0, -0.262323, 0.41903), (0, -0.262323, 0.423885), (-0.042834, -0.238948, 0.423885), (-0.042834, -0.238948, 0.41903), (-0.025067, -0.257928, 0.41903), (-0.042834, -0.238948, 0.423885), (-0.025067, -0.257928, 0.41903), (-0.025067, -0.257928, 0.423885), (-0.021002, -0.251522, 0.416984), (0, -0.254927, 0.416984), (0, -0.262323, 0.41903), (-0.021002, -0.251522, 0.416984), (0, -0.262323, 0.41903), (-0.025067, -0.257928, 0.41903), (-0.021002, -0.251522, 0.425931), (-0.025067, -0.257928, 0.423885), (0, -0.262323, 0.423885), (-0.021002, -0.251522, 0.425931), (0, -0.262323, 0.423885), (0, -0.254927, 0.425931), (-0.032635, -0.238876, 0.425931), (-0.042834, -0.238948, 0.423885), (-0.025067, -0.257928, 0.423885), (-0.032635, -0.238876, 0.425931), (-0.025067, -0.257928, 0.423885), (-0.021002, -0.251522, 0.425931), (-0.021002, -0.251522, 0.416984), (-0.025067, -0.257928, 0.41903), (-0.042834, -0.238948, 0.41903), (-0.021002, -0.251522, 0.416984), (-0.042834, -0.238948, 0.41903), (-0.032635, -0.238876, 0.416984), (-0.021002, -0.251522, 0.425931), (0, -0.254927, 0.425931), (0, -0.254927, 0.416984), (-0.021002, -0.251522, 0.425931), (0, -0.254927, 0.416984), (-0.021002, -0.251522, 0.416984), (0.032635, -0.238876, 0.249308), (0.032635, -0.238876, 0.240361), (0.021002, -0.251522, 0.240361), (0.032635, -0.238876, 0.249308), (0.021002, -0.251522, 0.240361), (0.021002, -0.251522, 0.249308), (0.025067, -0.257928, 0.247262), (0, -0.262323, 0.247262), (0, -0.262323, 0.242407), (0.025067, -0.257928, 0.247262), (0, -0.262323, 0.242407), (0.025067, -0.257928, 0.242407), (0.042834, -0.238948, 0.247262), (0.025067, -0.257928, 0.247262), (0.025067, -0.257928, 0.242407), (0.042834, -0.238948, 0.247262), (0.025067, -0.257928, 0.242407), (0.042834, -0.238948, 0.242407), (0.021002, -0.251522, 0.240361), (0.025067, -0.257928, 0.242407), (0, -0.262323, 0.242407), (0.021002, -0.251522, 0.240361), (0, -0.262323, 0.242407), (0, -0.254927, 0.240361), (0.021002, -0.251522, 0.249308), (0, -0.254927, 0.249308), (0, -0.262323, 0.247262), (0.021002, -0.251522, 0.249308), (0, -0.262323, 0.247262), (0.025067, -0.257928, 0.247262), (0.032635, -0.238876, 0.249308), (0.021002, -0.251522, 0.249308), (0.025067, -0.257928, 0.247262), (0.032635, -0.238876, 0.249308), (0.025067, -0.257928, 0.247262), (0.042834, -0.238948, 0.247262), (0.021002, -0.251522, 0.240361), (0.032635, -0.238876, 0.240361), (0.042834, -0.238948, 0.242407), (0.021002, -0.251522, 0.240361), (0.042834, -0.238948, 0.242407), (0.025067, -0.257928, 0.242407), (0.021002, -0.251522, 0.249308), (0.021002, -0.251522, 0.240361), (0, -0.254927, 0.240361), (0.021002, -0.251522, 0.249308), (0, -0.254927, 0.240361), (0, -0.254927, 0.249308), (-0.032635, -0.238876, 0.249308), (-0.021002, -0.251522, 0.249308), (-0.021002, -0.251522, 0.240361), (-0.032635, -0.238876, 0.249308), (-0.021002, -0.251522, 0.240361), (-0.032635, -0.238876, 0.240361), (-0.025067, -0.257928, 0.247262), (-0.025067, -0.257928, 0.242407), (0, -0.262323, 0.242407), (-0.025067, -0.257928, 0.247262), (0, -0.262323, 0.242407), (0, -0.262323, 0.247262), (-0.042834, -0.238948, 0.247262), (-0.042834, -0.238948, 0.242407), (-0.025067, -0.257928, 0.242407), (-0.042834, -0.238948, 0.247262), (-0.025067, -0.257928, 0.242407), (-0.025067, -0.257928, 0.247262), (-0.021002, -0.251522, 0.240361), (0, -0.254927, 0.240361), (0, -0.262323, 0.242407), (-0.021002, -0.251522, 0.240361), (0, -0.262323, 0.242407), (-0.025067, -0.257928, 0.242407), (-0.021002, -0.251522, 0.249308), (-0.025067, -0.257928, 0.247262), (0, -0.262323, 0.247262), (-0.021002, -0.251522, 0.249308), (0, -0.262323, 0.247262), (0, -0.254927, 0.249308), (-0.032635, -0.238876, 0.249308), (-0.042834, -0.238948, 0.247262), (-0.025067, -0.257928, 0.247262), (-0.032635, -0.238876, 0.249308), (-0.025067, -0.257928, 0.247262), (-0.021002, -0.251522, 0.249308), (-0.021002, -0.251522, 0.240361), (-0.025067, -0.257928, 0.242407), (-0.042834, -0.238948, 0.242407), (-0.021002, -0.251522, 0.240361), (-0.042834, -0.238948, 0.242407), (-0.032635, -0.238876, 0.240361), (-0.021002, -0.251522, 0.249308), (0, -0.254927, 0.249308), (0, -0.254927, 0.240361), (-0.021002, -0.251522, 0.249308), (0, -0.254927, 0.240361), (-0.021002, -0.251522, 0.240361)]
                        float2[] primvars:st = [(0.987506, 0.986044), (0.539398, 0.986044), (0.539398, 0.644628), (0.987506, 0.986044), (0.539398, 0.644628), (0.987506, 0.644628), (0.987506, 0.644628), (0.539398, 0.644628), (0.539398, 0.353002), (0.987506, 0.644628), (0.539398, 0.353002), (0.987506, 0.353002), (0.987506, 0.353002), (0.539398, 0.353002), (0.539398, 0.011586), (0.987506, 0.353002), (0.539398, 0.011586), (0.987506, 0.011586), (0.430748, 0.344308), (0.430748, 0.989825), (0.01065, 0.989825), (0.430748, 0.344308), (0.01065, 0.989825), (0.01065, 0.344309), (0.010538, 0.331102), (0.010538, 0.011535), (0.384666, 0.011535), (0.010538, 0.331102), (0.384666, 0.011535), (0.384665, 0.331102), (0.503134, 0.313284), (0.525852, 0.315025), (0.522931, 0.361055), (0.503134, 0.313284), (0.522931, 0.361055), (0.49899, 0.360538), (0.479862, 0.359258), (0.480548, 0.417686), (0.468119, 0.417686), (0.479862, 0.359258), (0.468119, 0.417686), (0.46827, 0.359635), (0.480517, 0.292251), (0.479862, 0.359258), (0.46827, 0.359635), (0.480517, 0.292251), (0.46827, 0.359635), (0.466141, 0.292331), (0.449248, 0.361437), (0.46827, 0.359635), (0.468119, 0.417686), (0.449248, 0.361437), (0.468119, 0.417686), (0.449445, 0.417686), (0.49899, 0.360538), (0.498022, 0.417686), (0.480548, 0.417686), (0.49899, 0.360538), (0.480548, 0.417686), (0.479862, 0.359258), (0.503134, 0.313284), (0.49899, 0.360538), (0.479862, 0.359258), (0.503134, 0.313284), (0.479862, 0.359258), (0.480517, 0.292251), (0.449248, 0.361437), (0.443779, 0.313714), (0.466141, 0.292331), (0.449248, 0.361437), (0.466141, 0.292331), (0.46827, 0.359635), (0.49899, 0.360538), (0.522931, 0.361055), (0.522062, 0.417686), (0.49899, 0.360538), (0.522062, 0.417686), (0.498022, 0.417686), (0.503134, 0.522089), (0.49899, 0.474834), (0.522931, 0.474318), (0.503134, 0.522089), (0.522931, 0.474318), (0.525852, 0.520347), (0.479862, 0.476114), (0.46827, 0.475738), (0.468119, 0.417686), (0.479862, 0.476114), (0.468119, 0.417686), (0.480548, 0.417686), (0.480517, 0.543121), (0.466141, 0.543041), (0.46827, 0.475738), (0.480517, 0.543121), (0.46827, 0.475738), (0.479862, 0.476114), (0.449248, 0.473935), (0.449445, 0.417686), (0.468119, 0.417686), (0.449248, 0.473935), (0.468119, 0.417686), (0.46827, 0.475738), (0.49899, 0.474834), (0.479862, 0.476114), (0.480548, 0.417686), (0.49899, 0.474834), (0.480548, 0.417686), (0.498022, 0.417686), (0.503134, 0.522089), (0.480517, 0.543121), (0.479862, 0.476114), (0.503134, 0.522089), (0.479862, 0.476114), (0.49899, 0.474834), (0.449248, 0.473935), (0.46827, 0.475738), (0.466141, 0.543041), (0.449248, 0.473935), (0.466141, 0.543041), (0.443779, 0.521658), (0.49899, 0.474834), (0.498022, 0.417686), (0.522062, 0.417686), (0.49899, 0.474834), (0.522062, 0.417686), (0.522931, 0.474318), (0.503134, 0.580278), (0.525852, 0.58202), (0.522931, 0.628049), (0.503134, 0.580278), (0.522931, 0.628049), (0.49899, 0.627533), (0.479862, 0.626253), (0.480548, 0.684681), (0.468119, 0.684681), (0.479862, 0.626253), (0.468119, 0.684681), (0.46827, 0.626629), (0.480517, 0.559246), (0.479862, 0.626253), (0.46827, 0.626629), (0.480517, 0.559246), (0.46827, 0.626629), (0.466141, 0.559326), (0.449248, 0.628432), (0.46827, 0.626629), (0.468119, 0.684681), (0.449248, 0.628432), (0.468119, 0.684681), (0.449445, 0.684681), (0.49899, 0.627533), (0.498022, 0.684681), (0.480548, 0.684681), (0.49899, 0.627533), (0.480548, 0.684681), (0.479862, 0.626253), (0.503134, 0.580278), (0.49899, 0.627533), (0.479862, 0.626253), (0.503134, 0.580278), (0.479862, 0.626253), (0.480517, 0.559246), (0.449248, 0.628432), (0.443779, 0.580709), (0.466141, 0.559326), (0.449248, 0.628432), (0.466141, 0.559326), (0.46827, 0.626629), (0.49899, 0.627533), (0.522931, 0.628049), (0.522062, 0.684681), (0.49899, 0.627533), (0.522062, 0.684681), (0.498022, 0.684681), (0.503134, 0.789083), (0.49899, 0.741829), (0.522931, 0.741313), (0.503134, 0.789083), (0.522931, 0.741313), (0.525852, 0.787342), (0.479862, 0.743109), (0.46827, 0.742732), (0.468119, 0.684681), (0.479862, 0.743109), (0.468119, 0.684681), (0.480548, 0.684681), (0.480517, 0.810116), (0.466141, 0.810036), (0.46827, 0.742732), (0.480517, 0.810116), (0.46827, 0.742732), (0.479862, 0.743109), (0.449248, 0.74093), (0.449445, 0.684681), (0.468119, 0.684681), (0.449248, 0.74093), (0.468119, 0.684681), (0.46827, 0.742732), (0.49899, 0.741829), (0.479862, 0.743109), (0.480548, 0.684681), (0.49899, 0.741829), (0.480548, 0.684681), (0.498022, 0.684681), (0.503134, 0.789083), (0.480517, 0.810116), (0.479862, 0.743109), (0.503134, 0.789083), (0.479862, 0.743109), (0.49899, 0.741829), (0.449248, 0.74093), (0.46827, 0.742732), (0.466141, 0.810036), (0.449248, 0.74093), (0.466141, 0.810036), (0.443779, 0.788653), (0.49899, 0.741829), (0.498022, 0.684681), (0.522062, 0.684681), (0.49899, 0.741829), (0.522062, 0.684681), (0.522931, 0.741313), (0.503134, 0.038906), (0.525852, 0.040648), (0.522931, 0.086677), (0.503134, 0.038906), (0.522931, 0.086677), (0.49899, 0.08616), (0.479862, 0.084881), (0.480548, 0.143309), (0.468119, 0.143309), (0.479862, 0.084881), (0.468119, 0.143309), (0.46827, 0.085257), (0.480517, 0.017874), (0.479862, 0.084881), (0.46827, 0.085257), (0.480517, 0.017874), (0.46827, 0.085257), (0.466141, 0.017953), (0.449248, 0.087059), (0.46827, 0.085257), (0.468119, 0.143309), (0.449248, 0.087059), (0.468119, 0.143309), (0.449445, 0.143309), (0.49899, 0.08616), (0.498022, 0.143309), (0.480548, 0.143309), (0.49899, 0.08616), (0.480548, 0.143309), (0.479862, 0.084881), (0.503134, 0.038906), (0.49899, 0.08616), (0.479862, 0.084881), (0.503134, 0.038906), (0.479862, 0.084881), (0.480517, 0.017874), (0.449248, 0.087059), (0.443779, 0.039337), (0.466141, 0.017953), (0.449248, 0.087059), (0.466141, 0.017953), (0.46827, 0.085257), (0.49899, 0.08616), (0.522931, 0.086677), (0.522062, 0.143309), (0.49899, 0.08616), (0.522062, 0.143309), (0.498022, 0.143309), (0.503134, 0.247711), (0.49899, 0.200457), (0.522931, 0.19994), (0.503134, 0.247711), (0.522931, 0.19994), (0.525852, 0.24597), (0.479862, 0.201736), (0.46827, 0.20136), (0.468119, 0.143309), (0.479862, 0.201736), (0.468119, 0.143309), (0.480548, 0.143309), (0.480517, 0.268744), (0.466141, 0.268664), (0.46827, 0.20136), (0.480517, 0.268744), (0.46827, 0.20136), (0.479862, 0.201736), (0.449248, 0.199558), (0.449445, 0.143309), (0.468119, 0.143309), (0.449248, 0.199558), (0.468119, 0.143309), (0.46827, 0.20136), (0.49899, 0.200457), (0.479862, 0.201736), (0.480548, 0.143309), (0.49899, 0.200457), (0.480548, 0.143309), (0.498022, 0.143309), (0.503134, 0.247711), (0.480517, 0.268744), (0.479862, 0.201736), (0.503134, 0.247711), (0.479862, 0.201736), (0.49899, 0.200457), (0.449248, 0.199558), (0.46827, 0.20136), (0.466141, 0.268664), (0.449248, 0.199558), (0.466141, 0.268664), (0.443779, 0.247281), (0.49899, 0.200457), (0.498022, 0.143309), (0.522062, 0.143309), (0.49899, 0.200457), (0.522062, 0.143309), (0.522931, 0.19994)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }

            def Xform "collision"
            {
                uniform token purpose = "guide"
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    rel material:binding = </Looks/MaterialPhysics_3>

                    def Mesh "Drawer_LP"
                    {
                        float3[] extent = [(-0.205, -0.262323, 0.00878), (0.205, 0.24, 0.63)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317]
                        rel material:binding = </Looks/Material_10>
                        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.735945, 0.67704135, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, 0.5562874), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0, -0.2716953, -0.96238333), (0.11800486, -0.22860941, 0.96633977), (0, -0.2716953, 0.96238333), (0, -0.8193306, 0.5733214), (0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.11800486, -0.22860941, 0.96633977), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.39689103, -0.73008347, 0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.19449925, -0.1807993, -0.9640963), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.66527396, -0.6221757, -0.41268384), (0.39689103, -0.73008347, -0.5562874), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (-0.39689103, -0.73008347, 0.5562874), (-0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0, -0.8193306, 0.5733214), (-0.66527396, -0.6221757, 0.41268384), (-0.66527396, -0.6221757, -0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.2716953, -0.96238333), (-0, -0.8193306, -0.5733214), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, -0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0, -0.2716953, 0.96238333), (-0.19449925, -0.1807993, 0.9640963), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, 0.5562874), (-0.19449925, -0.1807993, 0.9640963), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.11800486, -0.22860941, -0.96633977), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, -0.41268384), (-0.11800486, -0.22860941, -0.96633977), (-0.66527396, -0.6221757, -0.41268384), (-0.19449925, -0.1807993, -0.9640963), (0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, 0.5562874), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0, -0.2716953, -0.96238333), (0.11800486, -0.22860941, 0.96633977), (0, -0.2716953, 0.96238333), (0, -0.8193306, 0.5733214), (0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.11800486, -0.22860941, 0.96633977), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.39689103, -0.73008347, 0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.19449925, -0.1807993, -0.9640963), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.66527396, -0.6221757, -0.41268384), (0.39689103, -0.73008347, -0.5562874), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (-0.39689103, -0.73008347, 0.5562874), (-0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0, -0.8193306, 0.5733214), (-0.66527396, -0.6221757, 0.41268384), (-0.66527396, -0.6221757, -0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.2716953, -0.96238333), (-0, -0.8193306, -0.5733214), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, -0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0, -0.2716953, 0.96238333), (-0.19449925, -0.1807993, 0.9640963), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, 0.5562874), (-0.19449925, -0.1807993, 0.9640963), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.11800486, -0.22860941, -0.96633977), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, -0.41268384), (-0.11800486, -0.22860941, -0.96633977), (-0.66527396, -0.6221757, -0.41268384), (-0.19449925, -0.1807993, -0.9640963), (0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, 0.5562874), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0, -0.2716953, -0.96238333), (0.11800486, -0.22860941, 0.96633977), (0, -0.2716953, 0.96238333), (0, -0.8193306, 0.5733214), (0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.11800486, -0.22860941, 0.96633977), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.39689103, -0.73008347, 0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.19449925, -0.1807993, -0.9640963), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.66527396, -0.6221757, -0.41268384), (0.39689103, -0.73008347, -0.5562874), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (-0.39689103, -0.73008347, 0.5562874), (-0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0, -0.8193306, 0.5733214), (-0.66527396, -0.6221757, 0.41268384), (-0.66527396, -0.6221757, -0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.2716953, -0.96238333), (-0, -0.8193306, -0.5733214), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, -0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0, -0.2716953, 0.96238333), (-0.19449925, -0.1807993, 0.9640963), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, 0.5562874), (-0.19449925, -0.1807993, 0.9640963), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.11800486, -0.22860941, -0.96633977), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, -0.41268384), (-0.11800486, -0.22860941, -0.96633977), (-0.66527396, -0.6221757, -0.41268384), (-0.19449925, -0.1807993, -0.9640963), (0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (0, 1, 0), (0.4740879, 0.88047755, 0)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.205, -0.241531, 0.00878), (-0.205, -0.241531, 0.63), (-0.205, 0.24, 0.63), (-0.205, -0.241531, 0.00878), (-0.205, 0.24, 0.63), (-0.205, 0.24, 0.00878), (-0.205, 0.24, 0.00878), (-0.205, 0.24, 0.63), (0.205, 0.24, 0.63), (-0.205, 0.24, 0.00878), (0.205, 0.24, 0.63), (0.205, 0.24, 0.00878), (0.205, 0.24, 0.00878), (0.205, 0.24, 0.63), (0.205, -0.241531, 0.63), (0.205, 0.24, 0.00878), (0.205, -0.241531, 0.63), (0.205, -0.241531, 0.00878), (0.205, -0.241531, 0.00878), (0.205, -0.241531, 0.63), (-0.205, -0.241531, 0.63), (0.205, -0.241531, 0.00878), (-0.205, -0.241531, 0.63), (-0.205, -0.241531, 0.00878), (0.205, 0.24, 0.63), (-0.205, 0.24, 0.63), (-0.205, -0.241531, 0.63), (0.205, 0.24, 0.63), (-0.205, -0.241531, 0.63), (0.205, -0.241531, 0.63), (0.032635, -0.238876, 0.565723), (0.032635, -0.238876, 0.556776), (0.021002, -0.251522, 0.556776), (0.032635, -0.238876, 0.565723), (0.021002, -0.251522, 0.556776), (0.021002, -0.251522, 0.565723), (0.025067, -0.257928, 0.563677), (0, -0.262323, 0.563677), (0, -0.262323, 0.558822), (0.025067, -0.257928, 0.563677), (0, -0.262323, 0.558822), (0.025067, -0.257928, 0.558822), (0.042834, -0.238948, 0.563677), (0.025067, -0.257928, 0.563677), (0.025067, -0.257928, 0.558822), (0.042834, -0.238948, 0.563677), (0.025067, -0.257928, 0.558822), (0.042834, -0.238948, 0.558822), (0.021002, -0.251522, 0.556776), (0.025067, -0.257928, 0.558822), (0, -0.262323, 0.558822), (0.021002, -0.251522, 0.556776), (0, -0.262323, 0.558822), (0, -0.254927, 0.556776), (0.021002, -0.251522, 0.565723), (0, -0.254927, 0.565723), (0, -0.262323, 0.563677), (0.021002, -0.251522, 0.565723), (0, -0.262323, 0.563677), (0.025067, -0.257928, 0.563677), (0.032635, -0.238876, 0.565723), (0.021002, -0.251522, 0.565723), (0.025067, -0.257928, 0.563677), (0.032635, -0.238876, 0.565723), (0.025067, -0.257928, 0.563677), (0.042834, -0.238948, 0.563677), (0.021002, -0.251522, 0.556776), (0.032635, -0.238876, 0.556776), (0.042834, -0.238948, 0.558822), (0.021002, -0.251522, 0.556776), (0.042834, -0.238948, 0.558822), (0.025067, -0.257928, 0.558822), (0.021002, -0.251522, 0.565723), (0.021002, -0.251522, 0.556776), (0, -0.254927, 0.556776), (0.021002, -0.251522, 0.565723), (0, -0.254927, 0.556776), (0, -0.254927, 0.565723), (-0.032635, -0.238876, 0.565723), (-0.021002, -0.251522, 0.565723), (-0.021002, -0.251522, 0.556776), (-0.032635, -0.238876, 0.565723), (-0.021002, -0.251522, 0.556776), (-0.032635, -0.238876, 0.556776), (-0.025067, -0.257928, 0.563677), (-0.025067, -0.257928, 0.558822), (0, -0.262323, 0.558822), (-0.025067, -0.257928, 0.563677), (0, -0.262323, 0.558822), (0, -0.262323, 0.563677), (-0.042834, -0.238948, 0.563677), (-0.042834, -0.238948, 0.558822), (-0.025067, -0.257928, 0.558822), (-0.042834, -0.238948, 0.563677), (-0.025067, -0.257928, 0.558822), (-0.025067, -0.257928, 0.563677), (-0.021002, -0.251522, 0.556776), (0, -0.254927, 0.556776), (0, -0.262323, 0.558822), (-0.021002, -0.251522, 0.556776), (0, -0.262323, 0.558822), (-0.025067, -0.257928, 0.558822), (-0.021002, -0.251522, 0.565723), (-0.025067, -0.257928, 0.563677), (0, -0.262323, 0.563677), (-0.021002, -0.251522, 0.565723), (0, -0.262323, 0.563677), (0, -0.254927, 0.565723), (-0.032635, -0.238876, 0.565723), (-0.042834, -0.238948, 0.563677), (-0.025067, -0.257928, 0.563677), (-0.032635, -0.238876, 0.565723), (-0.025067, -0.257928, 0.563677), (-0.021002, -0.251522, 0.565723), (-0.021002, -0.251522, 0.556776), (-0.025067, -0.257928, 0.558822), (-0.042834, -0.238948, 0.558822), (-0.021002, -0.251522, 0.556776), (-0.042834, -0.238948, 0.558822), (-0.032635, -0.238876, 0.556776), (-0.021002, -0.251522, 0.565723), (0, -0.254927, 0.565723), (0, -0.254927, 0.556776), (-0.021002, -0.251522, 0.565723), (0, -0.254927, 0.556776), (-0.021002, -0.251522, 0.556776), (0.032635, -0.238876, 0.425931), (0.032635, -0.238876, 0.416984), (0.021002, -0.251522, 0.416984), (0.032635, -0.238876, 0.425931), (0.021002, -0.251522, 0.416984), (0.021002, -0.251522, 0.425931), (0.025067, -0.257928, 0.423885), (0, -0.262323, 0.423885), (0, -0.262323, 0.41903), (0.025067, -0.257928, 0.423885), (0, -0.262323, 0.41903), (0.025067, -0.257928, 0.41903), (0.042834, -0.238948, 0.423885), (0.025067, -0.257928, 0.423885), (0.025067, -0.257928, 0.41903), (0.042834, -0.238948, 0.423885), (0.025067, -0.257928, 0.41903), (0.042834, -0.238948, 0.41903), (0.021002, -0.251522, 0.416984), (0.025067, -0.257928, 0.41903), (0, -0.262323, 0.41903), (0.021002, -0.251522, 0.416984), (0, -0.262323, 0.41903), (0, -0.254927, 0.416984), (0.021002, -0.251522, 0.425931), (0, -0.254927, 0.425931), (0, -0.262323, 0.423885), (0.021002, -0.251522, 0.425931), (0, -0.262323, 0.423885), (0.025067, -0.257928, 0.423885), (0.032635, -0.238876, 0.425931), (0.021002, -0.251522, 0.425931), (0.025067, -0.257928, 0.423885), (0.032635, -0.238876, 0.425931), (0.025067, -0.257928, 0.423885), (0.042834, -0.238948, 0.423885), (0.021002, -0.251522, 0.416984), (0.032635, -0.238876, 0.416984), (0.042834, -0.238948, 0.41903), (0.021002, -0.251522, 0.416984), (0.042834, -0.238948, 0.41903), (0.025067, -0.257928, 0.41903), (0.021002, -0.251522, 0.425931), (0.021002, -0.251522, 0.416984), (0, -0.254927, 0.416984), (0.021002, -0.251522, 0.425931), (0, -0.254927, 0.416984), (0, -0.254927, 0.425931), (-0.032635, -0.238876, 0.425931), (-0.021002, -0.251522, 0.425931), (-0.021002, -0.251522, 0.416984), (-0.032635, -0.238876, 0.425931), (-0.021002, -0.251522, 0.416984), (-0.032635, -0.238876, 0.416984), (-0.025067, -0.257928, 0.423885), (-0.025067, -0.257928, 0.41903), (0, -0.262323, 0.41903), (-0.025067, -0.257928, 0.423885), (0, -0.262323, 0.41903), (0, -0.262323, 0.423885), (-0.042834, -0.238948, 0.423885), (-0.042834, -0.238948, 0.41903), (-0.025067, -0.257928, 0.41903), (-0.042834, -0.238948, 0.423885), (-0.025067, -0.257928, 0.41903), (-0.025067, -0.257928, 0.423885), (-0.021002, -0.251522, 0.416984), (0, -0.254927, 0.416984), (0, -0.262323, 0.41903), (-0.021002, -0.251522, 0.416984), (0, -0.262323, 0.41903), (-0.025067, -0.257928, 0.41903), (-0.021002, -0.251522, 0.425931), (-0.025067, -0.257928, 0.423885), (0, -0.262323, 0.423885), (-0.021002, -0.251522, 0.425931), (0, -0.262323, 0.423885), (0, -0.254927, 0.425931), (-0.032635, -0.238876, 0.425931), (-0.042834, -0.238948, 0.423885), (-0.025067, -0.257928, 0.423885), (-0.032635, -0.238876, 0.425931), (-0.025067, -0.257928, 0.423885), (-0.021002, -0.251522, 0.425931), (-0.021002, -0.251522, 0.416984), (-0.025067, -0.257928, 0.41903), (-0.042834, -0.238948, 0.41903), (-0.021002, -0.251522, 0.416984), (-0.042834, -0.238948, 0.41903), (-0.032635, -0.238876, 0.416984), (-0.021002, -0.251522, 0.425931), (0, -0.254927, 0.425931), (0, -0.254927, 0.416984), (-0.021002, -0.251522, 0.425931), (0, -0.254927, 0.416984), (-0.021002, -0.251522, 0.416984), (0.032635, -0.238876, 0.249308), (0.032635, -0.238876, 0.240361), (0.021002, -0.251522, 0.240361), (0.032635, -0.238876, 0.249308), (0.021002, -0.251522, 0.240361), (0.021002, -0.251522, 0.249308), (0.025067, -0.257928, 0.247262), (0, -0.262323, 0.247262), (0, -0.262323, 0.242407), (0.025067, -0.257928, 0.247262), (0, -0.262323, 0.242407), (0.025067, -0.257928, 0.242407), (0.042834, -0.238948, 0.247262), (0.025067, -0.257928, 0.247262), (0.025067, -0.257928, 0.242407), (0.042834, -0.238948, 0.247262), (0.025067, -0.257928, 0.242407), (0.042834, -0.238948, 0.242407), (0.021002, -0.251522, 0.240361), (0.025067, -0.257928, 0.242407), (0, -0.262323, 0.242407), (0.021002, -0.251522, 0.240361), (0, -0.262323, 0.242407), (0, -0.254927, 0.240361), (0.021002, -0.251522, 0.249308), (0, -0.254927, 0.249308), (0, -0.262323, 0.247262), (0.021002, -0.251522, 0.249308), (0, -0.262323, 0.247262), (0.025067, -0.257928, 0.247262), (0.032635, -0.238876, 0.249308), (0.021002, -0.251522, 0.249308), (0.025067, -0.257928, 0.247262), (0.032635, -0.238876, 0.249308), (0.025067, -0.257928, 0.247262), (0.042834, -0.238948, 0.247262), (0.021002, -0.251522, 0.240361), (0.032635, -0.238876, 0.240361), (0.042834, -0.238948, 0.242407), (0.021002, -0.251522, 0.240361), (0.042834, -0.238948, 0.242407), (0.025067, -0.257928, 0.242407), (0.021002, -0.251522, 0.249308), (0.021002, -0.251522, 0.240361), (0, -0.254927, 0.240361), (0.021002, -0.251522, 0.249308), (0, -0.254927, 0.240361), (0, -0.254927, 0.249308), (-0.032635, -0.238876, 0.249308), (-0.021002, -0.251522, 0.249308), (-0.021002, -0.251522, 0.240361), (-0.032635, -0.238876, 0.249308), (-0.021002, -0.251522, 0.240361), (-0.032635, -0.238876, 0.240361), (-0.025067, -0.257928, 0.247262), (-0.025067, -0.257928, 0.242407), (0, -0.262323, 0.242407), (-0.025067, -0.257928, 0.247262), (0, -0.262323, 0.242407), (0, -0.262323, 0.247262), (-0.042834, -0.238948, 0.247262), (-0.042834, -0.238948, 0.242407), (-0.025067, -0.257928, 0.242407), (-0.042834, -0.238948, 0.247262), (-0.025067, -0.257928, 0.242407), (-0.025067, -0.257928, 0.247262), (-0.021002, -0.251522, 0.240361), (0, -0.254927, 0.240361), (0, -0.262323, 0.242407), (-0.021002, -0.251522, 0.240361), (0, -0.262323, 0.242407), (-0.025067, -0.257928, 0.242407), (-0.021002, -0.251522, 0.249308), (-0.025067, -0.257928, 0.247262), (0, -0.262323, 0.247262), (-0.021002, -0.251522, 0.249308), (0, -0.262323, 0.247262), (0, -0.254927, 0.249308), (-0.032635, -0.238876, 0.249308), (-0.042834, -0.238948, 0.247262), (-0.025067, -0.257928, 0.247262), (-0.032635, -0.238876, 0.249308), (-0.025067, -0.257928, 0.247262), (-0.021002, -0.251522, 0.249308), (-0.021002, -0.251522, 0.240361), (-0.025067, -0.257928, 0.242407), (-0.042834, -0.238948, 0.242407), (-0.021002, -0.251522, 0.240361), (-0.042834, -0.238948, 0.242407), (-0.032635, -0.238876, 0.240361), (-0.021002, -0.251522, 0.249308), (0, -0.254927, 0.249308), (0, -0.254927, 0.240361), (-0.021002, -0.251522, 0.249308), (0, -0.254927, 0.240361), (-0.021002, -0.251522, 0.240361)]
                        float2[] primvars:st = [(0.987506, 0.986044), (0.539398, 0.986044), (0.539398, 0.644628), (0.987506, 0.986044), (0.539398, 0.644628), (0.987506, 0.644628), (0.987506, 0.644628), (0.539398, 0.644628), (0.539398, 0.353002), (0.987506, 0.644628), (0.539398, 0.353002), (0.987506, 0.353002), (0.987506, 0.353002), (0.539398, 0.353002), (0.539398, 0.011586), (0.987506, 0.353002), (0.539398, 0.011586), (0.987506, 0.011586), (0.430748, 0.344308), (0.430748, 0.989825), (0.01065, 0.989825), (0.430748, 0.344308), (0.01065, 0.989825), (0.01065, 0.344309), (0.010538, 0.331102), (0.010538, 0.011535), (0.384666, 0.011535), (0.010538, 0.331102), (0.384666, 0.011535), (0.384665, 0.331102), (0.503134, 0.313284), (0.525852, 0.315025), (0.522931, 0.361055), (0.503134, 0.313284), (0.522931, 0.361055), (0.49899, 0.360538), (0.479862, 0.359258), (0.480548, 0.417686), (0.468119, 0.417686), (0.479862, 0.359258), (0.468119, 0.417686), (0.46827, 0.359635), (0.480517, 0.292251), (0.479862, 0.359258), (0.46827, 0.359635), (0.480517, 0.292251), (0.46827, 0.359635), (0.466141, 0.292331), (0.449248, 0.361437), (0.46827, 0.359635), (0.468119, 0.417686), (0.449248, 0.361437), (0.468119, 0.417686), (0.449445, 0.417686), (0.49899, 0.360538), (0.498022, 0.417686), (0.480548, 0.417686), (0.49899, 0.360538), (0.480548, 0.417686), (0.479862, 0.359258), (0.503134, 0.313284), (0.49899, 0.360538), (0.479862, 0.359258), (0.503134, 0.313284), (0.479862, 0.359258), (0.480517, 0.292251), (0.449248, 0.361437), (0.443779, 0.313714), (0.466141, 0.292331), (0.449248, 0.361437), (0.466141, 0.292331), (0.46827, 0.359635), (0.49899, 0.360538), (0.522931, 0.361055), (0.522062, 0.417686), (0.49899, 0.360538), (0.522062, 0.417686), (0.498022, 0.417686), (0.503134, 0.522089), (0.49899, 0.474834), (0.522931, 0.474318), (0.503134, 0.522089), (0.522931, 0.474318), (0.525852, 0.520347), (0.479862, 0.476114), (0.46827, 0.475738), (0.468119, 0.417686), (0.479862, 0.476114), (0.468119, 0.417686), (0.480548, 0.417686), (0.480517, 0.543121), (0.466141, 0.543041), (0.46827, 0.475738), (0.480517, 0.543121), (0.46827, 0.475738), (0.479862, 0.476114), (0.449248, 0.473935), (0.449445, 0.417686), (0.468119, 0.417686), (0.449248, 0.473935), (0.468119, 0.417686), (0.46827, 0.475738), (0.49899, 0.474834), (0.479862, 0.476114), (0.480548, 0.417686), (0.49899, 0.474834), (0.480548, 0.417686), (0.498022, 0.417686), (0.503134, 0.522089), (0.480517, 0.543121), (0.479862, 0.476114), (0.503134, 0.522089), (0.479862, 0.476114), (0.49899, 0.474834), (0.449248, 0.473935), (0.46827, 0.475738), (0.466141, 0.543041), (0.449248, 0.473935), (0.466141, 0.543041), (0.443779, 0.521658), (0.49899, 0.474834), (0.498022, 0.417686), (0.522062, 0.417686), (0.49899, 0.474834), (0.522062, 0.417686), (0.522931, 0.474318), (0.503134, 0.580278), (0.525852, 0.58202), (0.522931, 0.628049), (0.503134, 0.580278), (0.522931, 0.628049), (0.49899, 0.627533), (0.479862, 0.626253), (0.480548, 0.684681), (0.468119, 0.684681), (0.479862, 0.626253), (0.468119, 0.684681), (0.46827, 0.626629), (0.480517, 0.559246), (0.479862, 0.626253), (0.46827, 0.626629), (0.480517, 0.559246), (0.46827, 0.626629), (0.466141, 0.559326), (0.449248, 0.628432), (0.46827, 0.626629), (0.468119, 0.684681), (0.449248, 0.628432), (0.468119, 0.684681), (0.449445, 0.684681), (0.49899, 0.627533), (0.498022, 0.684681), (0.480548, 0.684681), (0.49899, 0.627533), (0.480548, 0.684681), (0.479862, 0.626253), (0.503134, 0.580278), (0.49899, 0.627533), (0.479862, 0.626253), (0.503134, 0.580278), (0.479862, 0.626253), (0.480517, 0.559246), (0.449248, 0.628432), (0.443779, 0.580709), (0.466141, 0.559326), (0.449248, 0.628432), (0.466141, 0.559326), (0.46827, 0.626629), (0.49899, 0.627533), (0.522931, 0.628049), (0.522062, 0.684681), (0.49899, 0.627533), (0.522062, 0.684681), (0.498022, 0.684681), (0.503134, 0.789083), (0.49899, 0.741829), (0.522931, 0.741313), (0.503134, 0.789083), (0.522931, 0.741313), (0.525852, 0.787342), (0.479862, 0.743109), (0.46827, 0.742732), (0.468119, 0.684681), (0.479862, 0.743109), (0.468119, 0.684681), (0.480548, 0.684681), (0.480517, 0.810116), (0.466141, 0.810036), (0.46827, 0.742732), (0.480517, 0.810116), (0.46827, 0.742732), (0.479862, 0.743109), (0.449248, 0.74093), (0.449445, 0.684681), (0.468119, 0.684681), (0.449248, 0.74093), (0.468119, 0.684681), (0.46827, 0.742732), (0.49899, 0.741829), (0.479862, 0.743109), (0.480548, 0.684681), (0.49899, 0.741829), (0.480548, 0.684681), (0.498022, 0.684681), (0.503134, 0.789083), (0.480517, 0.810116), (0.479862, 0.743109), (0.503134, 0.789083), (0.479862, 0.743109), (0.49899, 0.741829), (0.449248, 0.74093), (0.46827, 0.742732), (0.466141, 0.810036), (0.449248, 0.74093), (0.466141, 0.810036), (0.443779, 0.788653), (0.49899, 0.741829), (0.498022, 0.684681), (0.522062, 0.684681), (0.49899, 0.741829), (0.522062, 0.684681), (0.522931, 0.741313), (0.503134, 0.038906), (0.525852, 0.040648), (0.522931, 0.086677), (0.503134, 0.038906), (0.522931, 0.086677), (0.49899, 0.08616), (0.479862, 0.084881), (0.480548, 0.143309), (0.468119, 0.143309), (0.479862, 0.084881), (0.468119, 0.143309), (0.46827, 0.085257), (0.480517, 0.017874), (0.479862, 0.084881), (0.46827, 0.085257), (0.480517, 0.017874), (0.46827, 0.085257), (0.466141, 0.017953), (0.449248, 0.087059), (0.46827, 0.085257), (0.468119, 0.143309), (0.449248, 0.087059), (0.468119, 0.143309), (0.449445, 0.143309), (0.49899, 0.08616), (0.498022, 0.143309), (0.480548, 0.143309), (0.49899, 0.08616), (0.480548, 0.143309), (0.479862, 0.084881), (0.503134, 0.038906), (0.49899, 0.08616), (0.479862, 0.084881), (0.503134, 0.038906), (0.479862, 0.084881), (0.480517, 0.017874), (0.449248, 0.087059), (0.443779, 0.039337), (0.466141, 0.017953), (0.449248, 0.087059), (0.466141, 0.017953), (0.46827, 0.085257), (0.49899, 0.08616), (0.522931, 0.086677), (0.522062, 0.143309), (0.49899, 0.08616), (0.522062, 0.143309), (0.498022, 0.143309), (0.503134, 0.247711), (0.49899, 0.200457), (0.522931, 0.19994), (0.503134, 0.247711), (0.522931, 0.19994), (0.525852, 0.24597), (0.479862, 0.201736), (0.46827, 0.20136), (0.468119, 0.143309), (0.479862, 0.201736), (0.468119, 0.143309), (0.480548, 0.143309), (0.480517, 0.268744), (0.466141, 0.268664), (0.46827, 0.20136), (0.480517, 0.268744), (0.46827, 0.20136), (0.479862, 0.201736), (0.449248, 0.199558), (0.449445, 0.143309), (0.468119, 0.143309), (0.449248, 0.199558), (0.468119, 0.143309), (0.46827, 0.20136), (0.49899, 0.200457), (0.479862, 0.201736), (0.480548, 0.143309), (0.49899, 0.200457), (0.480548, 0.143309), (0.498022, 0.143309), (0.503134, 0.247711), (0.480517, 0.268744), (0.479862, 0.201736), (0.503134, 0.247711), (0.479862, 0.201736), (0.49899, 0.200457), (0.449248, 0.199558), (0.46827, 0.20136), (0.466141, 0.268664), (0.449248, 0.199558), (0.466141, 0.268664), (0.443779, 0.247281), (0.49899, 0.200457), (0.498022, 0.143309), (0.522062, 0.143309), (0.49899, 0.200457), (0.522062, 0.143309), (0.522931, 0.19994)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }
        }
    }

    def Xform "Drawer_2"
    {
        float3 xformOp:rotateXYZ = (0, -0, 90)
        double3 xformOp:translate = (0, 1.15, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "body"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "visual"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry"
                {
                    def Mesh "Drawer_LP"
                    {
                        float3[] extent = [(-0.205, -0.262323, 0.00878), (0.205, 0.24, 0.63)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317]
                        rel material:binding = </Looks/Material_11>
                        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.735945, 0.67704135, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, 0.5562874), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0, -0.2716953, -0.96238333), (0.11800486, -0.22860941, 0.96633977), (0, -0.2716953, 0.96238333), (0, -0.8193306, 0.5733214), (0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.11800486, -0.22860941, 0.96633977), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.39689103, -0.73008347, 0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.19449925, -0.1807993, -0.9640963), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.66527396, -0.6221757, -0.41268384), (0.39689103, -0.73008347, -0.5562874), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (-0.39689103, -0.73008347, 0.5562874), (-0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0, -0.8193306, 0.5733214), (-0.66527396, -0.6221757, 0.41268384), (-0.66527396, -0.6221757, -0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.2716953, -0.96238333), (-0, -0.8193306, -0.5733214), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, -0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0, -0.2716953, 0.96238333), (-0.19449925, -0.1807993, 0.9640963), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, 0.5562874), (-0.19449925, -0.1807993, 0.9640963), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.11800486, -0.22860941, -0.96633977), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, -0.41268384), (-0.11800486, -0.22860941, -0.96633977), (-0.66527396, -0.6221757, -0.41268384), (-0.19449925, -0.1807993, -0.9640963), (0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, 0.5562874), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0, -0.2716953, -0.96238333), (0.11800486, -0.22860941, 0.96633977), (0, -0.2716953, 0.96238333), (0, -0.8193306, 0.5733214), (0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.11800486, -0.22860941, 0.96633977), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.39689103, -0.73008347, 0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.19449925, -0.1807993, -0.9640963), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.66527396, -0.6221757, -0.41268384), (0.39689103, -0.73008347, -0.5562874), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (-0.39689103, -0.73008347, 0.5562874), (-0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0, -0.8193306, 0.5733214), (-0.66527396, -0.6221757, 0.41268384), (-0.66527396, -0.6221757, -0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.2716953, -0.96238333), (-0, -0.8193306, -0.5733214), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, -0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0, -0.2716953, 0.96238333), (-0.19449925, -0.1807993, 0.9640963), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, 0.5562874), (-0.19449925, -0.1807993, 0.9640963), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.11800486, -0.22860941, -0.96633977), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, -0.41268384), (-0.11800486, -0.22860941, -0.96633977), (-0.66527396, -0.6221757, -0.41268384), (-0.19449925, -0.1807993, -0.9640963), (0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, 0.5562874), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0, -0.2716953, -0.96238333), (0.11800486, -0.22860941, 0.96633977), (0, -0.2716953, 0.96238333), (0, -0.8193306, 0.5733214), (0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.11800486, -0.22860941, 0.96633977), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.39689103, -0.73008347, 0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.19449925, -0.1807993, -0.9640963), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.66527396, -0.6221757, -0.41268384), (0.39689103, -0.73008347, -0.5562874), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (-0.39689103, -0.73008347, 0.5562874), (-0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0, -0.8193306, 0.5733214), (-0.66527396, -0.6221757, 0.41268384), (-0.66527396, -0.6221757, -0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.2716953, -0.96238333), (-0, -0.8193306, -0.5733214), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, -0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0, -0.2716953, 0.96238333), (-0.19449925, -0.1807993, 0.9640963), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, 0.5562874), (-0.19449925, -0.1807993, 0.9640963), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.11800486, -0.22860941, -0.96633977), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, -0.41268384), (-0.11800486, -0.22860941, -0.96633977), (-0.66527396, -0.6221757, -0.41268384), (-0.19449925, -0.1807993, -0.9640963), (0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (0, 1, 0), (0.4740879, 0.88047755, 0)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.205, -0.241531, 0.00878), (-0.205, -0.241531, 0.63), (-0.205, 0.24, 0.63), (-0.205, -0.241531, 0.00878), (-0.205, 0.24, 0.63), (-0.205, 0.24, 0.00878), (-0.205, 0.24, 0.00878), (-0.205, 0.24, 0.63), (0.205, 0.24, 0.63), (-0.205, 0.24, 0.00878), (0.205, 0.24, 0.63), (0.205, 0.24, 0.00878), (0.205, 0.24, 0.00878), (0.205, 0.24, 0.63), (0.205, -0.241531, 0.63), (0.205, 0.24, 0.00878), (0.205, -0.241531, 0.63), (0.205, -0.241531, 0.00878), (0.205, -0.241531, 0.00878), (0.205, -0.241531, 0.63), (-0.205, -0.241531, 0.63), (0.205, -0.241531, 0.00878), (-0.205, -0.241531, 0.63), (-0.205, -0.241531, 0.00878), (0.205, 0.24, 0.63), (-0.205, 0.24, 0.63), (-0.205, -0.241531, 0.63), (0.205, 0.24, 0.63), (-0.205, -0.241531, 0.63), (0.205, -0.241531, 0.63), (0.032635, -0.238876, 0.565723), (0.032635, -0.238876, 0.556776), (0.021002, -0.251522, 0.556776), (0.032635, -0.238876, 0.565723), (0.021002, -0.251522, 0.556776), (0.021002, -0.251522, 0.565723), (0.025067, -0.257928, 0.563677), (0, -0.262323, 0.563677), (0, -0.262323, 0.558822), (0.025067, -0.257928, 0.563677), (0, -0.262323, 0.558822), (0.025067, -0.257928, 0.558822), (0.042834, -0.238948, 0.563677), (0.025067, -0.257928, 0.563677), (0.025067, -0.257928, 0.558822), (0.042834, -0.238948, 0.563677), (0.025067, -0.257928, 0.558822), (0.042834, -0.238948, 0.558822), (0.021002, -0.251522, 0.556776), (0.025067, -0.257928, 0.558822), (0, -0.262323, 0.558822), (0.021002, -0.251522, 0.556776), (0, -0.262323, 0.558822), (0, -0.254927, 0.556776), (0.021002, -0.251522, 0.565723), (0, -0.254927, 0.565723), (0, -0.262323, 0.563677), (0.021002, -0.251522, 0.565723), (0, -0.262323, 0.563677), (0.025067, -0.257928, 0.563677), (0.032635, -0.238876, 0.565723), (0.021002, -0.251522, 0.565723), (0.025067, -0.257928, 0.563677), (0.032635, -0.238876, 0.565723), (0.025067, -0.257928, 0.563677), (0.042834, -0.238948, 0.563677), (0.021002, -0.251522, 0.556776), (0.032635, -0.238876, 0.556776), (0.042834, -0.238948, 0.558822), (0.021002, -0.251522, 0.556776), (0.042834, -0.238948, 0.558822), (0.025067, -0.257928, 0.558822), (0.021002, -0.251522, 0.565723), (0.021002, -0.251522, 0.556776), (0, -0.254927, 0.556776), (0.021002, -0.251522, 0.565723), (0, -0.254927, 0.556776), (0, -0.254927, 0.565723), (-0.032635, -0.238876, 0.565723), (-0.021002, -0.251522, 0.565723), (-0.021002, -0.251522, 0.556776), (-0.032635, -0.238876, 0.565723), (-0.021002, -0.251522, 0.556776), (-0.032635, -0.238876, 0.556776), (-0.025067, -0.257928, 0.563677), (-0.025067, -0.257928, 0.558822), (0, -0.262323, 0.558822), (-0.025067, -0.257928, 0.563677), (0, -0.262323, 0.558822), (0, -0.262323, 0.563677), (-0.042834, -0.238948, 0.563677), (-0.042834, -0.238948, 0.558822), (-0.025067, -0.257928, 0.558822), (-0.042834, -0.238948, 0.563677), (-0.025067, -0.257928, 0.558822), (-0.025067, -0.257928, 0.563677), (-0.021002, -0.251522, 0.556776), (0, -0.254927, 0.556776), (0, -0.262323, 0.558822), (-0.021002, -0.251522, 0.556776), (0, -0.262323, 0.558822), (-0.025067, -0.257928, 0.558822), (-0.021002, -0.251522, 0.565723), (-0.025067, -0.257928, 0.563677), (0, -0.262323, 0.563677), (-0.021002, -0.251522, 0.565723), (0, -0.262323, 0.563677), (0, -0.254927, 0.565723), (-0.032635, -0.238876, 0.565723), (-0.042834, -0.238948, 0.563677), (-0.025067, -0.257928, 0.563677), (-0.032635, -0.238876, 0.565723), (-0.025067, -0.257928, 0.563677), (-0.021002, -0.251522, 0.565723), (-0.021002, -0.251522, 0.556776), (-0.025067, -0.257928, 0.558822), (-0.042834, -0.238948, 0.558822), (-0.021002, -0.251522, 0.556776), (-0.042834, -0.238948, 0.558822), (-0.032635, -0.238876, 0.556776), (-0.021002, -0.251522, 0.565723), (0, -0.254927, 0.565723), (0, -0.254927, 0.556776), (-0.021002, -0.251522, 0.565723), (0, -0.254927, 0.556776), (-0.021002, -0.251522, 0.556776), (0.032635, -0.238876, 0.425931), (0.032635, -0.238876, 0.416984), (0.021002, -0.251522, 0.416984), (0.032635, -0.238876, 0.425931), (0.021002, -0.251522, 0.416984), (0.021002, -0.251522, 0.425931), (0.025067, -0.257928, 0.423885), (0, -0.262323, 0.423885), (0, -0.262323, 0.41903), (0.025067, -0.257928, 0.423885), (0, -0.262323, 0.41903), (0.025067, -0.257928, 0.41903), (0.042834, -0.238948, 0.423885), (0.025067, -0.257928, 0.423885), (0.025067, -0.257928, 0.41903), (0.042834, -0.238948, 0.423885), (0.025067, -0.257928, 0.41903), (0.042834, -0.238948, 0.41903), (0.021002, -0.251522, 0.416984), (0.025067, -0.257928, 0.41903), (0, -0.262323, 0.41903), (0.021002, -0.251522, 0.416984), (0, -0.262323, 0.41903), (0, -0.254927, 0.416984), (0.021002, -0.251522, 0.425931), (0, -0.254927, 0.425931), (0, -0.262323, 0.423885), (0.021002, -0.251522, 0.425931), (0, -0.262323, 0.423885), (0.025067, -0.257928, 0.423885), (0.032635, -0.238876, 0.425931), (0.021002, -0.251522, 0.425931), (0.025067, -0.257928, 0.423885), (0.032635, -0.238876, 0.425931), (0.025067, -0.257928, 0.423885), (0.042834, -0.238948, 0.423885), (0.021002, -0.251522, 0.416984), (0.032635, -0.238876, 0.416984), (0.042834, -0.238948, 0.41903), (0.021002, -0.251522, 0.416984), (0.042834, -0.238948, 0.41903), (0.025067, -0.257928, 0.41903), (0.021002, -0.251522, 0.425931), (0.021002, -0.251522, 0.416984), (0, -0.254927, 0.416984), (0.021002, -0.251522, 0.425931), (0, -0.254927, 0.416984), (0, -0.254927, 0.425931), (-0.032635, -0.238876, 0.425931), (-0.021002, -0.251522, 0.425931), (-0.021002, -0.251522, 0.416984), (-0.032635, -0.238876, 0.425931), (-0.021002, -0.251522, 0.416984), (-0.032635, -0.238876, 0.416984), (-0.025067, -0.257928, 0.423885), (-0.025067, -0.257928, 0.41903), (0, -0.262323, 0.41903), (-0.025067, -0.257928, 0.423885), (0, -0.262323, 0.41903), (0, -0.262323, 0.423885), (-0.042834, -0.238948, 0.423885), (-0.042834, -0.238948, 0.41903), (-0.025067, -0.257928, 0.41903), (-0.042834, -0.238948, 0.423885), (-0.025067, -0.257928, 0.41903), (-0.025067, -0.257928, 0.423885), (-0.021002, -0.251522, 0.416984), (0, -0.254927, 0.416984), (0, -0.262323, 0.41903), (-0.021002, -0.251522, 0.416984), (0, -0.262323, 0.41903), (-0.025067, -0.257928, 0.41903), (-0.021002, -0.251522, 0.425931), (-0.025067, -0.257928, 0.423885), (0, -0.262323, 0.423885), (-0.021002, -0.251522, 0.425931), (0, -0.262323, 0.423885), (0, -0.254927, 0.425931), (-0.032635, -0.238876, 0.425931), (-0.042834, -0.238948, 0.423885), (-0.025067, -0.257928, 0.423885), (-0.032635, -0.238876, 0.425931), (-0.025067, -0.257928, 0.423885), (-0.021002, -0.251522, 0.425931), (-0.021002, -0.251522, 0.416984), (-0.025067, -0.257928, 0.41903), (-0.042834, -0.238948, 0.41903), (-0.021002, -0.251522, 0.416984), (-0.042834, -0.238948, 0.41903), (-0.032635, -0.238876, 0.416984), (-0.021002, -0.251522, 0.425931), (0, -0.254927, 0.425931), (0, -0.254927, 0.416984), (-0.021002, -0.251522, 0.425931), (0, -0.254927, 0.416984), (-0.021002, -0.251522, 0.416984), (0.032635, -0.238876, 0.249308), (0.032635, -0.238876, 0.240361), (0.021002, -0.251522, 0.240361), (0.032635, -0.238876, 0.249308), (0.021002, -0.251522, 0.240361), (0.021002, -0.251522, 0.249308), (0.025067, -0.257928, 0.247262), (0, -0.262323, 0.247262), (0, -0.262323, 0.242407), (0.025067, -0.257928, 0.247262), (0, -0.262323, 0.242407), (0.025067, -0.257928, 0.242407), (0.042834, -0.238948, 0.247262), (0.025067, -0.257928, 0.247262), (0.025067, -0.257928, 0.242407), (0.042834, -0.238948, 0.247262), (0.025067, -0.257928, 0.242407), (0.042834, -0.238948, 0.242407), (0.021002, -0.251522, 0.240361), (0.025067, -0.257928, 0.242407), (0, -0.262323, 0.242407), (0.021002, -0.251522, 0.240361), (0, -0.262323, 0.242407), (0, -0.254927, 0.240361), (0.021002, -0.251522, 0.249308), (0, -0.254927, 0.249308), (0, -0.262323, 0.247262), (0.021002, -0.251522, 0.249308), (0, -0.262323, 0.247262), (0.025067, -0.257928, 0.247262), (0.032635, -0.238876, 0.249308), (0.021002, -0.251522, 0.249308), (0.025067, -0.257928, 0.247262), (0.032635, -0.238876, 0.249308), (0.025067, -0.257928, 0.247262), (0.042834, -0.238948, 0.247262), (0.021002, -0.251522, 0.240361), (0.032635, -0.238876, 0.240361), (0.042834, -0.238948, 0.242407), (0.021002, -0.251522, 0.240361), (0.042834, -0.238948, 0.242407), (0.025067, -0.257928, 0.242407), (0.021002, -0.251522, 0.249308), (0.021002, -0.251522, 0.240361), (0, -0.254927, 0.240361), (0.021002, -0.251522, 0.249308), (0, -0.254927, 0.240361), (0, -0.254927, 0.249308), (-0.032635, -0.238876, 0.249308), (-0.021002, -0.251522, 0.249308), (-0.021002, -0.251522, 0.240361), (-0.032635, -0.238876, 0.249308), (-0.021002, -0.251522, 0.240361), (-0.032635, -0.238876, 0.240361), (-0.025067, -0.257928, 0.247262), (-0.025067, -0.257928, 0.242407), (0, -0.262323, 0.242407), (-0.025067, -0.257928, 0.247262), (0, -0.262323, 0.242407), (0, -0.262323, 0.247262), (-0.042834, -0.238948, 0.247262), (-0.042834, -0.238948, 0.242407), (-0.025067, -0.257928, 0.242407), (-0.042834, -0.238948, 0.247262), (-0.025067, -0.257928, 0.242407), (-0.025067, -0.257928, 0.247262), (-0.021002, -0.251522, 0.240361), (0, -0.254927, 0.240361), (0, -0.262323, 0.242407), (-0.021002, -0.251522, 0.240361), (0, -0.262323, 0.242407), (-0.025067, -0.257928, 0.242407), (-0.021002, -0.251522, 0.249308), (-0.025067, -0.257928, 0.247262), (0, -0.262323, 0.247262), (-0.021002, -0.251522, 0.249308), (0, -0.262323, 0.247262), (0, -0.254927, 0.249308), (-0.032635, -0.238876, 0.249308), (-0.042834, -0.238948, 0.247262), (-0.025067, -0.257928, 0.247262), (-0.032635, -0.238876, 0.249308), (-0.025067, -0.257928, 0.247262), (-0.021002, -0.251522, 0.249308), (-0.021002, -0.251522, 0.240361), (-0.025067, -0.257928, 0.242407), (-0.042834, -0.238948, 0.242407), (-0.021002, -0.251522, 0.240361), (-0.042834, -0.238948, 0.242407), (-0.032635, -0.238876, 0.240361), (-0.021002, -0.251522, 0.249308), (0, -0.254927, 0.249308), (0, -0.254927, 0.240361), (-0.021002, -0.251522, 0.249308), (0, -0.254927, 0.240361), (-0.021002, -0.251522, 0.240361)]
                        float2[] primvars:st = [(0.987506, 0.986044), (0.539398, 0.986044), (0.539398, 0.644628), (0.987506, 0.986044), (0.539398, 0.644628), (0.987506, 0.644628), (0.987506, 0.644628), (0.539398, 0.644628), (0.539398, 0.353002), (0.987506, 0.644628), (0.539398, 0.353002), (0.987506, 0.353002), (0.987506, 0.353002), (0.539398, 0.353002), (0.539398, 0.011586), (0.987506, 0.353002), (0.539398, 0.011586), (0.987506, 0.011586), (0.430748, 0.344308), (0.430748, 0.989825), (0.01065, 0.989825), (0.430748, 0.344308), (0.01065, 0.989825), (0.01065, 0.344309), (0.010538, 0.331102), (0.010538, 0.011535), (0.384666, 0.011535), (0.010538, 0.331102), (0.384666, 0.011535), (0.384665, 0.331102), (0.503134, 0.313284), (0.525852, 0.315025), (0.522931, 0.361055), (0.503134, 0.313284), (0.522931, 0.361055), (0.49899, 0.360538), (0.479862, 0.359258), (0.480548, 0.417686), (0.468119, 0.417686), (0.479862, 0.359258), (0.468119, 0.417686), (0.46827, 0.359635), (0.480517, 0.292251), (0.479862, 0.359258), (0.46827, 0.359635), (0.480517, 0.292251), (0.46827, 0.359635), (0.466141, 0.292331), (0.449248, 0.361437), (0.46827, 0.359635), (0.468119, 0.417686), (0.449248, 0.361437), (0.468119, 0.417686), (0.449445, 0.417686), (0.49899, 0.360538), (0.498022, 0.417686), (0.480548, 0.417686), (0.49899, 0.360538), (0.480548, 0.417686), (0.479862, 0.359258), (0.503134, 0.313284), (0.49899, 0.360538), (0.479862, 0.359258), (0.503134, 0.313284), (0.479862, 0.359258), (0.480517, 0.292251), (0.449248, 0.361437), (0.443779, 0.313714), (0.466141, 0.292331), (0.449248, 0.361437), (0.466141, 0.292331), (0.46827, 0.359635), (0.49899, 0.360538), (0.522931, 0.361055), (0.522062, 0.417686), (0.49899, 0.360538), (0.522062, 0.417686), (0.498022, 0.417686), (0.503134, 0.522089), (0.49899, 0.474834), (0.522931, 0.474318), (0.503134, 0.522089), (0.522931, 0.474318), (0.525852, 0.520347), (0.479862, 0.476114), (0.46827, 0.475738), (0.468119, 0.417686), (0.479862, 0.476114), (0.468119, 0.417686), (0.480548, 0.417686), (0.480517, 0.543121), (0.466141, 0.543041), (0.46827, 0.475738), (0.480517, 0.543121), (0.46827, 0.475738), (0.479862, 0.476114), (0.449248, 0.473935), (0.449445, 0.417686), (0.468119, 0.417686), (0.449248, 0.473935), (0.468119, 0.417686), (0.46827, 0.475738), (0.49899, 0.474834), (0.479862, 0.476114), (0.480548, 0.417686), (0.49899, 0.474834), (0.480548, 0.417686), (0.498022, 0.417686), (0.503134, 0.522089), (0.480517, 0.543121), (0.479862, 0.476114), (0.503134, 0.522089), (0.479862, 0.476114), (0.49899, 0.474834), (0.449248, 0.473935), (0.46827, 0.475738), (0.466141, 0.543041), (0.449248, 0.473935), (0.466141, 0.543041), (0.443779, 0.521658), (0.49899, 0.474834), (0.498022, 0.417686), (0.522062, 0.417686), (0.49899, 0.474834), (0.522062, 0.417686), (0.522931, 0.474318), (0.503134, 0.580278), (0.525852, 0.58202), (0.522931, 0.628049), (0.503134, 0.580278), (0.522931, 0.628049), (0.49899, 0.627533), (0.479862, 0.626253), (0.480548, 0.684681), (0.468119, 0.684681), (0.479862, 0.626253), (0.468119, 0.684681), (0.46827, 0.626629), (0.480517, 0.559246), (0.479862, 0.626253), (0.46827, 0.626629), (0.480517, 0.559246), (0.46827, 0.626629), (0.466141, 0.559326), (0.449248, 0.628432), (0.46827, 0.626629), (0.468119, 0.684681), (0.449248, 0.628432), (0.468119, 0.684681), (0.449445, 0.684681), (0.49899, 0.627533), (0.498022, 0.684681), (0.480548, 0.684681), (0.49899, 0.627533), (0.480548, 0.684681), (0.479862, 0.626253), (0.503134, 0.580278), (0.49899, 0.627533), (0.479862, 0.626253), (0.503134, 0.580278), (0.479862, 0.626253), (0.480517, 0.559246), (0.449248, 0.628432), (0.443779, 0.580709), (0.466141, 0.559326), (0.449248, 0.628432), (0.466141, 0.559326), (0.46827, 0.626629), (0.49899, 0.627533), (0.522931, 0.628049), (0.522062, 0.684681), (0.49899, 0.627533), (0.522062, 0.684681), (0.498022, 0.684681), (0.503134, 0.789083), (0.49899, 0.741829), (0.522931, 0.741313), (0.503134, 0.789083), (0.522931, 0.741313), (0.525852, 0.787342), (0.479862, 0.743109), (0.46827, 0.742732), (0.468119, 0.684681), (0.479862, 0.743109), (0.468119, 0.684681), (0.480548, 0.684681), (0.480517, 0.810116), (0.466141, 0.810036), (0.46827, 0.742732), (0.480517, 0.810116), (0.46827, 0.742732), (0.479862, 0.743109), (0.449248, 0.74093), (0.449445, 0.684681), (0.468119, 0.684681), (0.449248, 0.74093), (0.468119, 0.684681), (0.46827, 0.742732), (0.49899, 0.741829), (0.479862, 0.743109), (0.480548, 0.684681), (0.49899, 0.741829), (0.480548, 0.684681), (0.498022, 0.684681), (0.503134, 0.789083), (0.480517, 0.810116), (0.479862, 0.743109), (0.503134, 0.789083), (0.479862, 0.743109), (0.49899, 0.741829), (0.449248, 0.74093), (0.46827, 0.742732), (0.466141, 0.810036), (0.449248, 0.74093), (0.466141, 0.810036), (0.443779, 0.788653), (0.49899, 0.741829), (0.498022, 0.684681), (0.522062, 0.684681), (0.49899, 0.741829), (0.522062, 0.684681), (0.522931, 0.741313), (0.503134, 0.038906), (0.525852, 0.040648), (0.522931, 0.086677), (0.503134, 0.038906), (0.522931, 0.086677), (0.49899, 0.08616), (0.479862, 0.084881), (0.480548, 0.143309), (0.468119, 0.143309), (0.479862, 0.084881), (0.468119, 0.143309), (0.46827, 0.085257), (0.480517, 0.017874), (0.479862, 0.084881), (0.46827, 0.085257), (0.480517, 0.017874), (0.46827, 0.085257), (0.466141, 0.017953), (0.449248, 0.087059), (0.46827, 0.085257), (0.468119, 0.143309), (0.449248, 0.087059), (0.468119, 0.143309), (0.449445, 0.143309), (0.49899, 0.08616), (0.498022, 0.143309), (0.480548, 0.143309), (0.49899, 0.08616), (0.480548, 0.143309), (0.479862, 0.084881), (0.503134, 0.038906), (0.49899, 0.08616), (0.479862, 0.084881), (0.503134, 0.038906), (0.479862, 0.084881), (0.480517, 0.017874), (0.449248, 0.087059), (0.443779, 0.039337), (0.466141, 0.017953), (0.449248, 0.087059), (0.466141, 0.017953), (0.46827, 0.085257), (0.49899, 0.08616), (0.522931, 0.086677), (0.522062, 0.143309), (0.49899, 0.08616), (0.522062, 0.143309), (0.498022, 0.143309), (0.503134, 0.247711), (0.49899, 0.200457), (0.522931, 0.19994), (0.503134, 0.247711), (0.522931, 0.19994), (0.525852, 0.24597), (0.479862, 0.201736), (0.46827, 0.20136), (0.468119, 0.143309), (0.479862, 0.201736), (0.468119, 0.143309), (0.480548, 0.143309), (0.480517, 0.268744), (0.466141, 0.268664), (0.46827, 0.20136), (0.480517, 0.268744), (0.46827, 0.20136), (0.479862, 0.201736), (0.449248, 0.199558), (0.449445, 0.143309), (0.468119, 0.143309), (0.449248, 0.199558), (0.468119, 0.143309), (0.46827, 0.20136), (0.49899, 0.200457), (0.479862, 0.201736), (0.480548, 0.143309), (0.49899, 0.200457), (0.480548, 0.143309), (0.498022, 0.143309), (0.503134, 0.247711), (0.480517, 0.268744), (0.479862, 0.201736), (0.503134, 0.247711), (0.479862, 0.201736), (0.49899, 0.200457), (0.449248, 0.199558), (0.46827, 0.20136), (0.466141, 0.268664), (0.449248, 0.199558), (0.466141, 0.268664), (0.443779, 0.247281), (0.49899, 0.200457), (0.498022, 0.143309), (0.522062, 0.143309), (0.49899, 0.200457), (0.522062, 0.143309), (0.522931, 0.19994)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }

            def Xform "collision"
            {
                uniform token purpose = "guide"
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    rel material:binding = </Looks/MaterialPhysics_4>

                    def Mesh "Drawer_LP"
                    {
                        float3[] extent = [(-0.205, -0.262323, 0.00878), (0.205, 0.24, 0.63)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317]
                        rel material:binding = </Looks/Material_12>
                        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.735945, 0.67704135, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, 0.5562874), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0, -0.2716953, -0.96238333), (0.11800486, -0.22860941, 0.96633977), (0, -0.2716953, 0.96238333), (0, -0.8193306, 0.5733214), (0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.11800486, -0.22860941, 0.96633977), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.39689103, -0.73008347, 0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.19449925, -0.1807993, -0.9640963), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.66527396, -0.6221757, -0.41268384), (0.39689103, -0.73008347, -0.5562874), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (-0.39689103, -0.73008347, 0.5562874), (-0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0, -0.8193306, 0.5733214), (-0.66527396, -0.6221757, 0.41268384), (-0.66527396, -0.6221757, -0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.2716953, -0.96238333), (-0, -0.8193306, -0.5733214), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, -0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0, -0.2716953, 0.96238333), (-0.19449925, -0.1807993, 0.9640963), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, 0.5562874), (-0.19449925, -0.1807993, 0.9640963), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.11800486, -0.22860941, -0.96633977), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, -0.41268384), (-0.11800486, -0.22860941, -0.96633977), (-0.66527396, -0.6221757, -0.41268384), (-0.19449925, -0.1807993, -0.9640963), (0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, 0.5562874), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0, -0.2716953, -0.96238333), (0.11800486, -0.22860941, 0.96633977), (0, -0.2716953, 0.96238333), (0, -0.8193306, 0.5733214), (0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.11800486, -0.22860941, 0.96633977), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.39689103, -0.73008347, 0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.19449925, -0.1807993, -0.9640963), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.66527396, -0.6221757, -0.41268384), (0.39689103, -0.73008347, -0.5562874), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (-0.39689103, -0.73008347, 0.5562874), (-0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0, -0.8193306, 0.5733214), (-0.66527396, -0.6221757, 0.41268384), (-0.66527396, -0.6221757, -0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.2716953, -0.96238333), (-0, -0.8193306, -0.5733214), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, -0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0, -0.2716953, 0.96238333), (-0.19449925, -0.1807993, 0.9640963), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, 0.5562874), (-0.19449925, -0.1807993, 0.9640963), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.11800486, -0.22860941, -0.96633977), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, -0.41268384), (-0.11800486, -0.22860941, -0.96633977), (-0.66527396, -0.6221757, -0.41268384), (-0.19449925, -0.1807993, -0.9640963), (0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.735945, 0.67704135, 0), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, 0.5562874), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.39689103, -0.73008347, -0.5562874), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0, -0.2716953, -0.96238333), (0.11800486, -0.22860941, 0.96633977), (0, -0.2716953, 0.96238333), (0, -0.8193306, 0.5733214), (0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.11800486, -0.22860941, 0.96633977), (0.39689103, -0.73008347, 0.5562874), (0.19449925, -0.1807993, 0.9640963), (0.39689103, -0.73008347, 0.5562874), (0.66527396, -0.6221757, 0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.19449925, -0.1807993, -0.9640963), (0.66527396, -0.6221757, -0.41268384), (0.11800486, -0.22860941, -0.96633977), (0.66527396, -0.6221757, -0.41268384), (0.39689103, -0.73008347, -0.5562874), (-0.4740879, 0.88047755, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (-0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (0.4740879, 0.88047755, 0), (0.735945, 0.67704135, 0), (-0.39689103, -0.73008347, 0.5562874), (-0.39689103, -0.73008347, -0.5562874), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, 0.5562874), (-0, -0.8193306, -0.5733214), (0, -0.8193306, 0.5733214), (-0.66527396, -0.6221757, 0.41268384), (-0.66527396, -0.6221757, -0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, -0.5562874), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.2716953, -0.96238333), (-0, -0.8193306, -0.5733214), (-0.11800486, -0.22860941, -0.96633977), (-0, -0.8193306, -0.5733214), (-0.39689103, -0.73008347, -0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.39689103, -0.73008347, 0.5562874), (0, -0.8193306, 0.5733214), (-0.11800486, -0.22860941, 0.96633977), (0, -0.8193306, 0.5733214), (0, -0.2716953, 0.96238333), (-0.19449925, -0.1807993, 0.9640963), (-0.66527396, -0.6221757, 0.41268384), (-0.39689103, -0.73008347, 0.5562874), (-0.19449925, -0.1807993, 0.9640963), (-0.39689103, -0.73008347, 0.5562874), (-0.11800486, -0.22860941, 0.96633977), (-0.11800486, -0.22860941, -0.96633977), (-0.39689103, -0.73008347, -0.5562874), (-0.66527396, -0.6221757, -0.41268384), (-0.11800486, -0.22860941, -0.96633977), (-0.66527396, -0.6221757, -0.41268384), (-0.19449925, -0.1807993, -0.9640963), (0.4740879, 0.88047755, 0), (0, 1, 0), (0, 1, 0), (0.4740879, 0.88047755, 0), (0, 1, 0), (0.4740879, 0.88047755, 0)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.205, -0.241531, 0.00878), (-0.205, -0.241531, 0.63), (-0.205, 0.24, 0.63), (-0.205, -0.241531, 0.00878), (-0.205, 0.24, 0.63), (-0.205, 0.24, 0.00878), (-0.205, 0.24, 0.00878), (-0.205, 0.24, 0.63), (0.205, 0.24, 0.63), (-0.205, 0.24, 0.00878), (0.205, 0.24, 0.63), (0.205, 0.24, 0.00878), (0.205, 0.24, 0.00878), (0.205, 0.24, 0.63), (0.205, -0.241531, 0.63), (0.205, 0.24, 0.00878), (0.205, -0.241531, 0.63), (0.205, -0.241531, 0.00878), (0.205, -0.241531, 0.00878), (0.205, -0.241531, 0.63), (-0.205, -0.241531, 0.63), (0.205, -0.241531, 0.00878), (-0.205, -0.241531, 0.63), (-0.205, -0.241531, 0.00878), (0.205, 0.24, 0.63), (-0.205, 0.24, 0.63), (-0.205, -0.241531, 0.63), (0.205, 0.24, 0.63), (-0.205, -0.241531, 0.63), (0.205, -0.241531, 0.63), (0.032635, -0.238876, 0.565723), (0.032635, -0.238876, 0.556776), (0.021002, -0.251522, 0.556776), (0.032635, -0.238876, 0.565723), (0.021002, -0.251522, 0.556776), (0.021002, -0.251522, 0.565723), (0.025067, -0.257928, 0.563677), (0, -0.262323, 0.563677), (0, -0.262323, 0.558822), (0.025067, -0.257928, 0.563677), (0, -0.262323, 0.558822), (0.025067, -0.257928, 0.558822), (0.042834, -0.238948, 0.563677), (0.025067, -0.257928, 0.563677), (0.025067, -0.257928, 0.558822), (0.042834, -0.238948, 0.563677), (0.025067, -0.257928, 0.558822), (0.042834, -0.238948, 0.558822), (0.021002, -0.251522, 0.556776), (0.025067, -0.257928, 0.558822), (0, -0.262323, 0.558822), (0.021002, -0.251522, 0.556776), (0, -0.262323, 0.558822), (0, -0.254927, 0.556776), (0.021002, -0.251522, 0.565723), (0, -0.254927, 0.565723), (0, -0.262323, 0.563677), (0.021002, -0.251522, 0.565723), (0, -0.262323, 0.563677), (0.025067, -0.257928, 0.563677), (0.032635, -0.238876, 0.565723), (0.021002, -0.251522, 0.565723), (0.025067, -0.257928, 0.563677), (0.032635, -0.238876, 0.565723), (0.025067, -0.257928, 0.563677), (0.042834, -0.238948, 0.563677), (0.021002, -0.251522, 0.556776), (0.032635, -0.238876, 0.556776), (0.042834, -0.238948, 0.558822), (0.021002, -0.251522, 0.556776), (0.042834, -0.238948, 0.558822), (0.025067, -0.257928, 0.558822), (0.021002, -0.251522, 0.565723), (0.021002, -0.251522, 0.556776), (0, -0.254927, 0.556776), (0.021002, -0.251522, 0.565723), (0, -0.254927, 0.556776), (0, -0.254927, 0.565723), (-0.032635, -0.238876, 0.565723), (-0.021002, -0.251522, 0.565723), (-0.021002, -0.251522, 0.556776), (-0.032635, -0.238876, 0.565723), (-0.021002, -0.251522, 0.556776), (-0.032635, -0.238876, 0.556776), (-0.025067, -0.257928, 0.563677), (-0.025067, -0.257928, 0.558822), (0, -0.262323, 0.558822), (-0.025067, -0.257928, 0.563677), (0, -0.262323, 0.558822), (0, -0.262323, 0.563677), (-0.042834, -0.238948, 0.563677), (-0.042834, -0.238948, 0.558822), (-0.025067, -0.257928, 0.558822), (-0.042834, -0.238948, 0.563677), (-0.025067, -0.257928, 0.558822), (-0.025067, -0.257928, 0.563677), (-0.021002, -0.251522, 0.556776), (0, -0.254927, 0.556776), (0, -0.262323, 0.558822), (-0.021002, -0.251522, 0.556776), (0, -0.262323, 0.558822), (-0.025067, -0.257928, 0.558822), (-0.021002, -0.251522, 0.565723), (-0.025067, -0.257928, 0.563677), (0, -0.262323, 0.563677), (-0.021002, -0.251522, 0.565723), (0, -0.262323, 0.563677), (0, -0.254927, 0.565723), (-0.032635, -0.238876, 0.565723), (-0.042834, -0.238948, 0.563677), (-0.025067, -0.257928, 0.563677), (-0.032635, -0.238876, 0.565723), (-0.025067, -0.257928, 0.563677), (-0.021002, -0.251522, 0.565723), (-0.021002, -0.251522, 0.556776), (-0.025067, -0.257928, 0.558822), (-0.042834, -0.238948, 0.558822), (-0.021002, -0.251522, 0.556776), (-0.042834, -0.238948, 0.558822), (-0.032635, -0.238876, 0.556776), (-0.021002, -0.251522, 0.565723), (0, -0.254927, 0.565723), (0, -0.254927, 0.556776), (-0.021002, -0.251522, 0.565723), (0, -0.254927, 0.556776), (-0.021002, -0.251522, 0.556776), (0.032635, -0.238876, 0.425931), (0.032635, -0.238876, 0.416984), (0.021002, -0.251522, 0.416984), (0.032635, -0.238876, 0.425931), (0.021002, -0.251522, 0.416984), (0.021002, -0.251522, 0.425931), (0.025067, -0.257928, 0.423885), (0, -0.262323, 0.423885), (0, -0.262323, 0.41903), (0.025067, -0.257928, 0.423885), (0, -0.262323, 0.41903), (0.025067, -0.257928, 0.41903), (0.042834, -0.238948, 0.423885), (0.025067, -0.257928, 0.423885), (0.025067, -0.257928, 0.41903), (0.042834, -0.238948, 0.423885), (0.025067, -0.257928, 0.41903), (0.042834, -0.238948, 0.41903), (0.021002, -0.251522, 0.416984), (0.025067, -0.257928, 0.41903), (0, -0.262323, 0.41903), (0.021002, -0.251522, 0.416984), (0, -0.262323, 0.41903), (0, -0.254927, 0.416984), (0.021002, -0.251522, 0.425931), (0, -0.254927, 0.425931), (0, -0.262323, 0.423885), (0.021002, -0.251522, 0.425931), (0, -0.262323, 0.423885), (0.025067, -0.257928, 0.423885), (0.032635, -0.238876, 0.425931), (0.021002, -0.251522, 0.425931), (0.025067, -0.257928, 0.423885), (0.032635, -0.238876, 0.425931), (0.025067, -0.257928, 0.423885), (0.042834, -0.238948, 0.423885), (0.021002, -0.251522, 0.416984), (0.032635, -0.238876, 0.416984), (0.042834, -0.238948, 0.41903), (0.021002, -0.251522, 0.416984), (0.042834, -0.238948, 0.41903), (0.025067, -0.257928, 0.41903), (0.021002, -0.251522, 0.425931), (0.021002, -0.251522, 0.416984), (0, -0.254927, 0.416984), (0.021002, -0.251522, 0.425931), (0, -0.254927, 0.416984), (0, -0.254927, 0.425931), (-0.032635, -0.238876, 0.425931), (-0.021002, -0.251522, 0.425931), (-0.021002, -0.251522, 0.416984), (-0.032635, -0.238876, 0.425931), (-0.021002, -0.251522, 0.416984), (-0.032635, -0.238876, 0.416984), (-0.025067, -0.257928, 0.423885), (-0.025067, -0.257928, 0.41903), (0, -0.262323, 0.41903), (-0.025067, -0.257928, 0.423885), (0, -0.262323, 0.41903), (0, -0.262323, 0.423885), (-0.042834, -0.238948, 0.423885), (-0.042834, -0.238948, 0.41903), (-0.025067, -0.257928, 0.41903), (-0.042834, -0.238948, 0.423885), (-0.025067, -0.257928, 0.41903), (-0.025067, -0.257928, 0.423885), (-0.021002, -0.251522, 0.416984), (0, -0.254927, 0.416984), (0, -0.262323, 0.41903), (-0.021002, -0.251522, 0.416984), (0, -0.262323, 0.41903), (-0.025067, -0.257928, 0.41903), (-0.021002, -0.251522, 0.425931), (-0.025067, -0.257928, 0.423885), (0, -0.262323, 0.423885), (-0.021002, -0.251522, 0.425931), (0, -0.262323, 0.423885), (0, -0.254927, 0.425931), (-0.032635, -0.238876, 0.425931), (-0.042834, -0.238948, 0.423885), (-0.025067, -0.257928, 0.423885), (-0.032635, -0.238876, 0.425931), (-0.025067, -0.257928, 0.423885), (-0.021002, -0.251522, 0.425931), (-0.021002, -0.251522, 0.416984), (-0.025067, -0.257928, 0.41903), (-0.042834, -0.238948, 0.41903), (-0.021002, -0.251522, 0.416984), (-0.042834, -0.238948, 0.41903), (-0.032635, -0.238876, 0.416984), (-0.021002, -0.251522, 0.425931), (0, -0.254927, 0.425931), (0, -0.254927, 0.416984), (-0.021002, -0.251522, 0.425931), (0, -0.254927, 0.416984), (-0.021002, -0.251522, 0.416984), (0.032635, -0.238876, 0.249308), (0.032635, -0.238876, 0.240361), (0.021002, -0.251522, 0.240361), (0.032635, -0.238876, 0.249308), (0.021002, -0.251522, 0.240361), (0.021002, -0.251522, 0.249308), (0.025067, -0.257928, 0.247262), (0, -0.262323, 0.247262), (0, -0.262323, 0.242407), (0.025067, -0.257928, 0.247262), (0, -0.262323, 0.242407), (0.025067, -0.257928, 0.242407), (0.042834, -0.238948, 0.247262), (0.025067, -0.257928, 0.247262), (0.025067, -0.257928, 0.242407), (0.042834, -0.238948, 0.247262), (0.025067, -0.257928, 0.242407), (0.042834, -0.238948, 0.242407), (0.021002, -0.251522, 0.240361), (0.025067, -0.257928, 0.242407), (0, -0.262323, 0.242407), (0.021002, -0.251522, 0.240361), (0, -0.262323, 0.242407), (0, -0.254927, 0.240361), (0.021002, -0.251522, 0.249308), (0, -0.254927, 0.249308), (0, -0.262323, 0.247262), (0.021002, -0.251522, 0.249308), (0, -0.262323, 0.247262), (0.025067, -0.257928, 0.247262), (0.032635, -0.238876, 0.249308), (0.021002, -0.251522, 0.249308), (0.025067, -0.257928, 0.247262), (0.032635, -0.238876, 0.249308), (0.025067, -0.257928, 0.247262), (0.042834, -0.238948, 0.247262), (0.021002, -0.251522, 0.240361), (0.032635, -0.238876, 0.240361), (0.042834, -0.238948, 0.242407), (0.021002, -0.251522, 0.240361), (0.042834, -0.238948, 0.242407), (0.025067, -0.257928, 0.242407), (0.021002, -0.251522, 0.249308), (0.021002, -0.251522, 0.240361), (0, -0.254927, 0.240361), (0.021002, -0.251522, 0.249308), (0, -0.254927, 0.240361), (0, -0.254927, 0.249308), (-0.032635, -0.238876, 0.249308), (-0.021002, -0.251522, 0.249308), (-0.021002, -0.251522, 0.240361), (-0.032635, -0.238876, 0.249308), (-0.021002, -0.251522, 0.240361), (-0.032635, -0.238876, 0.240361), (-0.025067, -0.257928, 0.247262), (-0.025067, -0.257928, 0.242407), (0, -0.262323, 0.242407), (-0.025067, -0.257928, 0.247262), (0, -0.262323, 0.242407), (0, -0.262323, 0.247262), (-0.042834, -0.238948, 0.247262), (-0.042834, -0.238948, 0.242407), (-0.025067, -0.257928, 0.242407), (-0.042834, -0.238948, 0.247262), (-0.025067, -0.257928, 0.242407), (-0.025067, -0.257928, 0.247262), (-0.021002, -0.251522, 0.240361), (0, -0.254927, 0.240361), (0, -0.262323, 0.242407), (-0.021002, -0.251522, 0.240361), (0, -0.262323, 0.242407), (-0.025067, -0.257928, 0.242407), (-0.021002, -0.251522, 0.249308), (-0.025067, -0.257928, 0.247262), (0, -0.262323, 0.247262), (-0.021002, -0.251522, 0.249308), (0, -0.262323, 0.247262), (0, -0.254927, 0.249308), (-0.032635, -0.238876, 0.249308), (-0.042834, -0.238948, 0.247262), (-0.025067, -0.257928, 0.247262), (-0.032635, -0.238876, 0.249308), (-0.025067, -0.257928, 0.247262), (-0.021002, -0.251522, 0.249308), (-0.021002, -0.251522, 0.240361), (-0.025067, -0.257928, 0.242407), (-0.042834, -0.238948, 0.242407), (-0.021002, -0.251522, 0.240361), (-0.042834, -0.238948, 0.242407), (-0.032635, -0.238876, 0.240361), (-0.021002, -0.251522, 0.249308), (0, -0.254927, 0.249308), (0, -0.254927, 0.240361), (-0.021002, -0.251522, 0.249308), (0, -0.254927, 0.240361), (-0.021002, -0.251522, 0.240361)]
                        float2[] primvars:st = [(0.987506, 0.986044), (0.539398, 0.986044), (0.539398, 0.644628), (0.987506, 0.986044), (0.539398, 0.644628), (0.987506, 0.644628), (0.987506, 0.644628), (0.539398, 0.644628), (0.539398, 0.353002), (0.987506, 0.644628), (0.539398, 0.353002), (0.987506, 0.353002), (0.987506, 0.353002), (0.539398, 0.353002), (0.539398, 0.011586), (0.987506, 0.353002), (0.539398, 0.011586), (0.987506, 0.011586), (0.430748, 0.344308), (0.430748, 0.989825), (0.01065, 0.989825), (0.430748, 0.344308), (0.01065, 0.989825), (0.01065, 0.344309), (0.010538, 0.331102), (0.010538, 0.011535), (0.384666, 0.011535), (0.010538, 0.331102), (0.384666, 0.011535), (0.384665, 0.331102), (0.503134, 0.313284), (0.525852, 0.315025), (0.522931, 0.361055), (0.503134, 0.313284), (0.522931, 0.361055), (0.49899, 0.360538), (0.479862, 0.359258), (0.480548, 0.417686), (0.468119, 0.417686), (0.479862, 0.359258), (0.468119, 0.417686), (0.46827, 0.359635), (0.480517, 0.292251), (0.479862, 0.359258), (0.46827, 0.359635), (0.480517, 0.292251), (0.46827, 0.359635), (0.466141, 0.292331), (0.449248, 0.361437), (0.46827, 0.359635), (0.468119, 0.417686), (0.449248, 0.361437), (0.468119, 0.417686), (0.449445, 0.417686), (0.49899, 0.360538), (0.498022, 0.417686), (0.480548, 0.417686), (0.49899, 0.360538), (0.480548, 0.417686), (0.479862, 0.359258), (0.503134, 0.313284), (0.49899, 0.360538), (0.479862, 0.359258), (0.503134, 0.313284), (0.479862, 0.359258), (0.480517, 0.292251), (0.449248, 0.361437), (0.443779, 0.313714), (0.466141, 0.292331), (0.449248, 0.361437), (0.466141, 0.292331), (0.46827, 0.359635), (0.49899, 0.360538), (0.522931, 0.361055), (0.522062, 0.417686), (0.49899, 0.360538), (0.522062, 0.417686), (0.498022, 0.417686), (0.503134, 0.522089), (0.49899, 0.474834), (0.522931, 0.474318), (0.503134, 0.522089), (0.522931, 0.474318), (0.525852, 0.520347), (0.479862, 0.476114), (0.46827, 0.475738), (0.468119, 0.417686), (0.479862, 0.476114), (0.468119, 0.417686), (0.480548, 0.417686), (0.480517, 0.543121), (0.466141, 0.543041), (0.46827, 0.475738), (0.480517, 0.543121), (0.46827, 0.475738), (0.479862, 0.476114), (0.449248, 0.473935), (0.449445, 0.417686), (0.468119, 0.417686), (0.449248, 0.473935), (0.468119, 0.417686), (0.46827, 0.475738), (0.49899, 0.474834), (0.479862, 0.476114), (0.480548, 0.417686), (0.49899, 0.474834), (0.480548, 0.417686), (0.498022, 0.417686), (0.503134, 0.522089), (0.480517, 0.543121), (0.479862, 0.476114), (0.503134, 0.522089), (0.479862, 0.476114), (0.49899, 0.474834), (0.449248, 0.473935), (0.46827, 0.475738), (0.466141, 0.543041), (0.449248, 0.473935), (0.466141, 0.543041), (0.443779, 0.521658), (0.49899, 0.474834), (0.498022, 0.417686), (0.522062, 0.417686), (0.49899, 0.474834), (0.522062, 0.417686), (0.522931, 0.474318), (0.503134, 0.580278), (0.525852, 0.58202), (0.522931, 0.628049), (0.503134, 0.580278), (0.522931, 0.628049), (0.49899, 0.627533), (0.479862, 0.626253), (0.480548, 0.684681), (0.468119, 0.684681), (0.479862, 0.626253), (0.468119, 0.684681), (0.46827, 0.626629), (0.480517, 0.559246), (0.479862, 0.626253), (0.46827, 0.626629), (0.480517, 0.559246), (0.46827, 0.626629), (0.466141, 0.559326), (0.449248, 0.628432), (0.46827, 0.626629), (0.468119, 0.684681), (0.449248, 0.628432), (0.468119, 0.684681), (0.449445, 0.684681), (0.49899, 0.627533), (0.498022, 0.684681), (0.480548, 0.684681), (0.49899, 0.627533), (0.480548, 0.684681), (0.479862, 0.626253), (0.503134, 0.580278), (0.49899, 0.627533), (0.479862, 0.626253), (0.503134, 0.580278), (0.479862, 0.626253), (0.480517, 0.559246), (0.449248, 0.628432), (0.443779, 0.580709), (0.466141, 0.559326), (0.449248, 0.628432), (0.466141, 0.559326), (0.46827, 0.626629), (0.49899, 0.627533), (0.522931, 0.628049), (0.522062, 0.684681), (0.49899, 0.627533), (0.522062, 0.684681), (0.498022, 0.684681), (0.503134, 0.789083), (0.49899, 0.741829), (0.522931, 0.741313), (0.503134, 0.789083), (0.522931, 0.741313), (0.525852, 0.787342), (0.479862, 0.743109), (0.46827, 0.742732), (0.468119, 0.684681), (0.479862, 0.743109), (0.468119, 0.684681), (0.480548, 0.684681), (0.480517, 0.810116), (0.466141, 0.810036), (0.46827, 0.742732), (0.480517, 0.810116), (0.46827, 0.742732), (0.479862, 0.743109), (0.449248, 0.74093), (0.449445, 0.684681), (0.468119, 0.684681), (0.449248, 0.74093), (0.468119, 0.684681), (0.46827, 0.742732), (0.49899, 0.741829), (0.479862, 0.743109), (0.480548, 0.684681), (0.49899, 0.741829), (0.480548, 0.684681), (0.498022, 0.684681), (0.503134, 0.789083), (0.480517, 0.810116), (0.479862, 0.743109), (0.503134, 0.789083), (0.479862, 0.743109), (0.49899, 0.741829), (0.449248, 0.74093), (0.46827, 0.742732), (0.466141, 0.810036), (0.449248, 0.74093), (0.466141, 0.810036), (0.443779, 0.788653), (0.49899, 0.741829), (0.498022, 0.684681), (0.522062, 0.684681), (0.49899, 0.741829), (0.522062, 0.684681), (0.522931, 0.741313), (0.503134, 0.038906), (0.525852, 0.040648), (0.522931, 0.086677), (0.503134, 0.038906), (0.522931, 0.086677), (0.49899, 0.08616), (0.479862, 0.084881), (0.480548, 0.143309), (0.468119, 0.143309), (0.479862, 0.084881), (0.468119, 0.143309), (0.46827, 0.085257), (0.480517, 0.017874), (0.479862, 0.084881), (0.46827, 0.085257), (0.480517, 0.017874), (0.46827, 0.085257), (0.466141, 0.017953), (0.449248, 0.087059), (0.46827, 0.085257), (0.468119, 0.143309), (0.449248, 0.087059), (0.468119, 0.143309), (0.449445, 0.143309), (0.49899, 0.08616), (0.498022, 0.143309), (0.480548, 0.143309), (0.49899, 0.08616), (0.480548, 0.143309), (0.479862, 0.084881), (0.503134, 0.038906), (0.49899, 0.08616), (0.479862, 0.084881), (0.503134, 0.038906), (0.479862, 0.084881), (0.480517, 0.017874), (0.449248, 0.087059), (0.443779, 0.039337), (0.466141, 0.017953), (0.449248, 0.087059), (0.466141, 0.017953), (0.46827, 0.085257), (0.49899, 0.08616), (0.522931, 0.086677), (0.522062, 0.143309), (0.49899, 0.08616), (0.522062, 0.143309), (0.498022, 0.143309), (0.503134, 0.247711), (0.49899, 0.200457), (0.522931, 0.19994), (0.503134, 0.247711), (0.522931, 0.19994), (0.525852, 0.24597), (0.479862, 0.201736), (0.46827, 0.20136), (0.468119, 0.143309), (0.479862, 0.201736), (0.468119, 0.143309), (0.480548, 0.143309), (0.480517, 0.268744), (0.466141, 0.268664), (0.46827, 0.20136), (0.480517, 0.268744), (0.46827, 0.20136), (0.479862, 0.201736), (0.449248, 0.199558), (0.449445, 0.143309), (0.468119, 0.143309), (0.449248, 0.199558), (0.468119, 0.143309), (0.46827, 0.20136), (0.49899, 0.200457), (0.479862, 0.201736), (0.480548, 0.143309), (0.49899, 0.200457), (0.480548, 0.143309), (0.498022, 0.143309), (0.503134, 0.247711), (0.480517, 0.268744), (0.479862, 0.201736), (0.503134, 0.247711), (0.479862, 0.201736), (0.49899, 0.200457), (0.449248, 0.199558), (0.46827, 0.20136), (0.466141, 0.268664), (0.449248, 0.199558), (0.466141, 0.268664), (0.443779, 0.247281), (0.49899, 0.200457), (0.498022, 0.143309), (0.522062, 0.143309), (0.49899, 0.200457), (0.522062, 0.143309), (0.522931, 0.19994)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }
        }
    }

    def Xform "Office_chair"
    {
        float3 xformOp:rotateXYZ = (0, 0, -90)
        double3 xformOp:translate = (0.5, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "body"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "visual"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry"
                {
                    def Mesh "OfficeChairBlack"
                    {
                        float3[] extent = [(-0.367758, -0.389259, 0.001638), (0.367766, 0.363843, 1.24786)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175]
                        rel material:binding = </Looks/Material_13>
                        normal3f[] normals = [(-0, -0.87684643, 0.48077062), (-0, -0.87684643, 0.48077062), (-0, -0.87684643, 0.48077062), (-0, -0.87684643, 0.48077062), (-0, -0.87684643, 0.48077062), (-0, -0.87684643, 0.48077062), (-0.000099993886, -0.48077062, -0.8768464), (-0.000099993886, -0.48077062, -0.8768464), (-0.000099993886, -0.48077062, -0.8768464), (-0.000099993886, -0.48077062, -0.8768464), (-0.000099993886, -0.48077062, -0.8768464), (-0.000099993886, -0.48077062, -0.8768464), (0, 0.8768886, -0.4806937), (0, 0.8768886, -0.4806937), (0, 0.8768886, -0.4806937), (0, 0.8768886, -0.4806937), (0, 0.8768886, -0.4806937), (0, 0.8768886, -0.4806937), (0.000099993886, 0.48077062, 0.8768464), (0.000099993886, 0.48077062, 0.8768464), (0.000099993886, 0.48077062, 0.8768464), (0.000099993886, 0.48077062, 0.8768464), (0.000099993886, 0.48077062, 0.8768464), (0.000099993886, 0.48077062, 0.8768464), (-0.9999987, 0.00009999987, 0.0015999979), (-0.9999987, 0.00009999987, 0.0015999979), (-0.9999987, 0.00009999987, 0.0015999979), (-0.9999987, 0.00009999987, 0.0015999979), (-0.9999987, 0.00009999987, 0.0015999979), (-0.9999987, 0.00009999987, 0.0015999979), (-0.07330072, 0.99730986, 0.00010000099), (-0.07330072, 0.99730986, 0.00010000099), (-0.07330072, 0.99730986, 0.00010000099), (-0.07330072, 0.99730986, 0.00010000099), (-0.07330072, 0.99730986, 0.00010000099), (-0.07330072, 0.99730986, 0.00010000099), (0.9999987, -0.00009999987, -0.0015999979), (0.9999987, -0.00009999987, -0.0015999979), (0.9999987, -0.00009999987, -0.0015999979), (0.9999987, -0.00009999987, -0.0015999979), (0.9999987, -0.00009999987, -0.0015999979), (0.9999987, -0.00009999987, -0.0015999979), (-0.07359911, -0.9972879, 0.00009999878), (-0.07359911, -0.9972879, 0.00009999878), (-0.07359911, -0.9972879, 0.00009999878), (-0.07359911, -0.9972879, 0.00009999878), (-0.07359911, -0.9972879, 0.00009999878), (-0.07359911, -0.9972879, 0.00009999878), (-0.0015999979, 0, -0.99999875), (-0.0015999979, 0, -0.99999875), (-0.0015999979, 0, -0.99999875), (-0.0015999979, 0, -0.99999875), (-0.0015999979, 0, -0.99999875), (-0.0015999979, 0, -0.99999875), (0.0015999979, -0, 0.99999875), (0.0015999979, -0, 0.99999875), (0.0015999979, -0, 0.99999875), (0.0015999979, -0, 0.99999875), (0.0015999979, -0, 0.99999875), (0.0015999979, -0, 0.99999875), (-1, -0, 0), (-1, -0, 0), (-1, -0, 0), (-1, -0, 0), (-1, -0, 0), (-1, -0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, -0, 0), (1, -0, 0), (1, -0, 0), (1, -0, 0), (1, -0, 0), (1, -0, 0), (0, -0.49281827, -0.87013227), (0, -0.49281827, -0.87013227), (0, -0.49281827, -0.87013227), (0, -0.49281827, -0.87013227), (0, -0.49281827, -0.87013227), (0, -0.49281827, -0.87013227), (0, 0.46769476, 0.88389003), (0, 0.46769476, 0.88389003), (0, 0.46769476, 0.88389003), (0, 0.46769476, 0.88389003), (0, 0.46769476, 0.88389003), (0, 0.46769476, 0.88389003), (0.8228265, -0.2541082, 0.5083164), (-0.8228265, -0.2541082, 0.5083164), (-0.57735026, -0.57735026, 0.57735026), (0.8228265, -0.2541082, 0.5083164), (-0.57735026, -0.57735026, 0.57735026), (0.57735026, -0.57735026, 0.57735026), (-0.8228265, -0.2541082, 0.5083164), (0.8228265, -0.2541082, 0.5083164), (0.8323873, -0.5484916, 0.07929879), (-0.8228265, -0.2541082, 0.5083164), (0.8323873, -0.5484916, 0.07929879), (-0.8323873, -0.5484916, 0.07929879), (-0.8323873, -0.5484916, 0.07929879), (0.8323873, -0.5484916, 0.07929879), (0.6435029, -0.76480347, -0.031300142), (-0.8323873, -0.5484916, 0.07929879), (0.6435029, -0.76480347, -0.031300142), (-0.6435029, -0.76480347, -0.031300142), (0.6435029, -0.76480347, -0.031300142), (0.577321, -0.3991145, 0.7123259), (-0.577321, -0.3991145, 0.7123259), (0.6435029, -0.76480347, -0.031300142), (-0.577321, -0.3991145, 0.7123259), (-0.6435029, -0.76480347, -0.031300142), (0.6190167, 0.35370952, -0.7012189), (0.57711613, -0.5763161, -0.5786162), (-0.57711613, -0.5763161, -0.5786162), (0.6190167, 0.35370952, -0.7012189), (-0.57711613, -0.5763161, -0.5786162), (-0.6190167, 0.35370952, -0.7012189), (-0.6190167, 0.35370952, -0.7012189), (-0.61462826, 0.78013587, -0.116705365), (0.61462826, 0.78013587, -0.116705365), (-0.6190167, 0.35370952, -0.7012189), (0.61462826, 0.78013587, -0.116705365), (0.6190167, 0.35370952, -0.7012189), (-0.61462826, 0.78013587, -0.116705365), (-0.7825857, 0.6221886, 0.020999616), (0.7825857, 0.6221886, 0.020999616), (-0.61462826, 0.78013587, -0.116705365), (0.7825857, 0.6221886, 0.020999616), (0.61462826, 0.78013587, -0.116705365), (0.7825857, 0.6221886, 0.020999616), (-0.7825857, 0.6221886, 0.020999616), (-0.5772946, 0.7126933, 0.39849624), (0.7825857, 0.6221886, 0.020999616), (-0.5772946, 0.7126933, 0.39849624), (0.5772946, 0.7126933, 0.39849624), (-0.57735026, -0.57735026, 0.57735026), (-0.8228265, -0.2541082, 0.5083164), (-0.6190167, 0.35370952, -0.7012189), (-0.57735026, -0.57735026, 0.57735026), (-0.6190167, 0.35370952, -0.7012189), (-0.57711613, -0.5763161, -0.5786162), (0.8228265, -0.2541082, 0.5083164), (0.57735026, -0.57735026, 0.57735026), (0.57711613, -0.5763161, -0.5786162), (0.8228265, -0.2541082, 0.5083164), (0.57711613, -0.5763161, -0.5786162), (0.6190167, 0.35370952, -0.7012189), (0.57735026, -0.57735026, 0.57735026), (-0.57735026, -0.57735026, 0.57735026), (-0.57711613, -0.5763161, -0.5786162), (0.57735026, -0.57735026, 0.57735026), (-0.57711613, -0.5763161, -0.5786162), (0.57711613, -0.5763161, -0.5786162), (-0.8228265, -0.2541082, 0.5083164), (-0.8323873, -0.5484916, 0.07929879), (-0.61462826, 0.78013587, -0.116705365), (-0.8228265, -0.2541082, 0.5083164), (-0.61462826, 0.78013587, -0.116705365), (-0.6190167, 0.35370952, -0.7012189), (0.8323873, -0.5484916, 0.07929879), (0.8228265, -0.2541082, 0.5083164), (0.6190167, 0.35370952, -0.7012189), (0.8323873, -0.5484916, 0.07929879), (0.6190167, 0.35370952, -0.7012189), (0.61462826, 0.78013587, -0.116705365), (-0.8323873, -0.5484916, 0.07929879), (-0.6435029, -0.76480347, -0.031300142), (-0.7825857, 0.6221886, 0.020999616), (-0.8323873, -0.5484916, 0.07929879), (-0.7825857, 0.6221886, 0.020999616), (-0.61462826, 0.78013587, -0.116705365), (0.6435029, -0.76480347, -0.031300142), (0.8323873, -0.5484916, 0.07929879), (0.61462826, 0.78013587, -0.116705365), (0.6435029, -0.76480347, -0.031300142), (0.61462826, 0.78013587, -0.116705365), (0.7825857, 0.6221886, 0.020999616), (-0.577321, -0.3991145, 0.7123259), (0.577321, -0.3991145, 0.7123259), (0.5772946, 0.7126933, 0.39849624), (-0.577321, -0.3991145, 0.7123259), (0.5772946, 0.7126933, 0.39849624), (-0.5772946, 0.7126933, 0.39849624), (-0.6435029, -0.76480347, -0.031300142), (-0.577321, -0.3991145, 0.7123259), (-0.5772946, 0.7126933, 0.39849624), (-0.6435029, -0.76480347, -0.031300142), (-0.5772946, 0.7126933, 0.39849624), (-0.7825857, 0.6221886, 0.020999616), (0.577321, -0.3991145, 0.7123259), (0.6435029, -0.76480347, -0.031300142), (0.7825857, 0.6221886, 0.020999616), (0.577321, -0.3991145, 0.7123259), (0.7825857, 0.6221886, 0.020999616), (0.5772946, 0.7126933, 0.39849624), (0.65170497, 0.3716028, -0.661205), (0.44572023, 0.6308287, -0.63512886), (0.66271275, -0.7367142, -0.13440257), (0.65170497, 0.3716028, -0.661205), (0.66271275, -0.7367142, -0.13440257), (0.5741911, -0.4445931, -0.68748933), (0.5741911, -0.4445931, -0.68748933), (0.66271275, -0.7367142, -0.13440257), (-0.66271275, -0.7367142, -0.13440257), (0.5741911, -0.4445931, -0.68748933), (-0.66271275, -0.7367142, -0.13440257), (-0.5741911, -0.4445931, -0.68748933), (-0.5741911, -0.4445931, -0.68748933), (-0.66271275, -0.7367142, -0.13440257), (-0.44572023, 0.6308287, -0.63512886), (-0.5741911, -0.4445931, -0.68748933), (-0.44572023, 0.6308287, -0.63512886), (-0.65170497, 0.3716028, -0.661205), (-0.65170497, 0.3716028, -0.661205), (-0.44572023, 0.6308287, -0.63512886), (0.44572023, 0.6308287, -0.63512886), (-0.65170497, 0.3716028, -0.661205), (0.44572023, 0.6308287, -0.63512886), (0.65170497, 0.3716028, -0.661205), (0.5741911, -0.4445931, -0.68748933), (-0.5741911, -0.4445931, -0.68748933), (-0.65170497, 0.3716028, -0.661205), (0.5741911, -0.4445931, -0.68748933), (-0.65170497, 0.3716028, -0.661205), (0.65170497, 0.3716028, -0.661205), (0.5674778, -0.06809734, 0.8205679), (0.6915313, -0.10460473, 0.71473235), (-0.31261715, 0.6256344, 0.71473926), (0.5674778, -0.06809734, 0.8205679), (-0.31261715, 0.6256344, 0.71473926), (-0.2396019, 0.5201041, 0.81980646), (0.23991814, 0.5192393, 0.8202621), (0.3129074, 0.6255148, 0.71471685), (-0.69161236, -0.10420186, 0.71471274), (0.23991814, 0.5192393, 0.8202621), (-0.69161236, -0.10420186, 0.71471274), (-0.5682758, -0.06749713, 0.8200651), (0.11080611, -0.5610309, 0.8203452), (0.11440066, -0.689904, 0.7148042), (0.4981933, 0.49079338, 0.7147904), (0.11080611, -0.5610309, 0.8203452), (0.4981933, 0.49079338, 0.7147904), (0.42010593, 0.38870552, 0.8200116), (-0.4996239, -0.2797134, 0.81983924), (-0.62071806, -0.32230937, 0.7147208), (0.62081516, -0.32190785, 0.7148174), (-0.4996239, -0.2797134, 0.81983924), (0.62081516, -0.32190785, 0.7148174), (0.4992042, -0.27850235, 0.82050693), (-0.42052054, 0.38861898, 0.8198401), (-0.49842817, 0.4906277, 0.7147404), (-0.114302255, -0.6900136, 0.7147141), (-0.42052054, 0.38861898, 0.8198401), (-0.114302255, -0.6900136, 0.7147141), (-0.1106028, -0.56081426, 0.8205208), (-0.5682758, -0.06749713, 0.8200651), (-0.42052054, 0.38861898, 0.8198401), (0, 0, 1), (0.11080611, -0.5610309, 0.8203452), (0.42010593, 0.38870552, 0.8200116), (0, 0, 1), (0.4992042, -0.27850235, 0.82050693), (0.11080611, -0.5610309, 0.8203452), (0, 0, 1), (-0.2396019, 0.5201041, 0.81980646), (0.23991814, 0.5192393, 0.8202621), (0, 0, 1), (0.23991814, 0.5192393, 0.8202621), (-0.5682758, -0.06749713, 0.8200651), (0, 0, 1), (-0.1106028, -0.56081426, 0.8205208), (-0.4996239, -0.2797134, 0.81983924), (0, 0, 1), (-0.42052054, 0.38861898, 0.8198401), (-0.1106028, -0.56081426, 0.8205208), (0, 0, 1), (0.5674778, -0.06809734, 0.8205679), (-0.2396019, 0.5201041, 0.81980646), (0, 0, 1), (0.42010593, 0.38870552, 0.8200116), (0.5674778, -0.06809734, 0.8205679), (0, 0, 1), (-0.4996239, -0.2797134, 0.81983924), (0.4992042, -0.27850235, 0.82050693), (0, 0, 1), (-0.4996239, -0.2797134, 0.81983924), (-0.8832088, -0.46890467, -0.0084000835), (-0.9998855, -0.010799844, 0.010599846), (-0.4996239, -0.2797134, 0.81983924), (-0.9998855, -0.010799844, 0.010599846), (-0.62071806, -0.32230937, 0.7147208), (-0.69161236, -0.10420186, 0.71471274), (-0.81494766, -0.5794339, 0.010800633), (-0.99009025, -0.14019862, -0.00809992), (-0.69161236, -0.10420186, 0.71471274), (-0.99009025, -0.14019862, -0.00809992), (-0.5682758, -0.06749713, 0.8200651), (-0.9998855, -0.010799844, 0.010599846), (-0.999388, 0.01999976, 0.028699653), (-0.47281653, -0.6250219, 0.6211217), (-0.9998855, -0.010799844, 0.010599846), (-0.47281653, -0.6250219, 0.6211217), (-0.62071806, -0.32230937, 0.7147208), (-0.2396019, 0.5201041, 0.81980646), (-0.43861663, 0.8986341, -0.008500323), (0.43962324, 0.8981475, -0.007900418), (-0.2396019, 0.5201041, 0.81980646), (0.43962324, 0.8981475, -0.007900418), (0.23991814, 0.5192393, 0.8202621), (0.23991814, 0.5192393, 0.8202621), (0.43962324, 0.8981475, -0.007900418), (0.80325073, 0.5955376, 0.011100701), (0.23991814, 0.5192393, 0.8202621), (0.80325073, 0.5955376, 0.011100701), (0.3129074, 0.6255148, 0.71471685), (-0.114302255, -0.6900136, 0.7147141), (0.30059487, -0.9536838, 0.0113998065), (-0.17150927, -0.9851532, -0.007600411), (-0.114302255, -0.6900136, 0.7147141), (-0.17150927, -0.9851532, -0.007600411), (-0.1106028, -0.56081426, 0.8205208), (0.42010593, 0.38870552, 0.8200116), (0.71863765, 0.6953364, -0.008200429), (0.98990965, -0.14150138, -0.007500073), (0.42010593, 0.38870552, 0.8200116), (0.98990965, -0.14150138, -0.007500073), (0.5674778, -0.06809734, 0.8205679), (0.6915313, -0.10460473, 0.71473235), (0.74965066, 0.22821543, 0.621242), (-0.015200753, 0.7836388, 0.62103075), (0.6915313, -0.10460473, 0.71473235), (-0.015200753, 0.7836388, 0.62103075), (-0.31261715, 0.6256344, 0.71473926), (-0.42052054, 0.38861898, 0.8198401), (-0.719029, 0.69492805, -0.008500344), (-0.31950852, 0.9475252, 0.010500279), (-0.42052054, 0.38861898, 0.8198401), (-0.31950852, 0.9475252, 0.010500279), (-0.49842817, 0.4906277, 0.7147404), (0.4992042, -0.27850235, 0.82050693), (0.8839059, -0.4676031, -0.007600051), (0.17180017, -0.9851009, -0.0078000072), (0.4992042, -0.27850235, 0.82050693), (0.17180017, -0.9851009, -0.0078000072), (0.11080611, -0.5610309, 0.8203452), (0.4981933, 0.49079338, 0.7147904), (0.31890842, 0.9477251, 0.010700284), (0.71863765, 0.6953364, -0.008200429), (0.4981933, 0.49079338, 0.7147904), (0.71863765, 0.6953364, -0.008200429), (0.42010593, 0.38870552, 0.8200116), (-0.1106028, -0.56081426, 0.8205208), (-0.17150927, -0.9851532, -0.007600411), (-0.8832088, -0.46890467, -0.0084000835), (-0.1106028, -0.56081426, 0.8205208), (-0.8832088, -0.46890467, -0.0084000835), (-0.4996239, -0.2797134, 0.81983924), (0.11080611, -0.5610309, 0.8203452), (0.17180017, -0.9851009, -0.0078000072), (-0.300112, -0.9538382, 0.011200448), (0.11080611, -0.5610309, 0.8203452), (-0.300112, -0.9538382, 0.011200448), (0.11440066, -0.689904, 0.7148042), (-0.31261715, 0.6256344, 0.71473926), (-0.8023145, 0.5968109, 0.010400189), (-0.43861663, 0.8986341, -0.008500323), (-0.31261715, 0.6256344, 0.71473926), (-0.43861663, 0.8986341, -0.008500323), (-0.2396019, 0.5201041, 0.81980646), (-0.5682758, -0.06749713, 0.8200651), (-0.99009025, -0.14019862, -0.00809992), (-0.719029, 0.69492805, -0.008500344), (-0.5682758, -0.06749713, 0.8200651), (-0.719029, 0.69492805, -0.008500344), (-0.42052054, 0.38861898, 0.8198401), (-0.300112, -0.9538382, 0.011200448), (-0.32780343, -0.9443099, 0.028700301), (0.44858515, -0.6425787, 0.62117946), (-0.300112, -0.9538382, 0.011200448), (0.44858515, -0.6425787, 0.62117946), (0.11440066, -0.689904, 0.7148042), (0.5674778, -0.06809734, 0.8205679), (0.98990965, -0.14150138, -0.007500073), (0.81402415, -0.5807172, 0.011500341), (0.5674778, -0.06809734, 0.8205679), (0.81402415, -0.5807172, 0.011500341), (0.6915313, -0.10460473, 0.71473235), (0.62081516, -0.32190785, 0.7148174), (0.9998954, -0.008899959, 0.011399948), (0.8839059, -0.4676031, -0.007600051), (0.62081516, -0.32190785, 0.7148174), (0.8839059, -0.4676031, -0.007600051), (0.4992042, -0.27850235, 0.82050693), (0.11440066, -0.689904, 0.7148042), (0.44858515, -0.6425787, 0.62117946), (0.740602, 0.2564007, 0.62110174), (0.11440066, -0.689904, 0.7148042), (0.740602, 0.2564007, 0.62110174), (0.4981933, 0.49079338, 0.7147904), (0.80325073, 0.5955376, 0.011100701), (0.8202265, 0.57131845, 0.028700925), (0.014801062, 0.7835562, 0.6211446), (0.80325073, 0.5955376, 0.011100701), (0.014801062, 0.7835562, 0.6211446), (0.3129074, 0.6255148, 0.71471685), (-0.62071806, -0.32230937, 0.7147208), (-0.47281653, -0.6250219, 0.6211217), (0.47241744, -0.62522304, 0.6212229), (-0.62071806, -0.32230937, 0.7147208), (0.47241744, -0.62522304, 0.6212229), (0.62081516, -0.32190785, 0.7148174), (-0.31261715, 0.6256344, 0.71473926), (-0.015200753, 0.7836388, 0.62103075), (-0.82027334, 0.5712511, 0.028702565), (-0.31261715, 0.6256344, 0.71473926), (-0.82027334, 0.5712511, 0.028702565), (-0.8023145, 0.5968109, 0.010400189), (0.3129074, 0.6255148, 0.71471685), (0.014801062, 0.7835562, 0.6211446), (-0.74983615, 0.22791097, 0.62112993), (0.3129074, 0.6255148, 0.71471685), (-0.74983615, 0.22791097, 0.62112993), (-0.69161236, -0.10420186, 0.71471274), (-0.69161236, -0.10420186, 0.71471274), (-0.74983615, 0.22791097, 0.62112993), (-0.7967813, -0.60358584, 0.028699325), (-0.69161236, -0.10420186, 0.71471274), (-0.7967813, -0.60358584, 0.028699325), (-0.81494766, -0.5794339, 0.010800633), (0.81402415, -0.5807172, 0.011500341), (0.7968294, -0.6035223, 0.028701058), (0.74965066, 0.22821543, 0.621242), (0.81402415, -0.5807172, 0.011500341), (0.74965066, 0.22821543, 0.621242), (0.6915313, -0.10460473, 0.71473235), (-0.49842817, 0.4906277, 0.7147404), (-0.74061, 0.25660348, 0.6210084), (-0.4487227, -0.6424325, 0.62123144), (-0.49842817, 0.4906277, 0.7147404), (-0.4487227, -0.6424325, 0.62123144), (-0.114302255, -0.6900136, 0.7147141), (-0.114302255, -0.6900136, 0.7147141), (-0.4487227, -0.6424325, 0.62123144), (0.32780343, -0.9443099, 0.028700301), (-0.114302255, -0.6900136, 0.7147141), (0.32780343, -0.9443099, 0.028700301), (0.30059487, -0.9536838, 0.0113998065), (0.62081516, -0.32190785, 0.7148174), (0.47241744, -0.62522304, 0.6212229), (0.99938995, 0.0198998, 0.028699711), (0.62081516, -0.32190785, 0.7148174), (0.99938995, 0.0198998, 0.028699711), (0.9998954, -0.008899959, 0.011399948), (0.4981933, 0.49079338, 0.7147904), (0.740602, 0.2564007, 0.62110174), (0.28981575, 0.956652, 0.028701559), (0.4981933, 0.49079338, 0.7147904), (0.28981575, 0.956652, 0.028701559), (0.31890842, 0.9477251, 0.010700284), (-0.31950852, 0.9475252, 0.010500279), (-0.28981575, 0.956652, 0.028701559), (-0.74061, 0.25660348, 0.6210084), (-0.31950852, 0.9475252, 0.010500279), (-0.74061, 0.25660348, 0.6210084), (-0.49842817, 0.4906277, 0.7147404), (-1, -0, 0), (-0.59570336, 0, 0.80320454), (-0.59569854, 0.7638981, 0.24819939), (1, -0, 0), (0.59569854, 0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59570336, 0, 0.80320454), (0.59570336, 0, 0.80320454), (0.59569854, 0.7638981, 0.24819939), (-0.59570336, 0, 0.80320454), (0.59569854, 0.7638981, 0.24819939), (-0.59569854, 0.7638981, 0.24819939), (-1, -0, 0), (-0.59569854, 0.7638981, 0.24819939), (-0.5957069, 0.4721054, -0.6498075), (1, -0, 0), (0.5957069, 0.4721054, -0.6498075), (0.59569854, 0.7638981, 0.24819939), (-0.59569854, 0.7638981, 0.24819939), (0.59569854, 0.7638981, 0.24819939), (0.5957069, 0.4721054, -0.6498075), (-0.59569854, 0.7638981, 0.24819939), (0.5957069, 0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (-1, -0, 0), (-0.5957069, 0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (1, -0, 0), (0.5957069, -0.4721054, -0.6498075), (0.5957069, 0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (0.5957069, 0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (-1, -0, 0), (-0.5957069, -0.4721054, -0.6498075), (-0.59569854, -0.7638981, 0.24819939), (1, -0, 0), (0.59569854, -0.7638981, 0.24819939), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (0.59569854, -0.7638981, 0.24819939), (-0.5957069, -0.4721054, -0.6498075), (0.59569854, -0.7638981, 0.24819939), (-0.59569854, -0.7638981, 0.24819939), (-1, -0, 0), (-0.59569854, -0.7638981, 0.24819939), (-0.59570336, 0, 0.80320454), (1, -0, 0), (0.59570336, 0, 0.80320454), (0.59569854, -0.7638981, 0.24819939), (-0.59569854, -0.7638981, 0.24819939), (0.59569854, -0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59569854, -0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59570336, 0, 0.80320454), (-1, -0, 0), (-0.59570336, 0, 0.80320454), (-0.59569854, 0.7638981, 0.24819939), (1, -0, 0), (0.59569854, 0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59570336, 0, 0.80320454), (0.59570336, 0, 0.80320454), (0.59569854, 0.7638981, 0.24819939), (-0.59570336, 0, 0.80320454), (0.59569854, 0.7638981, 0.24819939), (-0.59569854, 0.7638981, 0.24819939), (-1, -0, 0), (-0.59569854, 0.7638981, 0.24819939), (-0.5957069, 0.4721054, -0.6498075), (1, -0, 0), (0.5957069, 0.4721054, -0.6498075), (0.59569854, 0.7638981, 0.24819939), (-0.59569854, 0.7638981, 0.24819939), (0.59569854, 0.7638981, 0.24819939), (0.5957069, 0.4721054, -0.6498075), (-0.59569854, 0.7638981, 0.24819939), (0.5957069, 0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (-1, -0, 0), (-0.5957069, 0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (1, -0, 0), (0.5957069, -0.4721054, -0.6498075), (0.5957069, 0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (0.5957069, 0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (-1, -0, 0), (-0.5957069, -0.4721054, -0.6498075), (-0.59569854, -0.7638981, 0.24819939), (1, -0, 0), (0.59569854, -0.7638981, 0.24819939), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (0.59569854, -0.7638981, 0.24819939), (-0.5957069, -0.4721054, -0.6498075), (0.59569854, -0.7638981, 0.24819939), (-0.59569854, -0.7638981, 0.24819939), (-1, -0, 0), (-0.59569854, -0.7638981, 0.24819939), (-0.59570336, 0, 0.80320454), (1, -0, 0), (0.59570336, 0, 0.80320454), (0.59569854, -0.7638981, 0.24819939), (-0.59569854, -0.7638981, 0.24819939), (0.59569854, -0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59569854, -0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59570336, 0, 0.80320454), (-1, -0, 0), (-0.59570336, 0, 0.80320454), (-0.59569854, 0.7638981, 0.24819939), (1, -0, 0), (0.59569854, 0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59570336, 0, 0.80320454), (0.59570336, 0, 0.80320454), (0.59569854, 0.7638981, 0.24819939), (-0.59570336, 0, 0.80320454), (0.59569854, 0.7638981, 0.24819939), (-0.59569854, 0.7638981, 0.24819939), (-1, -0, 0), (-0.59569854, 0.7638981, 0.24819939), (-0.5957069, 0.4721054, -0.6498075), (1, -0, 0), (0.5957069, 0.4721054, -0.6498075), (0.59569854, 0.7638981, 0.24819939), (-0.59569854, 0.7638981, 0.24819939), (0.59569854, 0.7638981, 0.24819939), (0.5957069, 0.4721054, -0.6498075), (-0.59569854, 0.7638981, 0.24819939), (0.5957069, 0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (-1, -0, 0), (-0.5957069, 0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (1, -0, 0), (0.5957069, -0.4721054, -0.6498075), (0.5957069, 0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (0.5957069, 0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (-1, -0, 0), (-0.5957069, -0.4721054, -0.6498075), (-0.59569854, -0.7638981, 0.24819939), (1, -0, 0), (0.59569854, -0.7638981, 0.24819939), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (0.59569854, -0.7638981, 0.24819939), (-0.5957069, -0.4721054, -0.6498075), (0.59569854, -0.7638981, 0.24819939), (-0.59569854, -0.7638981, 0.24819939), (-1, -0, 0), (-0.59569854, -0.7638981, 0.24819939), (-0.59570336, 0, 0.80320454), (1, -0, 0), (0.59570336, 0, 0.80320454), (0.59569854, -0.7638981, 0.24819939), (-0.59569854, -0.7638981, 0.24819939), (0.59569854, -0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59569854, -0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59570336, 0, 0.80320454), (-1, -0, 0), (-0.59570336, 0, 0.80320454), (-0.59569854, 0.7638981, 0.24819939), (1, -0, 0), (0.59569854, 0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59570336, 0, 0.80320454), (0.59570336, 0, 0.80320454), (0.59569854, 0.7638981, 0.24819939), (-0.59570336, 0, 0.80320454), (0.59569854, 0.7638981, 0.24819939), (-0.59569854, 0.7638981, 0.24819939), (-1, -0, 0), (-0.59569854, 0.7638981, 0.24819939), (-0.5957069, 0.4721054, -0.6498075), (1, -0, 0), (0.5957069, 0.4721054, -0.6498075), (0.59569854, 0.7638981, 0.24819939), (-0.59569854, 0.7638981, 0.24819939), (0.59569854, 0.7638981, 0.24819939), (0.5957069, 0.4721054, -0.6498075), (-0.59569854, 0.7638981, 0.24819939), (0.5957069, 0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (-1, -0, 0), (-0.5957069, 0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (1, -0, 0), (0.5957069, -0.4721054, -0.6498075), (0.5957069, 0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (0.5957069, 0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (-1, -0, 0), (-0.5957069, -0.4721054, -0.6498075), (-0.59569854, -0.7638981, 0.24819939), (1, -0, 0), (0.59569854, -0.7638981, 0.24819939), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (0.59569854, -0.7638981, 0.24819939), (-0.5957069, -0.4721054, -0.6498075), (0.59569854, -0.7638981, 0.24819939), (-0.59569854, -0.7638981, 0.24819939), (-1, -0, 0), (-0.59569854, -0.7638981, 0.24819939), (-0.59570336, 0, 0.80320454), (1, -0, 0), (0.59570336, 0, 0.80320454), (0.59569854, -0.7638981, 0.24819939), (-0.59569854, -0.7638981, 0.24819939), (0.59569854, -0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59569854, -0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59570336, 0, 0.80320454), (-1, -0, 0), (-0.59570336, 0, 0.80320454), (-0.59569854, 0.7638981, 0.24819939), (1, -0, 0), (0.59569854, 0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59570336, 0, 0.80320454), (0.59570336, 0, 0.80320454), (0.59569854, 0.7638981, 0.24819939), (-0.59570336, 0, 0.80320454), (0.59569854, 0.7638981, 0.24819939), (-0.59569854, 0.7638981, 0.24819939), (-1, -0, 0), (-0.59569854, 0.7638981, 0.24819939), (-0.5957069, 0.4721054, -0.6498075), (1, -0, 0), (0.5957069, 0.4721054, -0.6498075), (0.59569854, 0.7638981, 0.24819939), (-0.59569854, 0.7638981, 0.24819939), (0.59569854, 0.7638981, 0.24819939), (0.5957069, 0.4721054, -0.6498075), (-0.59569854, 0.7638981, 0.24819939), (0.5957069, 0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (-1, -0, 0), (-0.5957069, 0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (1, -0, 0), (0.5957069, -0.4721054, -0.6498075), (0.5957069, 0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (0.5957069, 0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, 0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (-1, -0, 0), (-0.5957069, -0.4721054, -0.6498075), (-0.59569854, -0.7638981, 0.24819939), (1, -0, 0), (0.59569854, -0.7638981, 0.24819939), (0.5957069, -0.4721054, -0.6498075), (-0.5957069, -0.4721054, -0.6498075), (0.5957069, -0.4721054, -0.6498075), (0.59569854, -0.7638981, 0.24819939), (-0.5957069, -0.4721054, -0.6498075), (0.59569854, -0.7638981, 0.24819939), (-0.59569854, -0.7638981, 0.24819939), (-1, -0, 0), (-0.59569854, -0.7638981, 0.24819939), (-0.59570336, 0, 0.80320454), (1, -0, 0), (0.59570336, 0, 0.80320454), (0.59569854, -0.7638981, 0.24819939), (-0.59569854, -0.7638981, 0.24819939), (0.59569854, -0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59569854, -0.7638981, 0.24819939), (0.59570336, 0, 0.80320454), (-0.59570336, 0, 0.80320454), (0, 0.9985786, 0.053298857), (0, 0.9985786, 0.053298857), (0.86479115, 0.4992949, 0.053299457), (0, 0.9985786, 0.053298857), (0.86479115, 0.4992949, 0.053299457), (0.86479115, 0.4992949, 0.053299457), (0.86479115, 0.4992949, 0.053299457), (0.86479115, 0.4992949, 0.053299457), (0.86479115, -0.4992949, 0.053299457), (0.86479115, 0.4992949, 0.053299457), (0.86479115, -0.4992949, 0.053299457), (0.86479115, -0.4992949, 0.053299457), (0.86479115, -0.4992949, 0.053299457), (0.86479115, -0.4992949, 0.053299457), (0, -0.9985786, 0.053298857), (0.86479115, -0.4992949, 0.053299457), (0, -0.9985786, 0.053298857), (0, -0.9985786, 0.053298857), (0, -0.9985786, 0.053298857), (0, -0.9985786, 0.053298857), (-0.86479115, -0.4992949, 0.053299457), (0, -0.9985786, 0.053298857), (-0.86479115, -0.4992949, 0.053299457), (-0.86479115, -0.4992949, 0.053299457), (-0.86479115, -0.4992949, 0.053299457), (-0.86479115, -0.4992949, 0.053299457), (-0.86479115, 0.4992949, 0.053299457), (-0.86479115, -0.4992949, 0.053299457), (-0.86479115, 0.4992949, 0.053299457), (-0.86479115, 0.4992949, 0.053299457), (-0.86479115, 0.4992949, 0.053299457), (-0.86479115, 0.4992949, 0.053299457), (0, 0.9985786, 0.053298857), (-0.86479115, 0.4992949, 0.053299457), (0, 0.9985786, 0.053298857), (0, 0.9985786, 0.053298857), (-0.6121852, -0.60418534, 0.5100876), (-0.64960027, -0.75730026, -0.06720002), (0.64960027, -0.75730026, -0.06720002), (-0.6121852, -0.60418534, 0.5100876), (0.64960027, -0.75730026, -0.06720002), (0.6121852, -0.60418534, 0.5100876), (-0.7073123, 0.6630115, 0.24520424), (-0.6177159, 0.5331137, 0.5781149), (0.6177159, 0.5331137, 0.5781149), (-0.7073123, 0.6630115, 0.24520424), (0.6177159, 0.5331137, 0.5781149), (0.7073123, 0.6630115, 0.24520424), (-0.6688283, -0.13350564, 0.73133093), (-0.6121852, -0.60418534, 0.5100876), (0.6121852, -0.60418534, 0.5100876), (-0.6688283, -0.13350564, 0.73133093), (0.6121852, -0.60418534, 0.5100876), (0.6688283, -0.13350564, 0.73133093), (-0.67768997, 0.100198515, 0.7284892), (-0.6688283, -0.13350564, 0.73133093), (0.6688283, -0.13350564, 0.73133093), (-0.67768997, 0.100198515, 0.7284892), (0.6688283, -0.13350564, 0.73133093), (0.67768997, 0.100198515, 0.7284892), (-0.64960027, -0.75730026, -0.06720002), (-0.5258084, -0.7931127, -0.3074049), (0.5258084, -0.7931127, -0.3074049), (-0.64960027, -0.75730026, -0.06720002), (0.5258084, -0.7931127, -0.3074049), (0.64960027, -0.75730026, -0.06720002), (-0.6177159, 0.5331137, 0.5781149), (-0.67768997, 0.100198515, 0.7284892), (0.67768997, 0.100198515, 0.7284892), (-0.6177159, 0.5331137, 0.5781149), (0.67768997, 0.100198515, 0.7284892), (0.6177159, 0.5331137, 0.5781149), (-0.8434546, 0.41032654, -0.34672245), (0.8434546, 0.41032654, -0.34672245), (0.77003187, 0.6347263, 0.06460267), (-0.8434546, 0.41032654, -0.34672245), (0.77003187, 0.6347263, 0.06460267), (-0.7700726, 0.6346774, 0.064597696), (-0.696605, -0.68340486, -0.21840157), (0.696605, -0.68340486, -0.21840157), (0.8356262, -0.3742117, -0.40211257), (-0.696605, -0.68340486, -0.21840157), (0.8356262, -0.3742117, -0.40211257), (-0.8356262, -0.3742117, -0.40211257), (-0.7457023, 0.10840034, -0.65740204), (0.7457023, 0.10840034, -0.65740204), (0.8434546, 0.41032654, -0.34672245), (-0.7457023, 0.10840034, -0.65740204), (0.8434546, 0.41032654, -0.34672245), (-0.8434546, 0.41032654, -0.34672245), (-0.7347549, -0.08040601, -0.67355037), (0.7347549, -0.08040601, -0.67355037), (0.7457023, 0.10840034, -0.65740204), (-0.7347549, -0.08040601, -0.67355037), (0.7457023, 0.10840034, -0.65740204), (-0.7457023, 0.10840034, -0.65740204), (-0.7700726, 0.6346774, 0.064597696), (0.77003187, 0.6347263, 0.06460267), (0.8110056, 0.54700375, 0.20750143), (-0.7700726, 0.6346774, 0.064597696), (0.8110056, 0.54700375, 0.20750143), (-0.8110056, 0.54700375, 0.20750143), (-0.8356262, -0.3742117, -0.40211257), (0.8356262, -0.3742117, -0.40211257), (0.7347549, -0.08040601, -0.67355037), (-0.8356262, -0.3742117, -0.40211257), (0.7347549, -0.08040601, -0.67355037), (-0.7347549, -0.08040601, -0.67355037), (-0.64960027, -0.75730026, -0.06720002), (-0.6121852, -0.60418534, 0.5100876), (-0.8434546, 0.41032654, -0.34672245), (-0.64960027, -0.75730026, -0.06720002), (-0.8434546, 0.41032654, -0.34672245), (-0.7700726, 0.6346774, 0.064597696), (-0.6121852, -0.60418534, 0.5100876), (-0.6688283, -0.13350564, 0.73133093), (-0.7457023, 0.10840034, -0.65740204), (-0.6121852, -0.60418534, 0.5100876), (-0.7457023, 0.10840034, -0.65740204), (-0.8434546, 0.41032654, -0.34672245), (-0.6688283, -0.13350564, 0.73133093), (-0.67768997, 0.100198515, 0.7284892), (-0.7347549, -0.08040601, -0.67355037), (-0.6688283, -0.13350564, 0.73133093), (-0.7347549, -0.08040601, -0.67355037), (-0.7457023, 0.10840034, -0.65740204), (-0.67768997, 0.100198515, 0.7284892), (-0.6177159, 0.5331137, 0.5781149), (-0.8356262, -0.3742117, -0.40211257), (-0.67768997, 0.100198515, 0.7284892), (-0.8356262, -0.3742117, -0.40211257), (-0.7347549, -0.08040601, -0.67355037), (-0.6177159, 0.5331137, 0.5781149), (-0.7073123, 0.6630115, 0.24520424), (-0.696605, -0.68340486, -0.21840157), (-0.6177159, 0.5331137, 0.5781149), (-0.696605, -0.68340486, -0.21840157), (-0.8356262, -0.3742117, -0.40211257), (0.64960027, -0.75730026, -0.06720002), (0.5258084, -0.7931127, -0.3074049), (0.8110056, 0.54700375, 0.20750143), (0.64960027, -0.75730026, -0.06720002), (0.8110056, 0.54700375, 0.20750143), (0.77003187, 0.6347263, 0.06460267), (0.6121852, -0.60418534, 0.5100876), (0.64960027, -0.75730026, -0.06720002), (0.77003187, 0.6347263, 0.06460267), (0.6121852, -0.60418534, 0.5100876), (0.77003187, 0.6347263, 0.06460267), (0.8434546, 0.41032654, -0.34672245), (0.6688283, -0.13350564, 0.73133093), (0.6121852, -0.60418534, 0.5100876), (0.8434546, 0.41032654, -0.34672245), (0.6688283, -0.13350564, 0.73133093), (0.8434546, 0.41032654, -0.34672245), (0.7457023, 0.10840034, -0.65740204), (0.67768997, 0.100198515, 0.7284892), (0.6688283, -0.13350564, 0.73133093), (0.7457023, 0.10840034, -0.65740204), (0.67768997, 0.100198515, 0.7284892), (0.7457023, 0.10840034, -0.65740204), (0.7347549, -0.08040601, -0.67355037), (0.6177159, 0.5331137, 0.5781149), (0.67768997, 0.100198515, 0.7284892), (0.7347549, -0.08040601, -0.67355037), (0.6177159, 0.5331137, 0.5781149), (0.7347549, -0.08040601, -0.67355037), (0.8356262, -0.3742117, -0.40211257), (0.7073123, 0.6630115, 0.24520424), (0.6177159, 0.5331137, 0.5781149), (0.8356262, -0.3742117, -0.40211257), (0.7073123, 0.6630115, 0.24520424), (0.8356262, -0.3742117, -0.40211257), (0.696605, -0.68340486, -0.21840157), (-0.5258084, -0.7931127, -0.3074049), (-0.64960027, -0.75730026, -0.06720002), (-0.7700726, 0.6346774, 0.064597696), (-0.5258084, -0.7931127, -0.3074049), (-0.7700726, 0.6346774, 0.064597696), (-0.8110056, 0.54700375, 0.20750143), (0.6121852, -0.60418534, 0.5100876), (-0.6121852, -0.60418534, 0.5100876), (-0.64960027, -0.75730026, -0.06720002), (0.6121852, -0.60418534, 0.5100876), (-0.64960027, -0.75730026, -0.06720002), (0.64960027, -0.75730026, -0.06720002), (0.7073123, 0.6630115, 0.24520424), (-0.7073123, 0.6630115, 0.24520424), (-0.6177159, 0.5331137, 0.5781149), (0.7073123, 0.6630115, 0.24520424), (-0.6177159, 0.5331137, 0.5781149), (0.6177159, 0.5331137, 0.5781149), (0.6688283, -0.13350564, 0.73133093), (-0.6688283, -0.13350564, 0.73133093), (-0.6121852, -0.60418534, 0.5100876), (0.6688283, -0.13350564, 0.73133093), (-0.6121852, -0.60418534, 0.5100876), (0.6121852, -0.60418534, 0.5100876), (0.67768997, 0.100198515, 0.7284892), (-0.67768997, 0.100198515, 0.7284892), (-0.6688283, -0.13350564, 0.73133093), (0.67768997, 0.100198515, 0.7284892), (-0.6688283, -0.13350564, 0.73133093), (0.6688283, -0.13350564, 0.73133093), (0.64960027, -0.75730026, -0.06720002), (-0.64960027, -0.75730026, -0.06720002), (-0.5258084, -0.7931127, -0.3074049), (0.64960027, -0.75730026, -0.06720002), (-0.5258084, -0.7931127, -0.3074049), (0.5258084, -0.7931127, -0.3074049), (0.6177159, 0.5331137, 0.5781149), (-0.6177159, 0.5331137, 0.5781149), (-0.67768997, 0.100198515, 0.7284892), (0.6177159, 0.5331137, 0.5781149), (-0.67768997, 0.100198515, 0.7284892), (0.67768997, 0.100198515, 0.7284892), (0.8434546, 0.41032654, -0.34672245), (0.7700726, 0.6346774, 0.064597696), (-0.77003187, 0.6347263, 0.06460267), (0.8434546, 0.41032654, -0.34672245), (-0.77003187, 0.6347263, 0.06460267), (-0.8434546, 0.41032654, -0.34672245), (0.696605, -0.68340486, -0.21840157), (0.8356262, -0.3742117, -0.40211257), (-0.8356262, -0.3742117, -0.40211257), (0.696605, -0.68340486, -0.21840157), (-0.8356262, -0.3742117, -0.40211257), (-0.696605, -0.68340486, -0.21840157), (0.7457023, 0.10840034, -0.65740204), (0.8434546, 0.41032654, -0.34672245), (-0.8434546, 0.41032654, -0.34672245), (0.7457023, 0.10840034, -0.65740204), (-0.8434546, 0.41032654, -0.34672245), (-0.7457023, 0.10840034, -0.65740204), (0.7347549, -0.08040601, -0.67355037), (0.7457023, 0.10840034, -0.65740204), (-0.7457023, 0.10840034, -0.65740204), (0.7347549, -0.08040601, -0.67355037), (-0.7457023, 0.10840034, -0.65740204), (-0.7347549, -0.08040601, -0.67355037), (0.7700726, 0.6346774, 0.064597696), (0.8110056, 0.54700375, 0.20750143), (-0.8110056, 0.54700375, 0.20750143), (0.7700726, 0.6346774, 0.064597696), (-0.8110056, 0.54700375, 0.20750143), (-0.77003187, 0.6347263, 0.06460267), (0.8356262, -0.3742117, -0.40211257), (0.7347549, -0.08040601, -0.67355037), (-0.7347549, -0.08040601, -0.67355037), (0.8356262, -0.3742117, -0.40211257), (-0.7347549, -0.08040601, -0.67355037), (-0.8356262, -0.3742117, -0.40211257), (0.64960027, -0.75730026, -0.06720002), (0.7700726, 0.6346774, 0.064597696), (0.8434546, 0.41032654, -0.34672245), (0.64960027, -0.75730026, -0.06720002), (0.8434546, 0.41032654, -0.34672245), (0.6121852, -0.60418534, 0.5100876), (0.6121852, -0.60418534, 0.5100876), (0.8434546, 0.41032654, -0.34672245), (0.7457023, 0.10840034, -0.65740204), (0.6121852, -0.60418534, 0.5100876), (0.7457023, 0.10840034, -0.65740204), (0.6688283, -0.13350564, 0.73133093), (0.6688283, -0.13350564, 0.73133093), (0.7457023, 0.10840034, -0.65740204), (0.7347549, -0.08040601, -0.67355037), (0.6688283, -0.13350564, 0.73133093), (0.7347549, -0.08040601, -0.67355037), (0.67768997, 0.100198515, 0.7284892), (0.67768997, 0.100198515, 0.7284892), (0.7347549, -0.08040601, -0.67355037), (0.8356262, -0.3742117, -0.40211257), (0.67768997, 0.100198515, 0.7284892), (0.8356262, -0.3742117, -0.40211257), (0.6177159, 0.5331137, 0.5781149), (0.6177159, 0.5331137, 0.5781149), (0.8356262, -0.3742117, -0.40211257), (0.696605, -0.68340486, -0.21840157), (0.6177159, 0.5331137, 0.5781149), (0.696605, -0.68340486, -0.21840157), (0.7073123, 0.6630115, 0.24520424), (-0.64960027, -0.75730026, -0.06720002), (-0.77003187, 0.6347263, 0.06460267), (-0.8110056, 0.54700375, 0.20750143), (-0.64960027, -0.75730026, -0.06720002), (-0.8110056, 0.54700375, 0.20750143), (-0.5258084, -0.7931127, -0.3074049), (-0.6121852, -0.60418534, 0.5100876), (-0.8434546, 0.41032654, -0.34672245), (-0.77003187, 0.6347263, 0.06460267), (-0.6121852, -0.60418534, 0.5100876), (-0.77003187, 0.6347263, 0.06460267), (-0.64960027, -0.75730026, -0.06720002), (-0.6688283, -0.13350564, 0.73133093), (-0.7457023, 0.10840034, -0.65740204), (-0.8434546, 0.41032654, -0.34672245), (-0.6688283, -0.13350564, 0.73133093), (-0.8434546, 0.41032654, -0.34672245), (-0.6121852, -0.60418534, 0.5100876), (-0.67768997, 0.100198515, 0.7284892), (-0.7347549, -0.08040601, -0.67355037), (-0.7457023, 0.10840034, -0.65740204), (-0.67768997, 0.100198515, 0.7284892), (-0.7457023, 0.10840034, -0.65740204), (-0.6688283, -0.13350564, 0.73133093), (-0.6177159, 0.5331137, 0.5781149), (-0.8356262, -0.3742117, -0.40211257), (-0.7347549, -0.08040601, -0.67355037), (-0.6177159, 0.5331137, 0.5781149), (-0.7347549, -0.08040601, -0.67355037), (-0.67768997, 0.100198515, 0.7284892), (-0.7073123, 0.6630115, 0.24520424), (-0.696605, -0.68340486, -0.21840157), (-0.8356262, -0.3742117, -0.40211257), (-0.7073123, 0.6630115, 0.24520424), (-0.8356262, -0.3742117, -0.40211257), (-0.6177159, 0.5331137, 0.5781149), (0.5258084, -0.7931127, -0.3074049), (0.8110056, 0.54700375, 0.20750143), (0.7700726, 0.6346774, 0.064597696), (0.5258084, -0.7931127, -0.3074049), (0.7700726, 0.6346774, 0.064597696), (0.64960027, -0.75730026, -0.06720002), (-0.1667041, 0.5272129, -0.8332204), (-0.15740657, 0.8836369, 0.44091842), (0.15740657, 0.8836369, 0.44091842), (-0.1667041, 0.5272129, -0.8332204), (0.15740657, 0.8836369, 0.44091842), (0.1667041, 0.5272129, -0.8332204), (0.1667041, 0.5272129, -0.8332204), (0.15740657, 0.8836369, 0.44091842), (0.7621022, 0.42470124, 0.48870143), (0.1667041, 0.5272129, -0.8332204), (0.7621022, 0.42470124, 0.48870143), (0.77190113, 0.11850018, -0.62460095), (-0.15740657, 0.8836369, 0.44091842), (-0.1667041, 0.5272129, -0.8332204), (-0.77190113, 0.11850018, -0.62460095), (-0.15740657, 0.8836369, 0.44091842), (-0.77190113, 0.11850018, -0.62460095), (-0.7621022, 0.42470124, 0.48870143), (0.13350594, -0.8134362, -0.5661252), (-0.13350594, -0.8134362, -0.5661252), (-0.15000483, -0.41161323, 0.8989289), (0.13350594, -0.8134362, -0.5661252), (-0.15000483, -0.41161323, 0.8989289), (0.15000483, -0.41161323, 0.8989289), (-0.13350594, -0.8134362, -0.5661252), (0.28299832, -0.89399475, -0.34739798), (0.27362275, -0.58384854, 0.76436347), (-0.13350594, -0.8134362, -0.5661252), (0.27362275, -0.58384854, 0.76436347), (-0.15000483, -0.41161323, 0.8989289), (0.15000483, -0.41161323, 0.8989289), (-0.27362275, -0.58384854, 0.76436347), (-0.28299832, -0.89399475, -0.34739798), (0.15000483, -0.41161323, 0.8989289), (-0.28299832, -0.89399475, -0.34739798), (0.13350594, -0.8134362, -0.5661252), (-0.1667041, 0.5272129, -0.8332204), (0.1667041, 0.5272129, -0.8332204), (-0.13350594, -0.8134362, -0.5661252), (-0.1667041, 0.5272129, -0.8332204), (-0.13350594, -0.8134362, -0.5661252), (0.13350594, -0.8134362, -0.5661252), (0.15740657, 0.8836369, 0.44091842), (-0.15740657, 0.8836369, 0.44091842), (0.15000483, -0.41161323, 0.8989289), (0.15740657, 0.8836369, 0.44091842), (0.15000483, -0.41161323, 0.8989289), (-0.15000483, -0.41161323, 0.8989289), (-0.7621022, 0.42470124, 0.48870143), (-0.77190113, 0.11850018, -0.62460095), (-0.28299832, -0.89399475, -0.34739798), (-0.7621022, 0.42470124, 0.48870143), (-0.28299832, -0.89399475, -0.34739798), (-0.27362275, -0.58384854, 0.76436347), (0.77190113, 0.11850018, -0.62460095), (0.7621022, 0.42470124, 0.48870143), (0.27362275, -0.58384854, 0.76436347), (0.77190113, 0.11850018, -0.62460095), (0.27362275, -0.58384854, 0.76436347), (0.28299832, -0.89399475, -0.34739798), (0.1667041, 0.5272129, -0.8332204), (0.77190113, 0.11850018, -0.62460095), (0.28299832, -0.89399475, -0.34739798), (0.1667041, 0.5272129, -0.8332204), (0.28299832, -0.89399475, -0.34739798), (-0.13350594, -0.8134362, -0.5661252), (0.7621022, 0.42470124, 0.48870143), (0.15740657, 0.8836369, 0.44091842), (-0.15000483, -0.41161323, 0.8989289), (0.7621022, 0.42470124, 0.48870143), (-0.15000483, -0.41161323, 0.8989289), (0.27362275, -0.58384854, 0.76436347), (-0.15740657, 0.8836369, 0.44091842), (-0.7621022, 0.42470124, 0.48870143), (-0.27362275, -0.58384854, 0.76436347), (-0.15740657, 0.8836369, 0.44091842), (-0.27362275, -0.58384854, 0.76436347), (0.15000483, -0.41161323, 0.8989289), (-0.77190113, 0.11850018, -0.62460095), (-0.1667041, 0.5272129, -0.8332204), (0.13350594, -0.8134362, -0.5661252), (-0.77190113, 0.11850018, -0.62460095), (0.13350594, -0.8134362, -0.5661252), (-0.28299832, -0.89399475, -0.34739798)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(0.218788, -0.181953, 0.408406), (0.218788, -0.177832, 0.415921), (0.127527, -0.177827, 0.415928), (0.218788, -0.181953, 0.408406), (0.127527, -0.177827, 0.415928), (0.127526, -0.181948, 0.408412), (0.218788, -0.175456, 0.404843), (0.218788, -0.181953, 0.408406), (0.127526, -0.181948, 0.408412), (0.218788, -0.175456, 0.404843), (0.127526, -0.181948, 0.408412), (0.127526, -0.175451, 0.40485), (0.218788, -0.171335, 0.412359), (0.218788, -0.175456, 0.404843), (0.127526, -0.175451, 0.40485), (0.218788, -0.171335, 0.412359), (0.127526, -0.175451, 0.40485), (0.127527, -0.17133, 0.412366), (0.218788, -0.177832, 0.415921), (0.218788, -0.171335, 0.412359), (0.127527, -0.17133, 0.412366), (0.218788, -0.177832, 0.415921), (0.127527, -0.17133, 0.412366), (0.127527, -0.177827, 0.415928), (0.206828, -0.194712, 0.404669), (0.206847, -0.194712, 0.416709), (0.206852, -0.161767, 0.41671), (0.206828, -0.194712, 0.404669), (0.206852, -0.161767, 0.41671), (0.206833, -0.161767, 0.404669), (0.206833, -0.161767, 0.404669), (0.206852, -0.161767, 0.41671), (0.292767, -0.155455, 0.416575), (0.206833, -0.161767, 0.404669), (0.292767, -0.155455, 0.416575), (0.292748, -0.155455, 0.404534), (0.292748, -0.155455, 0.404534), (0.292767, -0.155455, 0.416575), (0.29276, -0.201049, 0.416574), (0.292748, -0.155455, 0.404534), (0.29276, -0.201049, 0.416574), (0.292741, -0.201049, 0.404534), (0.292741, -0.201049, 0.404534), (0.29276, -0.201049, 0.416574), (0.206847, -0.194712, 0.416709), (0.292741, -0.201049, 0.404534), (0.206847, -0.194712, 0.416709), (0.206828, -0.194712, 0.404669), (0.206833, -0.161767, 0.404669), (0.292748, -0.155455, 0.404534), (0.292741, -0.201049, 0.404534), (0.206833, -0.161767, 0.404669), (0.292741, -0.201049, 0.404534), (0.206828, -0.194712, 0.404669), (0.206847, -0.194712, 0.416709), (0.29276, -0.201049, 0.416574), (0.292767, -0.155455, 0.416575), (0.206847, -0.194712, 0.416709), (0.292767, -0.155455, 0.416575), (0.206852, -0.161767, 0.41671), (-0.028609, -0.16054, 0.425489), (-0.028609, -0.074916, 0.425489), (-0.028609, 0.029147, 0.370429), (-0.028609, -0.16054, 0.425489), (-0.028609, 0.029147, 0.370429), (-0.028609, 0.029147, 0.318057), (-0.028609, 0.029147, 0.318057), (-0.028609, 0.029147, 0.370429), (0.028609, 0.029147, 0.370429), (-0.028609, 0.029147, 0.318057), (0.028609, 0.029147, 0.370429), (0.028609, 0.029147, 0.318057), (0.028609, 0.029147, 0.318057), (0.028609, 0.029147, 0.370429), (0.028609, -0.074916, 0.425489), (0.028609, 0.029147, 0.318057), (0.028609, -0.074916, 0.425489), (0.028609, -0.16054, 0.425489), (-0.028609, 0.029147, 0.318057), (0.028609, 0.029147, 0.318057), (0.028609, -0.16054, 0.425489), (-0.028609, 0.029147, 0.318057), (0.028609, -0.16054, 0.425489), (-0.028609, -0.16054, 0.425489), (0.028609, 0.029147, 0.370429), (-0.028609, 0.029147, 0.370429), (-0.028609, -0.074916, 0.425489), (0.028609, 0.029147, 0.370429), (-0.028609, -0.074916, 0.425489), (0.028609, -0.074916, 0.425489), (0.2325, 0.158306, 0.472849), (-0.2325, 0.158306, 0.472849), (-0.2325, -0.341694, 0.472849), (0.2325, 0.158306, 0.472849), (-0.2325, -0.341694, 0.472849), (0.2325, -0.341694, 0.472849), (-0.2325, 0.158306, 0.472849), (0.2325, 0.158306, 0.472849), (0.2325, 0.216554, 0.550513), (-0.2325, 0.158306, 0.472849), (0.2325, 0.216554, 0.550513), (-0.2325, 0.216554, 0.550513), (-0.2325, 0.216554, 0.550513), (0.2325, 0.216554, 0.550513), (0.2325, 0.177722, 0.654874), (-0.2325, 0.216554, 0.550513), (0.2325, 0.177722, 0.654874), (-0.2325, 0.177722, 0.654874), (0.2325, 0.177722, 0.654874), (0.2325, 0.344596, 1.24786), (-0.2325, 0.344596, 1.24786), (0.2325, 0.177722, 0.654874), (-0.2325, 0.344596, 1.24786), (-0.2325, 0.177722, 0.654874), (0.2325, 0.16725, 0.454961), (0.2325, -0.341694, 0.452849), (-0.2325, -0.341694, 0.452849), (0.2325, 0.16725, 0.454961), (-0.2325, -0.341694, 0.452849), (-0.2325, 0.16725, 0.454961), (-0.2325, 0.16725, 0.454961), (-0.2325, 0.236348, 0.54765), (0.2325, 0.236348, 0.54765), (-0.2325, 0.16725, 0.454961), (0.2325, 0.236348, 0.54765), (0.2325, 0.16725, 0.454961), (-0.2325, 0.236348, 0.54765), (-0.2325, 0.197706, 0.655684), (0.2325, 0.197706, 0.655684), (-0.2325, 0.236348, 0.54765), (0.2325, 0.197706, 0.655684), (0.2325, 0.236348, 0.54765), (0.2325, 0.197706, 0.655684), (-0.2325, 0.197706, 0.655684), (-0.2325, 0.363843, 1.242426), (0.2325, 0.197706, 0.655684), (-0.2325, 0.363843, 1.242426), (0.2325, 0.363843, 1.242426), (-0.2325, -0.341694, 0.472849), (-0.2325, 0.158306, 0.472849), (-0.2325, 0.16725, 0.454961), (-0.2325, -0.341694, 0.472849), (-0.2325, 0.16725, 0.454961), (-0.2325, -0.341694, 0.452849), (0.2325, 0.158306, 0.472849), (0.2325, -0.341694, 0.472849), (0.2325, -0.341694, 0.452849), (0.2325, 0.158306, 0.472849), (0.2325, -0.341694, 0.452849), (0.2325, 0.16725, 0.454961), (0.2325, -0.341694, 0.472849), (-0.2325, -0.341694, 0.472849), (-0.2325, -0.341694, 0.452849), (0.2325, -0.341694, 0.472849), (-0.2325, -0.341694, 0.452849), (0.2325, -0.341694, 0.452849), (-0.2325, 0.158306, 0.472849), (-0.2325, 0.216554, 0.550513), (-0.2325, 0.236348, 0.54765), (-0.2325, 0.158306, 0.472849), (-0.2325, 0.236348, 0.54765), (-0.2325, 0.16725, 0.454961), (0.2325, 0.216554, 0.550513), (0.2325, 0.158306, 0.472849), (0.2325, 0.16725, 0.454961), (0.2325, 0.216554, 0.550513), (0.2325, 0.16725, 0.454961), (0.2325, 0.236348, 0.54765), (-0.2325, 0.216554, 0.550513), (-0.2325, 0.177722, 0.654874), (-0.2325, 0.197706, 0.655684), (-0.2325, 0.216554, 0.550513), (-0.2325, 0.197706, 0.655684), (-0.2325, 0.236348, 0.54765), (0.2325, 0.177722, 0.654874), (0.2325, 0.216554, 0.550513), (0.2325, 0.236348, 0.54765), (0.2325, 0.177722, 0.654874), (0.2325, 0.236348, 0.54765), (0.2325, 0.197706, 0.655684), (-0.2325, 0.344596, 1.24786), (0.2325, 0.344596, 1.24786), (0.2325, 0.363843, 1.242426), (-0.2325, 0.344596, 1.24786), (0.2325, 0.363843, 1.242426), (-0.2325, 0.363843, 1.242426), (-0.2325, 0.177722, 0.654874), (-0.2325, 0.344596, 1.24786), (-0.2325, 0.363843, 1.242426), (-0.2325, 0.177722, 0.654874), (-0.2325, 0.363843, 1.242426), (-0.2325, 0.197706, 0.655684), (0.2325, 0.344596, 1.24786), (0.2325, 0.177722, 0.654874), (0.2325, 0.197706, 0.655684), (0.2325, 0.344596, 1.24786), (0.2325, 0.197706, 0.655684), (0.2325, 0.363843, 1.242426), (0.133094, -0.033774, 0.425814), (0.133094, 0.01027, 0.469564), (0.133094, -0.221754, 0.469564), (0.133094, -0.033774, 0.425814), (0.133094, -0.221754, 0.469564), (0.133094, -0.206004, 0.383276), (0.133094, -0.206004, 0.383276), (0.133094, -0.221754, 0.469564), (-0.133094, -0.221754, 0.469564), (0.133094, -0.206004, 0.383276), (-0.133094, -0.221754, 0.469564), (-0.133094, -0.206004, 0.383276), (-0.133094, -0.206004, 0.383276), (-0.133094, -0.221754, 0.469564), (-0.133094, 0.01027, 0.469564), (-0.133094, -0.206004, 0.383276), (-0.133094, 0.01027, 0.469564), (-0.133094, -0.033774, 0.425814), (-0.133094, -0.033774, 0.425814), (-0.133094, 0.01027, 0.469564), (0.133094, 0.01027, 0.469564), (-0.133094, -0.033774, 0.425814), (0.133094, 0.01027, 0.469564), (0.133094, -0.033774, 0.425814), (0.133094, -0.206004, 0.383276), (-0.133094, -0.206004, 0.383276), (-0.133094, -0.033774, 0.425814), (0.133094, -0.206004, 0.383276), (-0.133094, -0.033774, 0.425814), (0.133094, -0.033774, 0.425814), (0.049674, 0.029148, 0.136113), (0.204902, 0.254702, 0.122232), (0.18109, 0.271972, 0.122232), (0.049674, 0.029148, 0.136113), (0.18109, 0.271972, 0.122232), (0.013633, 0.055337, 0.136113), (-0.014514, 0.055335, 0.136113), (-0.181112, 0.271973, 0.122232), (-0.204905, 0.254679, 0.122232), (-0.014514, 0.055335, 0.136113), (-0.204905, 0.254679, 0.122232), (-0.050556, 0.02915, 0.136113), (0.044603, -0.039989, 0.136113), (0.307755, -0.117778, 0.122231), (0.316836, -0.089798, 0.122231), (0.044603, -0.039989, 0.136113), (0.316836, -0.089798, 0.122231), (0.058372, 0.002382, 0.136113), (-0.022717, -0.056533, 0.136113), (-0.014719, -0.330679, 0.122231), (0.014698, -0.330697, 0.122231), (-0.022717, -0.056533, 0.136113), (0.014698, -0.330697, 0.122231), (0.021835, -0.056531, 0.136113), (-0.059255, 0.002381, 0.136113), (-0.31683, -0.089791, 0.122232), (-0.307761, -0.117772, 0.122232), (-0.059255, 0.002381, 0.136113), (-0.307761, -0.117772, 0.122232), (-0.045485, -0.039989, 0.136113), (-0.050556, 0.02915, 0.136113), (-0.059255, 0.002381, 0.136113), (-0.00044, -0.001931, 0.136204), (0.044603, -0.039989, 0.136113), (0.058372, 0.002382, 0.136113), (-0.00044, -0.001931, 0.136204), (0.021835, -0.056531, 0.136113), (0.044603, -0.039989, 0.136113), (-0.00044, -0.001931, 0.136204), (0.013633, 0.055337, 0.136113), (-0.014514, 0.055335, 0.136113), (-0.00044, -0.001931, 0.136204), (-0.014514, 0.055335, 0.136113), (-0.050556, 0.02915, 0.136113), (-0.00044, -0.001931, 0.136204), (-0.045485, -0.039989, 0.136113), (-0.022717, -0.056533, 0.136113), (-0.00044, -0.001931, 0.136204), (-0.059255, 0.002381, 0.136113), (-0.045485, -0.039989, 0.136113), (-0.00044, -0.001931, 0.136204), (0.049674, 0.029148, 0.136113), (0.013633, 0.055337, 0.136113), (-0.00044, -0.001931, 0.136204), (0.058372, 0.002382, 0.136113), (0.049674, 0.029148, 0.136113), (-0.00044, -0.001931, 0.136204), (-0.022717, -0.056533, 0.136113), (0.021835, -0.056531, 0.136113), (-0.00044, -0.001931, 0.136204), (-0.022717, -0.056533, 0.136113), (-0.02341, -0.055422, 0.09924), (-0.014897, -0.300268, 0.085336), (-0.022717, -0.056533, 0.136113), (-0.014897, -0.300268, 0.085336), (-0.014719, -0.330679, 0.122231), (-0.204905, 0.254679, 0.122232), (-0.187173, 0.22997, 0.085337), (-0.050463, 0.027837, 0.09924), (-0.204905, 0.254679, 0.122232), (-0.050463, 0.027837, 0.09924), (-0.050556, 0.02915, 0.136113), (-0.014897, -0.300268, 0.085336), (-0.016286, -0.328057, 0.065892), (-0.017084, -0.383461, 0.067102), (-0.014897, -0.300268, 0.085336), (-0.017084, -0.383461, 0.067102), (-0.014719, -0.330679, 0.122231), (0.013633, 0.055337, 0.136113), (0.012417, 0.054845, 0.09924), (-0.013293, 0.05484, 0.09924), (0.013633, 0.055337, 0.136113), (-0.013293, 0.05484, 0.09924), (-0.014514, 0.055335, 0.136113), (-0.014514, 0.055335, 0.136113), (-0.013293, 0.05484, 0.09924), (-0.163092, 0.247472, 0.085337), (-0.014514, 0.055335, 0.136113), (-0.163092, 0.247472, 0.085337), (-0.181112, 0.271973, 0.122232), (-0.307761, -0.117772, 0.122232), (-0.278782, -0.108545, 0.085337), (-0.044206, -0.040305, 0.09924), (-0.307761, -0.117772, 0.122232), (-0.044206, -0.040305, 0.09924), (-0.045485, -0.039989, 0.136113), (0.058372, 0.002382, 0.136113), (0.057529, 0.003385, 0.09924), (0.04958, 0.027834, 0.099239), (0.058372, 0.002382, 0.136113), (0.04958, 0.027834, 0.099239), (0.049674, 0.029148, 0.136113), (0.204902, 0.254702, 0.122232), (0.237839, 0.296016, 0.067102), (0.2102, 0.316063, 0.067102), (0.204902, 0.254702, 0.122232), (0.2102, 0.316063, 0.067102), (0.18109, 0.271972, 0.122232), (-0.059255, 0.002381, 0.136113), (-0.05841, 0.003386, 0.09924), (-0.28796, -0.080224, 0.085337), (-0.059255, 0.002381, 0.136113), (-0.28796, -0.080224, 0.085337), (-0.31683, -0.089791, 0.122232), (0.021835, -0.056531, 0.136113), (0.02253, -0.055416, 0.099239), (0.04333, -0.040305, 0.099239), (0.021835, -0.056531, 0.136113), (0.04333, -0.040305, 0.099239), (0.044603, -0.039989, 0.136113), (0.316836, -0.089798, 0.122231), (0.28797, -0.080231, 0.085336), (0.057529, 0.003385, 0.09924), (0.316836, -0.089798, 0.122231), (0.057529, 0.003385, 0.09924), (0.058372, 0.002382, 0.136113), (-0.045485, -0.039989, 0.136113), (-0.044206, -0.040305, 0.09924), (-0.02341, -0.055422, 0.09924), (-0.045485, -0.039989, 0.136113), (-0.02341, -0.055422, 0.09924), (-0.022717, -0.056533, 0.136113), (0.044603, -0.039989, 0.136113), (0.04333, -0.040305, 0.099239), (0.278779, -0.108552, 0.085336), (0.044603, -0.039989, 0.136113), (0.278779, -0.108552, 0.085336), (0.307755, -0.117778, 0.122231), (0.18109, 0.271972, 0.122232), (0.163071, 0.247472, 0.085336), (0.012417, 0.054845, 0.09924), (0.18109, 0.271972, 0.122232), (0.012417, 0.054845, 0.09924), (0.013633, 0.055337, 0.136113), (-0.050556, 0.02915, 0.136113), (-0.050463, 0.027837, 0.09924), (-0.05841, 0.003386, 0.09924), (-0.050556, 0.02915, 0.136113), (-0.05841, 0.003386, 0.09924), (-0.059255, 0.002381, 0.136113), (0.278779, -0.108552, 0.085336), (0.304781, -0.11846, 0.065892), (0.357225, -0.136338, 0.067102), (0.278779, -0.108552, 0.085336), (0.357225, -0.136338, 0.067102), (0.307755, -0.117778, 0.122231), (0.049674, 0.029148, 0.136113), (0.04958, 0.027834, 0.099239), (0.187172, 0.229994, 0.085337), (0.049674, 0.029148, 0.136113), (0.187172, 0.229994, 0.085337), (0.204902, 0.254702, 0.122232), (0.014698, -0.330697, 0.122231), (0.014877, -0.300288, 0.085337), (0.02253, -0.055416, 0.099239), (0.014698, -0.330697, 0.122231), (0.02253, -0.055416, 0.099239), (0.021835, -0.056531, 0.136113), (0.307755, -0.117778, 0.122231), (0.357225, -0.136338, 0.067102), (0.367766, -0.10386, 0.067102), (0.307755, -0.117778, 0.122231), (0.367766, -0.10386, 0.067102), (0.316836, -0.089798, 0.122231), (-0.163092, 0.247472, 0.085337), (-0.178302, 0.27077, 0.065893), (-0.210224, 0.316063, 0.067103), (-0.163092, 0.247472, 0.085337), (-0.210224, 0.316063, 0.067103), (-0.181112, 0.271973, 0.122232), (-0.014719, -0.330679, 0.122231), (-0.017084, -0.383461, 0.067102), (0.017061, -0.383482, 0.067102), (-0.014719, -0.330679, 0.122231), (0.017061, -0.383482, 0.067102), (0.014698, -0.330697, 0.122231), (0.18109, 0.271972, 0.122232), (0.2102, 0.316063, 0.067102), (0.17828, 0.270769, 0.065892), (0.18109, 0.271972, 0.122232), (0.17828, 0.270769, 0.065892), (0.163071, 0.247472, 0.085336), (-0.181112, 0.271973, 0.122232), (-0.210224, 0.316063, 0.067103), (-0.237842, 0.29599, 0.067102), (-0.181112, 0.271973, 0.122232), (-0.237842, 0.29599, 0.067102), (-0.204905, 0.254679, 0.122232), (-0.204905, 0.254679, 0.122232), (-0.237842, 0.29599, 0.067102), (-0.204629, 0.251634, 0.065893), (-0.204905, 0.254679, 0.122232), (-0.204629, 0.251634, 0.065893), (-0.187173, 0.22997, 0.085337), (0.187172, 0.229994, 0.085337), (0.204629, 0.251661, 0.065893), (0.237839, 0.296016, 0.067102), (0.187172, 0.229994, 0.085337), (0.237839, 0.296016, 0.067102), (0.204902, 0.254702, 0.122232), (-0.31683, -0.089791, 0.122232), (-0.367758, -0.103851, 0.067102), (-0.357231, -0.13633, 0.067102), (-0.31683, -0.089791, 0.122232), (-0.357231, -0.13633, 0.067102), (-0.307761, -0.117772, 0.122232), (-0.307761, -0.117772, 0.122232), (-0.357231, -0.13633, 0.067102), (-0.304783, -0.118452, 0.065893), (-0.307761, -0.117772, 0.122232), (-0.304783, -0.118452, 0.065893), (-0.278782, -0.108545, 0.085337), (0.014698, -0.330697, 0.122231), (0.017061, -0.383482, 0.067102), (0.016265, -0.328078, 0.065893), (0.014698, -0.330697, 0.122231), (0.016265, -0.328078, 0.065893), (0.014877, -0.300288, 0.085337), (0.316836, -0.089798, 0.122231), (0.367766, -0.10386, 0.067102), (0.314829, -0.087498, 0.065892), (0.316836, -0.089798, 0.122231), (0.314829, -0.087498, 0.065892), (0.28797, -0.080231, 0.085336), (-0.28796, -0.080224, 0.085337), (-0.314817, -0.08749, 0.065893), (-0.367758, -0.103851, 0.067102), (-0.28796, -0.080224, 0.085337), (-0.367758, -0.103851, 0.067102), (-0.31683, -0.089791, 0.122232), (-0.230487, 0.256306, 0.030746), (-0.230487, 0.256306, 0.066726), (-0.230487, 0.290525, 0.041865), (-0.178505, 0.256306, 0.030746), (-0.178505, 0.290525, 0.041865), (-0.178505, 0.256306, 0.066726), (-0.230487, 0.256306, 0.066726), (-0.178505, 0.256306, 0.066726), (-0.178505, 0.290525, 0.041865), (-0.230487, 0.256306, 0.066726), (-0.178505, 0.290525, 0.041865), (-0.230487, 0.290525, 0.041865), (-0.230487, 0.256306, 0.030746), (-0.230487, 0.290525, 0.041865), (-0.230487, 0.277454, 0.001638), (-0.178505, 0.256306, 0.030746), (-0.178505, 0.277454, 0.001638), (-0.178505, 0.290525, 0.041865), (-0.230487, 0.290525, 0.041865), (-0.178505, 0.290525, 0.041865), (-0.178505, 0.277454, 0.001638), (-0.230487, 0.290525, 0.041865), (-0.178505, 0.277454, 0.001638), (-0.230487, 0.277454, 0.001638), (-0.230487, 0.256306, 0.030746), (-0.230487, 0.277454, 0.001638), (-0.230487, 0.235158, 0.001638), (-0.178505, 0.256306, 0.030746), (-0.178505, 0.235158, 0.001638), (-0.178505, 0.277454, 0.001638), (-0.230487, 0.277454, 0.001638), (-0.178505, 0.277454, 0.001638), (-0.178505, 0.235158, 0.001638), (-0.230487, 0.277454, 0.001638), (-0.178505, 0.235158, 0.001638), (-0.230487, 0.235158, 0.001638), (-0.230487, 0.256306, 0.030746), (-0.230487, 0.235158, 0.001638), (-0.230487, 0.222088, 0.041865), (-0.178505, 0.256306, 0.030746), (-0.178505, 0.222088, 0.041865), (-0.178505, 0.235158, 0.001638), (-0.230487, 0.235158, 0.001638), (-0.178505, 0.235158, 0.001638), (-0.178505, 0.222088, 0.041865), (-0.230487, 0.235158, 0.001638), (-0.178505, 0.222088, 0.041865), (-0.230487, 0.222088, 0.041865), (-0.230487, 0.256306, 0.030746), (-0.230487, 0.222088, 0.041865), (-0.230487, 0.256306, 0.066726), (-0.178505, 0.256306, 0.030746), (-0.178505, 0.256306, 0.066726), (-0.178505, 0.222088, 0.041865), (-0.230487, 0.222088, 0.041865), (-0.178505, 0.222088, 0.041865), (-0.178505, 0.256306, 0.066726), (-0.230487, 0.222088, 0.041865), (-0.178505, 0.256306, 0.066726), (-0.230487, 0.256306, 0.066726), (-0.362337, -0.108432, 0.030746), (-0.362337, -0.108432, 0.066726), (-0.362337, -0.074213, 0.041865), (-0.310354, -0.108432, 0.030746), (-0.310354, -0.074213, 0.041865), (-0.310354, -0.108432, 0.066726), (-0.362337, -0.108432, 0.066726), (-0.310354, -0.108432, 0.066726), (-0.310354, -0.074213, 0.041865), (-0.362337, -0.108432, 0.066726), (-0.310354, -0.074213, 0.041865), (-0.362337, -0.074213, 0.041865), (-0.362337, -0.108432, 0.030746), (-0.362337, -0.074213, 0.041865), (-0.362337, -0.087284, 0.001638), (-0.310354, -0.108432, 0.030746), (-0.310354, -0.087284, 0.001638), (-0.310354, -0.074213, 0.041865), (-0.362337, -0.074213, 0.041865), (-0.310354, -0.074213, 0.041865), (-0.310354, -0.087284, 0.001638), (-0.362337, -0.074213, 0.041865), (-0.310354, -0.087284, 0.001638), (-0.362337, -0.087284, 0.001638), (-0.362337, -0.108432, 0.030746), (-0.362337, -0.087284, 0.001638), (-0.362337, -0.12958, 0.001638), (-0.310354, -0.108432, 0.030746), (-0.310354, -0.12958, 0.001638), (-0.310354, -0.087284, 0.001638), (-0.362337, -0.087284, 0.001638), (-0.310354, -0.087284, 0.001638), (-0.310354, -0.12958, 0.001638), (-0.362337, -0.087284, 0.001638), (-0.310354, -0.12958, 0.001638), (-0.362337, -0.12958, 0.001638), (-0.362337, -0.108432, 0.030746), (-0.362337, -0.12958, 0.001638), (-0.362337, -0.14265, 0.041865), (-0.310354, -0.108432, 0.030746), (-0.310354, -0.14265, 0.041865), (-0.310354, -0.12958, 0.001638), (-0.362337, -0.12958, 0.001638), (-0.310354, -0.12958, 0.001638), (-0.310354, -0.14265, 0.041865), (-0.362337, -0.12958, 0.001638), (-0.310354, -0.14265, 0.041865), (-0.362337, -0.14265, 0.041865), (-0.362337, -0.108432, 0.030746), (-0.362337, -0.14265, 0.041865), (-0.362337, -0.108432, 0.066726), (-0.310354, -0.108432, 0.030746), (-0.310354, -0.108432, 0.066726), (-0.310354, -0.14265, 0.041865), (-0.362337, -0.14265, 0.041865), (-0.310354, -0.14265, 0.041865), (-0.310354, -0.108432, 0.066726), (-0.362337, -0.14265, 0.041865), (-0.310354, -0.108432, 0.066726), (-0.362337, -0.108432, 0.066726), (-0.027328, -0.35504, 0.030746), (-0.027328, -0.35504, 0.066726), (-0.027328, -0.320822, 0.041865), (0.024655, -0.35504, 0.030746), (0.024655, -0.320822, 0.041865), (0.024655, -0.35504, 0.066726), (-0.027328, -0.35504, 0.066726), (0.024655, -0.35504, 0.066726), (0.024655, -0.320822, 0.041865), (-0.027328, -0.35504, 0.066726), (0.024655, -0.320822, 0.041865), (-0.027328, -0.320822, 0.041865), (-0.027328, -0.35504, 0.030746), (-0.027328, -0.320822, 0.041865), (-0.027328, -0.333892, 0.001638), (0.024655, -0.35504, 0.030746), (0.024655, -0.333892, 0.001638), (0.024655, -0.320822, 0.041865), (-0.027328, -0.320822, 0.041865), (0.024655, -0.320822, 0.041865), (0.024655, -0.333892, 0.001638), (-0.027328, -0.320822, 0.041865), (0.024655, -0.333892, 0.001638), (-0.027328, -0.333892, 0.001638), (-0.027328, -0.35504, 0.030746), (-0.027328, -0.333892, 0.001638), (-0.027328, -0.376189, 0.001638), (0.024655, -0.35504, 0.030746), (0.024655, -0.376189, 0.001638), (0.024655, -0.333892, 0.001638), (-0.027328, -0.333892, 0.001638), (0.024655, -0.333892, 0.001638), (0.024655, -0.376189, 0.001638), (-0.027328, -0.333892, 0.001638), (0.024655, -0.376189, 0.001638), (-0.027328, -0.376189, 0.001638), (-0.027328, -0.35504, 0.030746), (-0.027328, -0.376189, 0.001638), (-0.027328, -0.389259, 0.041865), (0.024655, -0.35504, 0.030746), (0.024655, -0.389259, 0.041865), (0.024655, -0.376189, 0.001638), (-0.027328, -0.376189, 0.001638), (0.024655, -0.376189, 0.001638), (0.024655, -0.389259, 0.041865), (-0.027328, -0.376189, 0.001638), (0.024655, -0.389259, 0.041865), (-0.027328, -0.389259, 0.041865), (-0.027328, -0.35504, 0.030746), (-0.027328, -0.389259, 0.041865), (-0.027328, -0.35504, 0.066726), (0.024655, -0.35504, 0.030746), (0.024655, -0.35504, 0.066726), (0.024655, -0.389259, 0.041865), (-0.027328, -0.389259, 0.041865), (0.024655, -0.389259, 0.041865), (0.024655, -0.35504, 0.066726), (-0.027328, -0.389259, 0.041865), (0.024655, -0.35504, 0.066726), (-0.027328, -0.35504, 0.066726), (0.183338, 0.289674, 0.030746), (0.183338, 0.289674, 0.066726), (0.183338, 0.323892, 0.041865), (0.23532, 0.289674, 0.030746), (0.23532, 0.323892, 0.041865), (0.23532, 0.289674, 0.066726), (0.183338, 0.289674, 0.066726), (0.23532, 0.289674, 0.066726), (0.23532, 0.323892, 0.041865), (0.183338, 0.289674, 0.066726), (0.23532, 0.323892, 0.041865), (0.183338, 0.323892, 0.041865), (0.183338, 0.289674, 0.030746), (0.183338, 0.323892, 0.041865), (0.183338, 0.310822, 0.001638), (0.23532, 0.289674, 0.030746), (0.23532, 0.310822, 0.001638), (0.23532, 0.323892, 0.041865), (0.183338, 0.323892, 0.041865), (0.23532, 0.323892, 0.041865), (0.23532, 0.310822, 0.001638), (0.183338, 0.323892, 0.041865), (0.23532, 0.310822, 0.001638), (0.183338, 0.310822, 0.001638), (0.183338, 0.289674, 0.030746), (0.183338, 0.310822, 0.001638), (0.183338, 0.268526, 0.001638), (0.23532, 0.289674, 0.030746), (0.23532, 0.268526, 0.001638), (0.23532, 0.310822, 0.001638), (0.183338, 0.310822, 0.001638), (0.23532, 0.310822, 0.001638), (0.23532, 0.268526, 0.001638), (0.183338, 0.310822, 0.001638), (0.23532, 0.268526, 0.001638), (0.183338, 0.268526, 0.001638), (0.183338, 0.289674, 0.030746), (0.183338, 0.268526, 0.001638), (0.183338, 0.255455, 0.041865), (0.23532, 0.289674, 0.030746), (0.23532, 0.255455, 0.041865), (0.23532, 0.268526, 0.001638), (0.183338, 0.268526, 0.001638), (0.23532, 0.268526, 0.001638), (0.23532, 0.255455, 0.041865), (0.183338, 0.268526, 0.001638), (0.23532, 0.255455, 0.041865), (0.183338, 0.255455, 0.041865), (0.183338, 0.289674, 0.030746), (0.183338, 0.255455, 0.041865), (0.183338, 0.289674, 0.066726), (0.23532, 0.289674, 0.030746), (0.23532, 0.289674, 0.066726), (0.23532, 0.255455, 0.041865), (0.183338, 0.255455, 0.041865), (0.23532, 0.255455, 0.041865), (0.23532, 0.289674, 0.066726), (0.183338, 0.255455, 0.041865), (0.23532, 0.289674, 0.066726), (0.183338, 0.289674, 0.066726), (0.312249, -0.11143, 0.030746), (0.312249, -0.11143, 0.066726), (0.312249, -0.077211, 0.041865), (0.364231, -0.11143, 0.030746), (0.364231, -0.077211, 0.041865), (0.364231, -0.11143, 0.066726), (0.312249, -0.11143, 0.066726), (0.364231, -0.11143, 0.066726), (0.364231, -0.077211, 0.041865), (0.312249, -0.11143, 0.066726), (0.364231, -0.077211, 0.041865), (0.312249, -0.077211, 0.041865), (0.312249, -0.11143, 0.030746), (0.312249, -0.077211, 0.041865), (0.312249, -0.090282, 0.001638), (0.364231, -0.11143, 0.030746), (0.364231, -0.090282, 0.001638), (0.364231, -0.077211, 0.041865), (0.312249, -0.077211, 0.041865), (0.364231, -0.077211, 0.041865), (0.364231, -0.090282, 0.001638), (0.312249, -0.077211, 0.041865), (0.364231, -0.090282, 0.001638), (0.312249, -0.090282, 0.001638), (0.312249, -0.11143, 0.030746), (0.312249, -0.090282, 0.001638), (0.312249, -0.132578, 0.001638), (0.364231, -0.11143, 0.030746), (0.364231, -0.132578, 0.001638), (0.364231, -0.090282, 0.001638), (0.312249, -0.090282, 0.001638), (0.364231, -0.090282, 0.001638), (0.364231, -0.132578, 0.001638), (0.312249, -0.090282, 0.001638), (0.364231, -0.132578, 0.001638), (0.312249, -0.132578, 0.001638), (0.312249, -0.11143, 0.030746), (0.312249, -0.132578, 0.001638), (0.312249, -0.145648, 0.041865), (0.364231, -0.11143, 0.030746), (0.364231, -0.145648, 0.041865), (0.364231, -0.132578, 0.001638), (0.312249, -0.132578, 0.001638), (0.364231, -0.132578, 0.001638), (0.364231, -0.145648, 0.041865), (0.312249, -0.132578, 0.001638), (0.364231, -0.145648, 0.041865), (0.312249, -0.145648, 0.041865), (0.312249, -0.11143, 0.030746), (0.312249, -0.145648, 0.041865), (0.312249, -0.11143, 0.066726), (0.364231, -0.11143, 0.030746), (0.364231, -0.11143, 0.066726), (0.364231, -0.145648, 0.041865), (0.312249, -0.145648, 0.041865), (0.364231, -0.145648, 0.041865), (0.364231, -0.11143, 0.066726), (0.312249, -0.145648, 0.041865), (0.364231, -0.11143, 0.066726), (0.312249, -0.11143, 0.066726), (0, 0.036483, 0.133085), (-0, 0.024717, 0.353214), (0.021405, 0.012358, 0.353214), (0, 0.036483, 0.133085), (0.021405, 0.012358, 0.353214), (0.031595, 0.018241, 0.133085), (0.031595, 0.018241, 0.133085), (0.021405, 0.012358, 0.353214), (0.021405, -0.012358, 0.353214), (0.031595, 0.018241, 0.133085), (0.021405, -0.012358, 0.353214), (0.031595, -0.018241, 0.133085), (0.031595, -0.018241, 0.133085), (0.021405, -0.012358, 0.353214), (-0, -0.024717, 0.353214), (0.031595, -0.018241, 0.133085), (-0, -0.024717, 0.353214), (-0, -0.036483, 0.133085), (-0, -0.036483, 0.133085), (-0, -0.024717, 0.353214), (-0.021405, -0.012358, 0.353214), (-0, -0.036483, 0.133085), (-0.021405, -0.012358, 0.353214), (-0.031595, -0.018241, 0.133085), (-0.031595, -0.018241, 0.133085), (-0.021405, -0.012358, 0.353214), (-0.021405, 0.012358, 0.353214), (-0.031595, -0.018241, 0.133085), (-0.021405, 0.012358, 0.353214), (-0.031595, 0.018241, 0.133085), (-0.031595, 0.018241, 0.133085), (-0.021405, 0.012358, 0.353214), (-0, 0.024717, 0.353214), (-0.031595, 0.018241, 0.133085), (-0, 0.024717, 0.353214), (0, 0.036483, 0.133085), (0.233226, -0.159492, 0.677135), (0.233226, -0.165994, 0.64381), (0.267093, -0.165994, 0.64381), (0.233226, -0.159492, 0.677135), (0.267093, -0.165994, 0.64381), (0.267093, -0.159492, 0.677135), (0.233226, 0.192548, 0.654878), (0.233226, 0.182562, 0.681876), (0.267093, 0.182562, 0.681876), (0.233226, 0.192548, 0.654878), (0.267093, 0.182562, 0.681876), (0.267093, 0.192548, 0.654878), (0.233226, -0.122916, 0.690952), (0.233226, -0.159492, 0.677135), (0.267093, -0.159492, 0.677135), (0.233226, -0.122916, 0.690952), (0.267093, -0.159492, 0.677135), (0.267093, -0.122916, 0.690952), (0.233226, 0.150208, 0.690952), (0.233226, -0.122916, 0.690952), (0.267093, -0.122916, 0.690952), (0.233226, 0.150208, 0.690952), (0.267093, -0.122916, 0.690952), (0.267093, 0.150208, 0.690952), (0.233226, -0.165994, 0.64381), (0.233226, -0.095194, 0.461148), (0.267093, -0.095194, 0.461148), (0.233226, -0.165994, 0.64381), (0.267093, -0.095194, 0.461148), (0.267093, -0.165994, 0.64381), (0.233226, 0.182562, 0.681876), (0.233226, 0.150208, 0.690952), (0.267093, 0.150208, 0.690952), (0.233226, 0.182562, 0.681876), (0.267093, 0.150208, 0.690952), (0.267093, 0.182562, 0.681876), (0.233226, -0.151851, 0.670684), (0.267093, -0.151851, 0.670684), (0.267093, -0.156033, 0.644694), (0.233226, -0.151851, 0.670684), (0.267093, -0.156033, 0.644694), (0.233226, -0.156033, 0.644694), (0.233226, 0.183172, 0.651401), (0.267093, 0.183172, 0.651401), (0.267093, 0.175782, 0.674525), (0.233226, 0.183172, 0.651401), (0.267093, 0.175782, 0.674525), (0.233226, 0.175782, 0.674525), (0.233226, -0.12112, 0.681115), (0.267093, -0.12112, 0.681115), (0.267093, -0.151851, 0.670684), (0.233226, -0.12112, 0.681115), (0.267093, -0.151851, 0.670684), (0.233226, -0.151851, 0.670684), (0.233226, 0.148845, 0.681045), (0.267093, 0.148845, 0.681045), (0.267093, -0.12112, 0.681115), (0.233226, 0.148845, 0.681045), (0.267093, -0.12112, 0.681115), (0.233226, -0.12112, 0.681115), (0.233226, -0.156033, 0.644694), (0.267093, -0.156033, 0.644694), (0.267093, -0.089537, 0.469394), (0.233226, -0.156033, 0.644694), (0.267093, -0.089537, 0.469394), (0.233226, -0.089537, 0.469394), (0.233226, 0.175782, 0.674525), (0.267093, 0.175782, 0.674525), (0.267093, 0.148845, 0.681045), (0.233226, 0.175782, 0.674525), (0.267093, 0.148845, 0.681045), (0.233226, 0.148845, 0.681045), (0.233226, -0.165994, 0.64381), (0.233226, -0.159492, 0.677135), (0.233226, -0.151851, 0.670684), (0.233226, -0.165994, 0.64381), (0.233226, -0.151851, 0.670684), (0.233226, -0.156033, 0.644694), (0.233226, -0.159492, 0.677135), (0.233226, -0.122916, 0.690952), (0.233226, -0.12112, 0.681115), (0.233226, -0.159492, 0.677135), (0.233226, -0.12112, 0.681115), (0.233226, -0.151851, 0.670684), (0.233226, -0.122916, 0.690952), (0.233226, 0.150208, 0.690952), (0.233226, 0.148845, 0.681045), (0.233226, -0.122916, 0.690952), (0.233226, 0.148845, 0.681045), (0.233226, -0.12112, 0.681115), (0.233226, 0.150208, 0.690952), (0.233226, 0.182562, 0.681876), (0.233226, 0.175782, 0.674525), (0.233226, 0.150208, 0.690952), (0.233226, 0.175782, 0.674525), (0.233226, 0.148845, 0.681045), (0.233226, 0.182562, 0.681876), (0.233226, 0.192548, 0.654878), (0.233226, 0.183172, 0.651401), (0.233226, 0.182562, 0.681876), (0.233226, 0.183172, 0.651401), (0.233226, 0.175782, 0.674525), (0.267093, -0.165994, 0.64381), (0.267093, -0.095194, 0.461148), (0.267093, -0.089537, 0.469394), (0.267093, -0.165994, 0.64381), (0.267093, -0.089537, 0.469394), (0.267093, -0.156033, 0.644694), (0.267093, -0.159492, 0.677135), (0.267093, -0.165994, 0.64381), (0.267093, -0.156033, 0.644694), (0.267093, -0.159492, 0.677135), (0.267093, -0.156033, 0.644694), (0.267093, -0.151851, 0.670684), (0.267093, -0.122916, 0.690952), (0.267093, -0.159492, 0.677135), (0.267093, -0.151851, 0.670684), (0.267093, -0.122916, 0.690952), (0.267093, -0.151851, 0.670684), (0.267093, -0.12112, 0.681115), (0.267093, 0.150208, 0.690952), (0.267093, -0.122916, 0.690952), (0.267093, -0.12112, 0.681115), (0.267093, 0.150208, 0.690952), (0.267093, -0.12112, 0.681115), (0.267093, 0.148845, 0.681045), (0.267093, 0.182562, 0.681876), (0.267093, 0.150208, 0.690952), (0.267093, 0.148845, 0.681045), (0.267093, 0.182562, 0.681876), (0.267093, 0.148845, 0.681045), (0.267093, 0.175782, 0.674525), (0.267093, 0.192548, 0.654878), (0.267093, 0.182562, 0.681876), (0.267093, 0.175782, 0.674525), (0.267093, 0.192548, 0.654878), (0.267093, 0.175782, 0.674525), (0.267093, 0.183172, 0.651401), (0.233226, -0.095194, 0.461148), (0.233226, -0.165994, 0.64381), (0.233226, -0.156033, 0.644694), (0.233226, -0.095194, 0.461148), (0.233226, -0.156033, 0.644694), (0.233226, -0.089537, 0.469394), (-0.233226, -0.159492, 0.677135), (-0.267093, -0.159492, 0.677135), (-0.267093, -0.165994, 0.64381), (-0.233226, -0.159492, 0.677135), (-0.267093, -0.165994, 0.64381), (-0.233226, -0.165994, 0.64381), (-0.233226, 0.192548, 0.654878), (-0.267093, 0.192548, 0.654878), (-0.267093, 0.182562, 0.681876), (-0.233226, 0.192548, 0.654878), (-0.267093, 0.182562, 0.681876), (-0.233226, 0.182562, 0.681876), (-0.233226, -0.122916, 0.690952), (-0.267093, -0.122916, 0.690952), (-0.267093, -0.159492, 0.677135), (-0.233226, -0.122916, 0.690952), (-0.267093, -0.159492, 0.677135), (-0.233226, -0.159492, 0.677135), (-0.233226, 0.150208, 0.690952), (-0.267093, 0.150208, 0.690952), (-0.267093, -0.122916, 0.690952), (-0.233226, 0.150208, 0.690952), (-0.267093, -0.122916, 0.690952), (-0.233226, -0.122916, 0.690952), (-0.233226, -0.165994, 0.64381), (-0.267093, -0.165994, 0.64381), (-0.267093, -0.095194, 0.461148), (-0.233226, -0.165994, 0.64381), (-0.267093, -0.095194, 0.461148), (-0.233226, -0.095194, 0.461148), (-0.233226, 0.182562, 0.681876), (-0.267093, 0.182562, 0.681876), (-0.267093, 0.150208, 0.690952), (-0.233226, 0.182562, 0.681876), (-0.267093, 0.150208, 0.690952), (-0.233226, 0.150208, 0.690952), (-0.233226, -0.151851, 0.670684), (-0.233226, -0.156033, 0.644694), (-0.267093, -0.156033, 0.644694), (-0.233226, -0.151851, 0.670684), (-0.267093, -0.156033, 0.644694), (-0.267093, -0.151851, 0.670684), (-0.233226, 0.183172, 0.651401), (-0.233226, 0.175782, 0.674525), (-0.267093, 0.175782, 0.674525), (-0.233226, 0.183172, 0.651401), (-0.267093, 0.175782, 0.674525), (-0.267093, 0.183172, 0.651401), (-0.233226, -0.12112, 0.681115), (-0.233226, -0.151851, 0.670684), (-0.267093, -0.151851, 0.670684), (-0.233226, -0.12112, 0.681115), (-0.267093, -0.151851, 0.670684), (-0.267093, -0.12112, 0.681115), (-0.233226, 0.148845, 0.681045), (-0.233226, -0.12112, 0.681115), (-0.267093, -0.12112, 0.681115), (-0.233226, 0.148845, 0.681045), (-0.267093, -0.12112, 0.681115), (-0.267093, 0.148845, 0.681045), (-0.233226, -0.156033, 0.644694), (-0.233226, -0.089537, 0.469394), (-0.267093, -0.089537, 0.469394), (-0.233226, -0.156033, 0.644694), (-0.267093, -0.089537, 0.469394), (-0.267093, -0.156033, 0.644694), (-0.233226, 0.175782, 0.674525), (-0.233226, 0.148845, 0.681045), (-0.267093, 0.148845, 0.681045), (-0.233226, 0.175782, 0.674525), (-0.267093, 0.148845, 0.681045), (-0.267093, 0.175782, 0.674525), (-0.233226, -0.165994, 0.64381), (-0.233226, -0.156033, 0.644694), (-0.233226, -0.151851, 0.670684), (-0.233226, -0.165994, 0.64381), (-0.233226, -0.151851, 0.670684), (-0.233226, -0.159492, 0.677135), (-0.233226, -0.159492, 0.677135), (-0.233226, -0.151851, 0.670684), (-0.233226, -0.12112, 0.681115), (-0.233226, -0.159492, 0.677135), (-0.233226, -0.12112, 0.681115), (-0.233226, -0.122916, 0.690952), (-0.233226, -0.122916, 0.690952), (-0.233226, -0.12112, 0.681115), (-0.233226, 0.148845, 0.681045), (-0.233226, -0.122916, 0.690952), (-0.233226, 0.148845, 0.681045), (-0.233226, 0.150208, 0.690952), (-0.233226, 0.150208, 0.690952), (-0.233226, 0.148845, 0.681045), (-0.233226, 0.175782, 0.674525), (-0.233226, 0.150208, 0.690952), (-0.233226, 0.175782, 0.674525), (-0.233226, 0.182562, 0.681876), (-0.233226, 0.182562, 0.681876), (-0.233226, 0.175782, 0.674525), (-0.233226, 0.183172, 0.651401), (-0.233226, 0.182562, 0.681876), (-0.233226, 0.183172, 0.651401), (-0.233226, 0.192548, 0.654878), (-0.267093, -0.165994, 0.64381), (-0.267093, -0.156033, 0.644694), (-0.267093, -0.089537, 0.469394), (-0.267093, -0.165994, 0.64381), (-0.267093, -0.089537, 0.469394), (-0.267093, -0.095194, 0.461148), (-0.267093, -0.159492, 0.677135), (-0.267093, -0.151851, 0.670684), (-0.267093, -0.156033, 0.644694), (-0.267093, -0.159492, 0.677135), (-0.267093, -0.156033, 0.644694), (-0.267093, -0.165994, 0.64381), (-0.267093, -0.122916, 0.690952), (-0.267093, -0.12112, 0.681115), (-0.267093, -0.151851, 0.670684), (-0.267093, -0.122916, 0.690952), (-0.267093, -0.151851, 0.670684), (-0.267093, -0.159492, 0.677135), (-0.267093, 0.150208, 0.690952), (-0.267093, 0.148845, 0.681045), (-0.267093, -0.12112, 0.681115), (-0.267093, 0.150208, 0.690952), (-0.267093, -0.12112, 0.681115), (-0.267093, -0.122916, 0.690952), (-0.267093, 0.182562, 0.681876), (-0.267093, 0.175782, 0.674525), (-0.267093, 0.148845, 0.681045), (-0.267093, 0.182562, 0.681876), (-0.267093, 0.148845, 0.681045), (-0.267093, 0.150208, 0.690952), (-0.267093, 0.192548, 0.654878), (-0.267093, 0.183172, 0.651401), (-0.267093, 0.175782, 0.674525), (-0.267093, 0.192548, 0.654878), (-0.267093, 0.175782, 0.674525), (-0.267093, 0.182562, 0.681876), (-0.233226, -0.095194, 0.461148), (-0.233226, -0.089537, 0.469394), (-0.233226, -0.156033, 0.644694), (-0.233226, -0.095194, 0.461148), (-0.233226, -0.156033, 0.644694), (-0.233226, -0.165994, 0.64381), (-0.17489, 0.33528, 1.028882), (-0.17489, 0.346666, 1.070392), (0.176949, 0.346666, 1.070392), (-0.17489, 0.33528, 1.028882), (0.176949, 0.346666, 1.070392), (0.176949, 0.33528, 1.028882), (0.176949, 0.33528, 1.028882), (0.176949, 0.346666, 1.070392), (0.230473, 0.322937, 1.078035), (0.176949, 0.33528, 1.028882), (0.230473, 0.322937, 1.078035), (0.230473, 0.311551, 1.036525), (-0.17489, 0.346666, 1.070392), (-0.17489, 0.33528, 1.028882), (-0.228413, 0.311551, 1.036525), (-0.17489, 0.346666, 1.070392), (-0.228413, 0.311551, 1.036525), (-0.228413, 0.322937, 1.078035), (-0.172742, 0.325861, 1.031466), (0.174801, 0.325861, 1.031466), (0.174776, 0.337253, 1.072974), (-0.172742, 0.325861, 1.031466), (0.174776, 0.337253, 1.072974), (-0.172717, 0.337253, 1.072974), (0.174801, 0.325861, 1.031466), (0.226254, 0.302807, 1.038924), (0.226254, 0.314194, 1.080434), (0.174801, 0.325861, 1.031466), (0.226254, 0.314194, 1.080434), (0.174776, 0.337253, 1.072974), (-0.172717, 0.337253, 1.072974), (-0.224195, 0.314194, 1.080434), (-0.224195, 0.302807, 1.038924), (-0.172717, 0.337253, 1.072974), (-0.224195, 0.302807, 1.038924), (-0.172742, 0.325861, 1.031466), (-0.17489, 0.33528, 1.028882), (0.176949, 0.33528, 1.028882), (0.174801, 0.325861, 1.031466), (-0.17489, 0.33528, 1.028882), (0.174801, 0.325861, 1.031466), (-0.172742, 0.325861, 1.031466), (0.176949, 0.346666, 1.070392), (-0.17489, 0.346666, 1.070392), (-0.172717, 0.337253, 1.072974), (0.176949, 0.346666, 1.070392), (-0.172717, 0.337253, 1.072974), (0.174776, 0.337253, 1.072974), (-0.228413, 0.322937, 1.078035), (-0.228413, 0.311551, 1.036525), (-0.224195, 0.302807, 1.038924), (-0.228413, 0.322937, 1.078035), (-0.224195, 0.302807, 1.038924), (-0.224195, 0.314194, 1.080434), (0.230473, 0.311551, 1.036525), (0.230473, 0.322937, 1.078035), (0.226254, 0.314194, 1.080434), (0.230473, 0.311551, 1.036525), (0.226254, 0.314194, 1.080434), (0.226254, 0.302807, 1.038924), (0.176949, 0.33528, 1.028882), (0.230473, 0.311551, 1.036525), (0.226254, 0.302807, 1.038924), (0.176949, 0.33528, 1.028882), (0.226254, 0.302807, 1.038924), (0.174801, 0.325861, 1.031466), (0.230473, 0.322937, 1.078035), (0.176949, 0.346666, 1.070392), (0.174776, 0.337253, 1.072974), (0.230473, 0.322937, 1.078035), (0.174776, 0.337253, 1.072974), (0.226254, 0.314194, 1.080434), (-0.17489, 0.346666, 1.070392), (-0.228413, 0.322937, 1.078035), (-0.224195, 0.314194, 1.080434), (-0.17489, 0.346666, 1.070392), (-0.224195, 0.314194, 1.080434), (-0.172717, 0.337253, 1.072974), (-0.228413, 0.311551, 1.036525), (-0.17489, 0.33528, 1.028882), (-0.172742, 0.325861, 1.031466), (-0.228413, 0.311551, 1.036525), (-0.172742, 0.325861, 1.031466), (-0.224195, 0.302807, 1.038924)]
                        float2[] primvars:st = [(0.890462, 0.351767), (0.890462, 0.34451), (0.967728, 0.34451), (0.890462, 0.351767), (0.967728, 0.34451), (0.967729, 0.351768), (0.890462, 0.35804), (0.890462, 0.351767), (0.967729, 0.351768), (0.890462, 0.35804), (0.967729, 0.351768), (0.967729, 0.35804), (0.890463, 0.338237), (0.890462, 0.330979), (0.967729, 0.330979), (0.890463, 0.338237), (0.967729, 0.330979), (0.967728, 0.338237), (0.890462, 0.34451), (0.890463, 0.338237), (0.967728, 0.338237), (0.890462, 0.34451), (0.967728, 0.338237), (0.967728, 0.34451), (0.979164, 0.312222), (0.969454, 0.312222), (0.969454, 0.285654), (0.979164, 0.312222), (0.969454, 0.285654), (0.979164, 0.285654), (0.970167, 0.275971), (0.969454, 0.285654), (0.900172, 0.280554), (0.970167, 0.275971), (0.900172, 0.280554), (0.900884, 0.27087), (0.890462, 0.280554), (0.900172, 0.280554), (0.900171, 0.317322), (0.890462, 0.280554), (0.900171, 0.317322), (0.890462, 0.317322), (0.900884, 0.327005), (0.900171, 0.317322), (0.969454, 0.312222), (0.900884, 0.327005), (0.969454, 0.312222), (0.970167, 0.321905), (0.970167, 0.275971), (0.900884, 0.27087), (0.906268, 0.234499), (0.970167, 0.275971), (0.906268, 0.234499), (0.974058, 0.24969), (0.969454, 0.312222), (0.900171, 0.317322), (0.900172, 0.280554), (0.969454, 0.312222), (0.900172, 0.280554), (0.969454, 0.285654), (0.560408, 0.122839), (0.577268, 0.154774), (0.577223, 0.204428), (0.560408, 0.122839), (0.577223, 0.204428), (0.557689, 0.214741), (0.577203, 0.226517), (0.577223, 0.204428), (0.601355, 0.20445), (0.577203, 0.226517), (0.601355, 0.20445), (0.601335, 0.226539), (0.62087, 0.214798), (0.601355, 0.20445), (0.6014, 0.154796), (0.62087, 0.214798), (0.6014, 0.154796), (0.618318, 0.122892), (0.644993, 0.214129), (0.62087, 0.214798), (0.618318, 0.122892), (0.644993, 0.214129), (0.618318, 0.122892), (0.642441, 0.122222), (0.601355, 0.20445), (0.577223, 0.204428), (0.577268, 0.154774), (0.601355, 0.20445), (0.577268, 0.154774), (0.6014, 0.154796), (0.544962, 0.744821), (0.544962, 0.986704), (0.284873, 0.986704), (0.544962, 0.744821), (0.284873, 0.986704), (0.284873, 0.744821), (0.544962, 0.986704), (0.544962, 0.744821), (0.595461, 0.744821), (0.544962, 0.986704), (0.595461, 0.744821), (0.595461, 0.986704), (0.595461, 0.986704), (0.595461, 0.744821), (0.653384, 0.744821), (0.595461, 0.986704), (0.653384, 0.744821), (0.653384, 0.986704), (0.653384, 0.744821), (0.987902, 0.744821), (0.987902, 0.986704), (0.653384, 0.744821), (0.987902, 0.986704), (0.653384, 0.986704), (0.016256, 0.520503), (0.016256, 0.251807), (0.26175, 0.251807), (0.016256, 0.520503), (0.26175, 0.251807), (0.26175, 0.520503), (0.26175, 0.520503), (0.26175, 0.58154), (0.016256, 0.58154), (0.26175, 0.520503), (0.016256, 0.58154), (0.016256, 0.520503), (0.26175, 0.58154), (0.26175, 0.642114), (0.016256, 0.642114), (0.26175, 0.58154), (0.016256, 0.642114), (0.016256, 0.58154), (0.016256, 0.642114), (0.26175, 0.642114), (0.26175, 0.978349), (0.016256, 0.642114), (0.26175, 0.978349), (0.016256, 0.978349), (0.317795, 0.21909), (0.011819, 0.218068), (0.006382, 0.207103), (0.317795, 0.21909), (0.006382, 0.207103), (0.317836, 0.206852), (0.311425, 0.197067), (0.005452, 0.198584), (0.005392, 0.186345), (0.311425, 0.197067), (0.005392, 0.186345), (0.316844, 0.186093), (0.016256, 0.241248), (0.26175, 0.241248), (0.26175, 0.251807), (0.016256, 0.241248), (0.26175, 0.251807), (0.016256, 0.251807), (0.98167, 0.715959), (0.921005, 0.694171), (0.919225, 0.681631), (0.98167, 0.715959), (0.919225, 0.681631), (0.990953, 0.707342), (0.285811, 0.667237), (0.310926, 0.720581), (0.303433, 0.729381), (0.285811, 0.667237), (0.303433, 0.729381), (0.274309, 0.666105), (0.921005, 0.694171), (0.858857, 0.735364), (0.85481, 0.723361), (0.921005, 0.694171), (0.85481, 0.723361), (0.919225, 0.681631), (0.327895, 0.611121), (0.285811, 0.667237), (0.274309, 0.666105), (0.327895, 0.611121), (0.274309, 0.666105), (0.316794, 0.607902), (0.26175, 0.988908), (0.016255, 0.988908), (0.016256, 0.978349), (0.26175, 0.988908), (0.016256, 0.978349), (0.26175, 0.978349), (0.858857, 0.735364), (0.426794, 0.737557), (0.426674, 0.724892), (0.858857, 0.735364), (0.426674, 0.724892), (0.85481, 0.723361), (0.314765, 0.227042), (0.327895, 0.611121), (0.316794, 0.607902), (0.314765, 0.227042), (0.316794, 0.607902), (0.299599, 0.22755), (0.764668, 0.061204), (0.750983, 0.053003), (0.808871, 0.038706), (0.764668, 0.061204), (0.808871, 0.038706), (0.810259, 0.061204), (0.810259, 0.061204), (0.8328, 0.061204), (0.8328, 0.129611), (0.810259, 0.061204), (0.8328, 0.129611), (0.810259, 0.129611), (0.810259, 0.129611), (0.808871, 0.15211), (0.750983, 0.137812), (0.810259, 0.129611), (0.750983, 0.137812), (0.764668, 0.129611), (0.764668, 0.129611), (0.748714, 0.129611), (0.748714, 0.061204), (0.764668, 0.129611), (0.748714, 0.061204), (0.764668, 0.061204), (0.810259, 0.061204), (0.810259, 0.129611), (0.764668, 0.129611), (0.810259, 0.061204), (0.764668, 0.129611), (0.764668, 0.061204), (0.75188, 0.253789), (0.691598, 0.083203), (0.673141, 0.089217), (0.75188, 0.253789), (0.673141, 0.089217), (0.723918, 0.262873), (0.713001, 0.277901), (0.532486, 0.282815), (0.532489, 0.302226), (0.713001, 0.277901), (0.532489, 0.302226), (0.713001, 0.3073), (0.786825, 0.283314), (0.930617, 0.172856), (0.919201, 0.157155), (0.786825, 0.283314), (0.919201, 0.157155), (0.769544, 0.259527), (0.769545, 0.325673), (0.919199, 0.427877), (0.930619, 0.412179), (0.769545, 0.325673), (0.930619, 0.412179), (0.786825, 0.301886), (0.723919, 0.322328), (0.673146, 0.495819), (0.691603, 0.50183), (0.723919, 0.322328), (0.691603, 0.50183), (0.75188, 0.331411), (0.713001, 0.3073), (0.723919, 0.322328), (0.749034, 0.2926), (0.786825, 0.283314), (0.769544, 0.259527), (0.749034, 0.2926), (0.786825, 0.301886), (0.786825, 0.283314), (0.749034, 0.2926), (0.723918, 0.262873), (0.713001, 0.277901), (0.749034, 0.2926), (0.713001, 0.277901), (0.713001, 0.3073), (0.749034, 0.2926), (0.75188, 0.331411), (0.769545, 0.325673), (0.749034, 0.2926), (0.723919, 0.322328), (0.75188, 0.331411), (0.749034, 0.2926), (0.75188, 0.253789), (0.723918, 0.262873), (0.749034, 0.2926), (0.769544, 0.259527), (0.75188, 0.253789), (0.749034, 0.2926), (0.769545, 0.325673), (0.786825, 0.301886), (0.749034, 0.2926), (0.442881, 0.28071), (0.471433, 0.281672), (0.482749, 0.092007), (0.442881, 0.28071), (0.482749, 0.092007), (0.454244, 0.068383), (0.950515, 0.613383), (0.926931, 0.584845), (0.738002, 0.595881), (0.950515, 0.613383), (0.738002, 0.595881), (0.738926, 0.624435), (0.482749, 0.092007), (0.497879, 0.070516), (0.497062, 0.027611), (0.482749, 0.092007), (0.497062, 0.027611), (0.454244, 0.068383), (0.738668, 0.679275), (0.737747, 0.650721), (0.717839, 0.650707), (0.738668, 0.679275), (0.717839, 0.650707), (0.716874, 0.67926), (0.716874, 0.67926), (0.717839, 0.650707), (0.528927, 0.639399), (0.716874, 0.67926), (0.528927, 0.639399), (0.5053, 0.667903), (0.453919, 0.514306), (0.482456, 0.490722), (0.471418, 0.301579), (0.453919, 0.514306), (0.471418, 0.301579), (0.442864, 0.302503), (0.391874, 0.429547), (0.420361, 0.427391), (0.419513, 0.407502), (0.391874, 0.429547), (0.419513, 0.407502), (0.390945, 0.407776), (0.691598, 0.083203), (0.677504, 0.034822), (0.65608, 0.041802), (0.691598, 0.083203), (0.65608, 0.041802), (0.673141, 0.089217), (0.717131, 0.624419), (0.718094, 0.595866), (0.528965, 0.584559), (0.717131, 0.624419), (0.528965, 0.584559), (0.505341, 0.613064), (0.337092, 0.432348), (0.365579, 0.430189), (0.364731, 0.410301), (0.337092, 0.432348), (0.364731, 0.410301), (0.336164, 0.410577), (0.412126, 0.641325), (0.439615, 0.616529), (0.420361, 0.427391), (0.412126, 0.641325), (0.420361, 0.427391), (0.391874, 0.429547), (0.442864, 0.302503), (0.471418, 0.301579), (0.471433, 0.281672), (0.442864, 0.302503), (0.471433, 0.281672), (0.442881, 0.28071), (0.336164, 0.410577), (0.364731, 0.410301), (0.367816, 0.220211), (0.336164, 0.410577), (0.367816, 0.220211), (0.338317, 0.197845), (0.950661, 0.668223), (0.927079, 0.639684), (0.737747, 0.650721), (0.950661, 0.668223), (0.737747, 0.650721), (0.738668, 0.679275), (0.738926, 0.624435), (0.738002, 0.595881), (0.718094, 0.595866), (0.738926, 0.624435), (0.718094, 0.595866), (0.717131, 0.624419), (0.367816, 0.220211), (0.382003, 0.198085), (0.37933, 0.155256), (0.367816, 0.220211), (0.37933, 0.155256), (0.338317, 0.197845), (0.390945, 0.407776), (0.419513, 0.407502), (0.422615, 0.217876), (0.390945, 0.407776), (0.422615, 0.217876), (0.393115, 0.195507), (0.357342, 0.644009), (0.38483, 0.619211), (0.365579, 0.430189), (0.357342, 0.644009), (0.365579, 0.430189), (0.337092, 0.432348), (0.930617, 0.172856), (0.97228, 0.144508), (0.959029, 0.126283), (0.930617, 0.172856), (0.959029, 0.126283), (0.919201, 0.157155), (0.528927, 0.639399), (0.507436, 0.624269), (0.464528, 0.625086), (0.528927, 0.639399), (0.464528, 0.625086), (0.5053, 0.667903), (0.919199, 0.427877), (0.959024, 0.458752), (0.97228, 0.44053), (0.919199, 0.427877), (0.97228, 0.44053), (0.930619, 0.412179), (0.950661, 0.668223), (0.991496, 0.625466), (0.948591, 0.624585), (0.950661, 0.668223), (0.948591, 0.624585), (0.927079, 0.639684), (0.532486, 0.282815), (0.482118, 0.281258), (0.482122, 0.303789), (0.532486, 0.282815), (0.482122, 0.303789), (0.532489, 0.302226), (0.950515, 0.613383), (0.991349, 0.570625), (0.948442, 0.569745), (0.950515, 0.613383), (0.948442, 0.569745), (0.926931, 0.584845), (0.422615, 0.217876), (0.436801, 0.19575), (0.434129, 0.152919), (0.422615, 0.217876), (0.434129, 0.152919), (0.393115, 0.195507), (0.673146, 0.495819), (0.656087, 0.543234), (0.677511, 0.550212), (0.673146, 0.495819), (0.677511, 0.550212), (0.691603, 0.50183), (0.453919, 0.514306), (0.496679, 0.55514), (0.497556, 0.512234), (0.453919, 0.514306), (0.497556, 0.512234), (0.482456, 0.490722), (0.357342, 0.644009), (0.401833, 0.682951), (0.400849, 0.64005), (0.357342, 0.644009), (0.400849, 0.64005), (0.38483, 0.619211), (0.412126, 0.641325), (0.456614, 0.680268), (0.455633, 0.637367), (0.412126, 0.641325), (0.455633, 0.637367), (0.439615, 0.616529), (0.528965, 0.584559), (0.507475, 0.569429), (0.464568, 0.570249), (0.528965, 0.584559), (0.464568, 0.570249), (0.505341, 0.613064), (0.878297, 0.072819), (0.871666, 0.052408), (0.856836, 0.072819), (0.584545, 0.396814), (0.563084, 0.396814), (0.577913, 0.376403), (0.530691, 0.561533), (0.530691, 0.515879), (0.548953, 0.515879), (0.530691, 0.561533), (0.548953, 0.515879), (0.548952, 0.561533), (0.878297, 0.072819), (0.856836, 0.072819), (0.871666, 0.09323), (0.584545, 0.396814), (0.577913, 0.417225), (0.563084, 0.396814), (0.548952, 0.561533), (0.548953, 0.515879), (0.567214, 0.515879), (0.548952, 0.561533), (0.567214, 0.515879), (0.567214, 0.561533), (0.878297, 0.072819), (0.871666, 0.09323), (0.89566, 0.085433), (0.584545, 0.396814), (0.601908, 0.409429), (0.577913, 0.417225), (0.567214, 0.561533), (0.567214, 0.515879), (0.585476, 0.515879), (0.567214, 0.561533), (0.585476, 0.515879), (0.585476, 0.561533), (0.878297, 0.072819), (0.89566, 0.085433), (0.89566, 0.060204), (0.584545, 0.396814), (0.601908, 0.3842), (0.601908, 0.409429), (0.585476, 0.561533), (0.585476, 0.515879), (0.603737, 0.515879), (0.585476, 0.561533), (0.603737, 0.515879), (0.603737, 0.561533), (0.878297, 0.072819), (0.89566, 0.060204), (0.871666, 0.052408), (0.584545, 0.396814), (0.577913, 0.376403), (0.601908, 0.3842), (0.603737, 0.561533), (0.603737, 0.515879), (0.621999, 0.515879), (0.603737, 0.561533), (0.621999, 0.515879), (0.621999, 0.561533), (0.878297, 0.024428), (0.871666, 0.004017), (0.856836, 0.024428), (0.627974, 0.44302), (0.606512, 0.44302), (0.621342, 0.422609), (0.693697, 0.577687), (0.693697, 0.532033), (0.711958, 0.532033), (0.693697, 0.577687), (0.711958, 0.532033), (0.711958, 0.577687), (0.878297, 0.024428), (0.856836, 0.024428), (0.871666, 0.044839), (0.627974, 0.44302), (0.621342, 0.463431), (0.606512, 0.44302), (0.711958, 0.577687), (0.711958, 0.532033), (0.73022, 0.532033), (0.711958, 0.577687), (0.73022, 0.532033), (0.73022, 0.577687), (0.878297, 0.024428), (0.871666, 0.044839), (0.89566, 0.037043), (0.627974, 0.44302), (0.645336, 0.455635), (0.621342, 0.463431), (0.73022, 0.577687), (0.73022, 0.532033), (0.748481, 0.532033), (0.73022, 0.577687), (0.748481, 0.532033), (0.748481, 0.577687), (0.878297, 0.024428), (0.89566, 0.037043), (0.89566, 0.011814), (0.627974, 0.44302), (0.645336, 0.430406), (0.645336, 0.455635), (0.748481, 0.577687), (0.748481, 0.532033), (0.766743, 0.532033), (0.748481, 0.577687), (0.766743, 0.532033), (0.766743, 0.577687), (0.878297, 0.024428), (0.89566, 0.011814), (0.871666, 0.004017), (0.627974, 0.44302), (0.621342, 0.422609), (0.645336, 0.430406), (0.766743, 0.577687), (0.766743, 0.532033), (0.785004, 0.532033), (0.766743, 0.577687), (0.785004, 0.532033), (0.785004, 0.577687), (0.92469, 0.024428), (0.918058, 0.004017), (0.903229, 0.024428), (0.971082, 0.024428), (0.949621, 0.024428), (0.96445, 0.004017), (0.521421, 0.060988), (0.521421, 0.016277), (0.539305, 0.016277), (0.521421, 0.060988), (0.539305, 0.016277), (0.539305, 0.060988), (0.92469, 0.024428), (0.903229, 0.024428), (0.918058, 0.044839), (0.971082, 0.024428), (0.96445, 0.044839), (0.949621, 0.024428), (0.539305, 0.060988), (0.539305, 0.016277), (0.55719, 0.016277), (0.539305, 0.060988), (0.55719, 0.016277), (0.55719, 0.060988), (0.92469, 0.024428), (0.918058, 0.044839), (0.942053, 0.037043), (0.971082, 0.024428), (0.988445, 0.037043), (0.96445, 0.044839), (0.55719, 0.060988), (0.55719, 0.016277), (0.575074, 0.016277), (0.55719, 0.060988), (0.575074, 0.016277), (0.575074, 0.060988), (0.92469, 0.024428), (0.942053, 0.037043), (0.942053, 0.011814), (0.971082, 0.024428), (0.988445, 0.011814), (0.988445, 0.037043), (0.575074, 0.060988), (0.575074, 0.016277), (0.592959, 0.016277), (0.575074, 0.060988), (0.592959, 0.016277), (0.592959, 0.060988), (0.92469, 0.024428), (0.942053, 0.011814), (0.918058, 0.004017), (0.971082, 0.024428), (0.96445, 0.004017), (0.988445, 0.011814), (0.592959, 0.060988), (0.592959, 0.016277), (0.610843, 0.016277), (0.592959, 0.060988), (0.610843, 0.016277), (0.610843, 0.060988), (0.581581, 0.44302), (0.574949, 0.422609), (0.56012, 0.44302), (0.629118, 0.395253), (0.607656, 0.395253), (0.622486, 0.374842), (0.870903, 0.512331), (0.870903, 0.46762), (0.888788, 0.46762), (0.870903, 0.512331), (0.888788, 0.46762), (0.888788, 0.512331), (0.581581, 0.44302), (0.56012, 0.44302), (0.574949, 0.463431), (0.629118, 0.395253), (0.622486, 0.415664), (0.607656, 0.395253), (0.888788, 0.512331), (0.888788, 0.46762), (0.906672, 0.46762), (0.888788, 0.512331), (0.906672, 0.46762), (0.906672, 0.512331), (0.581581, 0.44302), (0.574949, 0.463431), (0.598944, 0.455635), (0.629118, 0.395253), (0.64648, 0.407868), (0.622486, 0.415664), (0.906672, 0.512331), (0.906672, 0.46762), (0.924557, 0.46762), (0.906672, 0.512331), (0.924557, 0.46762), (0.924557, 0.512331), (0.581581, 0.44302), (0.598944, 0.455635), (0.598944, 0.430406), (0.629118, 0.395253), (0.64648, 0.382639), (0.64648, 0.407868), (0.924557, 0.512331), (0.924557, 0.46762), (0.942441, 0.46762), (0.924557, 0.512331), (0.942441, 0.46762), (0.942441, 0.512331), (0.581581, 0.44302), (0.598944, 0.430406), (0.574949, 0.422609), (0.629118, 0.395253), (0.622486, 0.374842), (0.64648, 0.382639), (0.942441, 0.512331), (0.942441, 0.46762), (0.960326, 0.46762), (0.942441, 0.512331), (0.960326, 0.46762), (0.960326, 0.512331), (0.92469, 0.072819), (0.918058, 0.052408), (0.903229, 0.072819), (0.971082, 0.072819), (0.949621, 0.072819), (0.96445, 0.052408), (0.795846, 0.57858), (0.795846, 0.533246), (0.81398, 0.533246), (0.795846, 0.57858), (0.81398, 0.533246), (0.81398, 0.57858), (0.92469, 0.072819), (0.903229, 0.072819), (0.918058, 0.09323), (0.971082, 0.072819), (0.96445, 0.09323), (0.949621, 0.072819), (0.81398, 0.57858), (0.81398, 0.533246), (0.832114, 0.533246), (0.81398, 0.57858), (0.832114, 0.533246), (0.832114, 0.57858), (0.92469, 0.072819), (0.918058, 0.09323), (0.942053, 0.085433), (0.971082, 0.072819), (0.988445, 0.085433), (0.96445, 0.09323), (0.832114, 0.57858), (0.832114, 0.533246), (0.850247, 0.533246), (0.832114, 0.57858), (0.850247, 0.533246), (0.850247, 0.57858), (0.92469, 0.072819), (0.942053, 0.085433), (0.942053, 0.060204), (0.971082, 0.072819), (0.988445, 0.060204), (0.988445, 0.085433), (0.850247, 0.57858), (0.850247, 0.533246), (0.868381, 0.533246), (0.850247, 0.57858), (0.868381, 0.533246), (0.868381, 0.57858), (0.92469, 0.072819), (0.942053, 0.060204), (0.918058, 0.052408), (0.971082, 0.072819), (0.96445, 0.052408), (0.988445, 0.060204), (0.868381, 0.57858), (0.868381, 0.533246), (0.886515, 0.533246), (0.868381, 0.57858), (0.886515, 0.533246), (0.886515, 0.57858), (0.721353, 0.521142), (0.744107, 0.380277), (0.759963, 0.382406), (0.721353, 0.521142), (0.759963, 0.382406), (0.744757, 0.524284), (0.744757, 0.524284), (0.759963, 0.382406), (0.775911, 0.383686), (0.744757, 0.524284), (0.775911, 0.383686), (0.768297, 0.526173), (0.768297, 0.526173), (0.775911, 0.383686), (0.791904, 0.384113), (0.768297, 0.526173), (0.791904, 0.384113), (0.791903, 0.526804), (0.791903, 0.526804), (0.791904, 0.384113), (0.807897, 0.383686), (0.791903, 0.526804), (0.807897, 0.383686), (0.815509, 0.526174), (0.815509, 0.526174), (0.807897, 0.383686), (0.823845, 0.382406), (0.815509, 0.526174), (0.823845, 0.382406), (0.839048, 0.524285), (0.839048, 0.524285), (0.823845, 0.382406), (0.839701, 0.380278), (0.839048, 0.524285), (0.839701, 0.380278), (0.862453, 0.521143), (0.212832, 0.020772), (0.198715, 0.020772), (0.198715, 0.00669), (0.212832, 0.020772), (0.198715, 0.00669), (0.212832, 0.00669), (0.368595, 0.020772), (0.356626, 0.020772), (0.356626, 0.00669), (0.368595, 0.020772), (0.356626, 0.00669), (0.368595, 0.00669), (0.22909, 0.020772), (0.212832, 0.020772), (0.212832, 0.00669), (0.22909, 0.020772), (0.212832, 0.00669), (0.22909, 0.00669), (0.342654, 0.020772), (0.22909, 0.020772), (0.22909, 0.00669), (0.342654, 0.020772), (0.22909, 0.00669), (0.342654, 0.00669), (0.198715, 0.020772), (0.117258, 0.020772), (0.117258, 0.006691), (0.198715, 0.020772), (0.117258, 0.006691), (0.198715, 0.00669), (0.356626, 0.020772), (0.342654, 0.020772), (0.342654, 0.00669), (0.356626, 0.020772), (0.342654, 0.00669), (0.356626, 0.00669), (0.436384, 0.054313), (0.436384, 0.068394), (0.425438, 0.068394), (0.436384, 0.054313), (0.425438, 0.068394), (0.425438, 0.054313), (0.156735, 0.054313), (0.156735, 0.068394), (0.146641, 0.068394), (0.156735, 0.054313), (0.146641, 0.068394), (0.146641, 0.054313), (0.022866, 0.054313), (0.022866, 0.068394), (0.009372, 0.068394), (0.022866, 0.054313), (0.009372, 0.068394), (0.009372, 0.054313), (0.135117, 0.054313), (0.135117, 0.068394), (0.022866, 0.068394), (0.135117, 0.054313), (0.022866, 0.068394), (0.022866, 0.054313), (0.425438, 0.054313), (0.425438, 0.068394), (0.347481, 0.068394), (0.425438, 0.054313), (0.347481, 0.068394), (0.347481, 0.054313), (0.146641, 0.054313), (0.146641, 0.068394), (0.135117, 0.068394), (0.146641, 0.054313), (0.135117, 0.068394), (0.135117, 0.054313), (0.967161, 0.192722), (0.984024, 0.196012), (0.98076, 0.199878), (0.967161, 0.192722), (0.98076, 0.199878), (0.967609, 0.197762), (0.984024, 0.196012), (0.991016, 0.21452), (0.986038, 0.215429), (0.984024, 0.196012), (0.986038, 0.215429), (0.98076, 0.199878), (0.991016, 0.21452), (0.991016, 0.352723), (0.986003, 0.352033), (0.991016, 0.21452), (0.986003, 0.352033), (0.986038, 0.215429), (0.991016, 0.352723), (0.986423, 0.369094), (0.982704, 0.365663), (0.991016, 0.352723), (0.982704, 0.365663), (0.986003, 0.352033), (0.986423, 0.369094), (0.972761, 0.374147), (0.971002, 0.369403), (0.986423, 0.369094), (0.971002, 0.369403), (0.982704, 0.365663), (0.639741, 0.511315), (0.547314, 0.475491), (0.551486, 0.472629), (0.639741, 0.511315), (0.551486, 0.472629), (0.640189, 0.506274), (0.656604, 0.508025), (0.639741, 0.511315), (0.640189, 0.506274), (0.656604, 0.508025), (0.640189, 0.506274), (0.65334, 0.504158), (0.663596, 0.489517), (0.656604, 0.508025), (0.65334, 0.504158), (0.663596, 0.489517), (0.65334, 0.504158), (0.658618, 0.488608), (0.663596, 0.351313), (0.663596, 0.489517), (0.658618, 0.488608), (0.663596, 0.351313), (0.658618, 0.488608), (0.658583, 0.352003), (0.659003, 0.334942), (0.663596, 0.351313), (0.658583, 0.352003), (0.659003, 0.334942), (0.658583, 0.352003), (0.655284, 0.338373), (0.645342, 0.329889), (0.659003, 0.334942), (0.655284, 0.338373), (0.645342, 0.329889), (0.655284, 0.338373), (0.643583, 0.334633), (0.874734, 0.228546), (0.967161, 0.192722), (0.967609, 0.197762), (0.874734, 0.228546), (0.967609, 0.197762), (0.878906, 0.231409), (0.212831, 0.030584), (0.212831, 0.044666), (0.198714, 0.044666), (0.212831, 0.030584), (0.198714, 0.044666), (0.198714, 0.030584), (0.368594, 0.030584), (0.368594, 0.044666), (0.356625, 0.044666), (0.368594, 0.030584), (0.356625, 0.044666), (0.356625, 0.030584), (0.229089, 0.030584), (0.229089, 0.044666), (0.212831, 0.044666), (0.229089, 0.030584), (0.212831, 0.044666), (0.212831, 0.030584), (0.342653, 0.030584), (0.342653, 0.044666), (0.229089, 0.044666), (0.342653, 0.030584), (0.229089, 0.044666), (0.229089, 0.030584), (0.198714, 0.030584), (0.198714, 0.044666), (0.117258, 0.044666), (0.198714, 0.030584), (0.117258, 0.044666), (0.117258, 0.030584), (0.356625, 0.030584), (0.356625, 0.044666), (0.342653, 0.044666), (0.356625, 0.030584), (0.342653, 0.044666), (0.342653, 0.030584), (0.419744, 0.692147), (0.430635, 0.692147), (0.430635, 0.706159), (0.419744, 0.692147), (0.430635, 0.706159), (0.419744, 0.706159), (0.698012, 0.692147), (0.708056, 0.692147), (0.708056, 0.706159), (0.698012, 0.692147), (0.708056, 0.706159), (0.698012, 0.706159), (0.831219, 0.692147), (0.844647, 0.692147), (0.844647, 0.706159), (0.831219, 0.692147), (0.844647, 0.706159), (0.83122, 0.706159), (0.719524, 0.692147), (0.831219, 0.692147), (0.83122, 0.706159), (0.719524, 0.692147), (0.83122, 0.706159), (0.719524, 0.706159), (0.430635, 0.692147), (0.508208, 0.692147), (0.508208, 0.706159), (0.430635, 0.692147), (0.508208, 0.706159), (0.430635, 0.706159), (0.708056, 0.692147), (0.719524, 0.692147), (0.719524, 0.706159), (0.708056, 0.692147), (0.719524, 0.706159), (0.708056, 0.706159), (0.823501, 0.200643), (0.823949, 0.195603), (0.8371, 0.193487), (0.823501, 0.200643), (0.8371, 0.193487), (0.840364, 0.197353), (0.840364, 0.197353), (0.8371, 0.193487), (0.842378, 0.177936), (0.840364, 0.197353), (0.842378, 0.177936), (0.847356, 0.178845), (0.847356, 0.178845), (0.842378, 0.177936), (0.842343, 0.041332), (0.847356, 0.178845), (0.842343, 0.041332), (0.847356, 0.040642), (0.847356, 0.040642), (0.842343, 0.041332), (0.839044, 0.027701), (0.847356, 0.040642), (0.839044, 0.027701), (0.842763, 0.02427), (0.842763, 0.02427), (0.839044, 0.027701), (0.827343, 0.023962), (0.842763, 0.02427), (0.827343, 0.023962), (0.829102, 0.019218), (0.635409, 0.070712), (0.635856, 0.075752), (0.547153, 0.1094), (0.635409, 0.070712), (0.547153, 0.1094), (0.54298, 0.106537), (0.652272, 0.074002), (0.649007, 0.077869), (0.635856, 0.075752), (0.652272, 0.074002), (0.635856, 0.075752), (0.635409, 0.070712), (0.659263, 0.09251), (0.654286, 0.093419), (0.649007, 0.077869), (0.659263, 0.09251), (0.649007, 0.077869), (0.652272, 0.074002), (0.659263, 0.230713), (0.65425, 0.230023), (0.654286, 0.093419), (0.659263, 0.230713), (0.654286, 0.093419), (0.659263, 0.09251), (0.65467, 0.247084), (0.650951, 0.243654), (0.65425, 0.230023), (0.65467, 0.247084), (0.65425, 0.230023), (0.659263, 0.230713), (0.641009, 0.252138), (0.63925, 0.247393), (0.650951, 0.243654), (0.641009, 0.252138), (0.650951, 0.243654), (0.65467, 0.247084), (0.731074, 0.164819), (0.735246, 0.161957), (0.823949, 0.195603), (0.731074, 0.164819), (0.823949, 0.195603), (0.823501, 0.200643), (0.071458, 0.122114), (0.071458, 0.085863), (0.367774, 0.085863), (0.071458, 0.122114), (0.367774, 0.085863), (0.367774, 0.122114), (0.367774, 0.122114), (0.367774, 0.085863), (0.417492, 0.084942), (0.367774, 0.122114), (0.417492, 0.084942), (0.417492, 0.121193), (0.071458, 0.085863), (0.071458, 0.122114), (0.021739, 0.121193), (0.071458, 0.085863), (0.021739, 0.121193), (0.021739, 0.084942), (0.299446, 0.1684), (0.053916, 0.168622), (0.054393, 0.139047), (0.299446, 0.1684), (0.054393, 0.139047), (0.299557, 0.138786), (0.053916, 0.168622), (0.017852, 0.166416), (0.016864, 0.141804), (0.053916, 0.168622), (0.016864, 0.141804), (0.054393, 0.139047), (0.299557, 0.138786), (0.336745, 0.141645), (0.335963, 0.166372), (0.299557, 0.138786), (0.335963, 0.166372), (0.299446, 0.1684), (0.299631, 0.175009), (0.053711, 0.174979), (0.053916, 0.168622), (0.299631, 0.175009), (0.053916, 0.168622), (0.299446, 0.1684), (0.054121, 0.132343), (0.299839, 0.132343), (0.299557, 0.138786), (0.054121, 0.132343), (0.299557, 0.138786), (0.054393, 0.139047), (0.021739, 0.084942), (0.021739, 0.121193), (0.013318, 0.121193), (0.021739, 0.084942), (0.013318, 0.121193), (0.013318, 0.084942), (0.417492, 0.121193), (0.417492, 0.084942), (0.425914, 0.084942), (0.417492, 0.121193), (0.425914, 0.084942), (0.425914, 0.121193), (0.053711, 0.174979), (0.017464, 0.172223), (0.017852, 0.166416), (0.053711, 0.174979), (0.017852, 0.166416), (0.053916, 0.168622), (0.01637, 0.135785), (0.054121, 0.132343), (0.054393, 0.139047), (0.01637, 0.135785), (0.054393, 0.139047), (0.016864, 0.141804), (0.299839, 0.132343), (0.337221, 0.135688), (0.336745, 0.141645), (0.299839, 0.132343), (0.336745, 0.141645), (0.299557, 0.138786), (0.336353, 0.172257), (0.299631, 0.175009), (0.299446, 0.1684), (0.336353, 0.172257), (0.299446, 0.1684), (0.335963, 0.166372)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }

            def Xform "collision"
            {
                uniform token purpose = "guide"
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    rel material:binding = </Looks/MaterialPhysics_5>

                    def Mesh "OfficeChairBlack_Col"
                    {
                        float3[] extent = [(-0.360408, -0.382154, 0), (0.366339, 0.383609, 1.262073)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83]
                        rel material:binding = </Looks/Material_14>
                        normal3f[] normals = [(-0.98612505, 0, 0.16600421), (-0.98612505, 0, 0.16600421), (-0.98612505, 0, 0.16600421), (-0.98612505, 0, 0.16600421), (-0.98612505, 0, 0.16600421), (-0.98612505, 0, 0.16600421), (0, 0.98020196, 0.19800039), (0, 0.98020196, 0.19800039), (0, 0.98020196, 0.19800039), (0, 0.98020196, 0.19800039), (0, 0.98020196, 0.19800039), (0, 0.98020196, 0.19800039), (0.98020196, 0, 0.19800039), (0.98020196, 0, 0.19800039), (0.98020196, 0, 0.19800039), (0.98020196, 0, 0.19800039), (0.98020196, 0, 0.19800039), (0.98020196, 0, 0.19800039), (0, -0.9968188, 0.0797015), (0, -0.9968188, 0.0797015), (0, -0.9968188, 0.0797015), (0, -0.9968188, 0.0797015), (0, -0.9968188, 0.0797015), (0, -0.9968188, 0.0797015), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0.9792631, -0.20259237), (0, 0.9792631, -0.20259237), (0, 0.9792631, -0.20259237), (0, 0.9792631, -0.20259237), (0, 0.9792631, -0.20259237), (0, 0.9792631, -0.20259237), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0.98020196, 0, 0.19800039), (0.98020196, 0, 0.19800039), (0.98020196, 0, 0.19800039), (0.98020196, 0, 0.19800039), (0.98020196, 0, 0.19800039), (0.98020196, 0, 0.19800039), (-0.98612505, 0, 0.16600421), (-0.98612505, 0, 0.16600421), (-0.98612505, 0, 0.16600421), (-0.98612505, 0, 0.16600421), (-0.98612505, 0, 0.16600421), (-0.98612505, 0, 0.16600421), (0, 0.3074848, 0.951553), (0, 0.3074848, 0.951553), (0, 0.3074848, 0.951553), (0, 0.3074848, 0.951553), (0, 0.3074848, 0.951553), (0, 0.3074848, 0.951553), (0, -0.96282995, 0.27010837), (0, -0.96282995, 0.27010837), (0, -0.96282995, 0.27010837), (0, -0.96282995, 0.27010837), (0, -0.96282995, 0.27010837), (0, -0.96282995, 0.27010837), (0.99911946, 0.00360007, 0.041800812), (0.99911946, 0.00360007, 0.041800812), (0.99911946, 0.00360007, 0.041800812), (0.99911946, 0.00360007, 0.041800812), (0.99911946, 0.00360007, 0.041800812), (0.99911946, 0.00360007, 0.041800812), (-0.9983906, 0.004899954, 0.05649947), (-0.9983906, 0.004899954, 0.05649947), (-0.9983906, 0.004899954, 0.05649947), (-0.9983906, 0.004899954, 0.05649947), (-0.9983906, 0.004899954, 0.05649947), (-0.9983906, 0.004899954, 0.05649947)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.360408, 0.196195, 0), (-0.281333, 0.126924, 0.469752), (-0.281333, 0.222026, 0.469752), (-0.360408, 0.196195, 0), (-0.281333, 0.222026, 0.469752), (-0.360408, 0.316917, 0), (-0.360408, 0.316917, 0), (-0.281333, 0.222026, 0.469752), (0.271448, 0.222026, 0.469752), (-0.360408, 0.316917, 0), (0.271448, 0.222026, 0.469752), (0.366339, 0.316917, 0), (0.366339, 0.196195, 0), (0.271448, 0.126924, 0.469752), (0.271448, -0.344593, 0.469752), (0.366339, 0.196195, 0), (0.271448, -0.344593, 0.469752), (0.366339, -0.382154, 0), (0.366339, -0.382154, 0), (0.271448, -0.344593, 0.469752), (-0.281333, -0.344593, 0.469752), (0.366339, -0.382154, 0), (-0.281333, -0.344593, 0.469752), (-0.360408, -0.382154, 0), (-0.360408, 0.196195, 0), (0.366339, 0.196195, 0), (0.366339, -0.382154, 0), (-0.360408, 0.196195, 0), (0.366339, -0.382154, 0), (-0.360408, -0.382154, 0), (0.271448, 0.126924, 0.469752), (-0.281333, 0.126924, 0.469752), (-0.281333, -0.344593, 0.469752), (0.271448, 0.126924, 0.469752), (-0.281333, -0.344593, 0.469752), (0.271448, -0.344593, 0.469752), (0.271448, 0.222026, 0.469752), (-0.281333, 0.222026, 0.469752), (-0.235864, 0.383609, 1.250944), (0.271448, 0.222026, 0.469752), (-0.235864, 0.383609, 1.250944), (0.237841, 0.383609, 1.250944), (-0.360408, 0.316917, 0), (0.366339, 0.316917, 0), (0.366339, 0.196195, 0), (-0.360408, 0.316917, 0), (0.366339, 0.196195, 0), (-0.360408, 0.196195, 0), (0.366339, 0.316917, 0), (0.271448, 0.222026, 0.469752), (0.271448, 0.126924, 0.469752), (0.366339, 0.316917, 0), (0.271448, 0.126924, 0.469752), (0.366339, 0.196195, 0), (-0.360408, -0.382154, 0), (-0.281333, -0.344593, 0.469752), (-0.281333, 0.126924, 0.469752), (-0.360408, -0.382154, 0), (-0.281333, 0.126924, 0.469752), (-0.360408, 0.196195, 0), (0.237841, 0.383609, 1.250944), (-0.235864, 0.383609, 1.250944), (-0.235864, 0.349168, 1.262073), (0.237841, 0.383609, 1.250944), (-0.235864, 0.349168, 1.262073), (0.237841, 0.349168, 1.262073), (-0.281333, 0.126924, 0.469752), (0.271448, 0.126924, 0.469752), (0.237841, 0.349168, 1.262073), (-0.281333, 0.126924, 0.469752), (0.237841, 0.349168, 1.262073), (-0.235864, 0.349168, 1.262073), (0.271448, 0.126924, 0.469752), (0.271448, 0.222026, 0.469752), (0.237841, 0.383609, 1.250944), (0.271448, 0.126924, 0.469752), (0.237841, 0.383609, 1.250944), (0.237841, 0.349168, 1.262073), (-0.281333, 0.222026, 0.469752), (-0.281333, 0.126924, 0.469752), (-0.235864, 0.349168, 1.262073), (-0.281333, 0.222026, 0.469752), (-0.235864, 0.349168, 1.262073), (-0.235864, 0.383609, 1.250944)]
                        float2[] primvars:st = [(0.375, 0.206926), (0.625, 0.206926), (0.625, 0.25), (0.375, 0.206926), (0.625, 0.25), (0.375, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.5), (0.375, 0.543074), (0.625, 0.543074), (0.625, 0.75), (0.375, 0.543074), (0.625, 0.75), (0.375, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 0.75), (0.625, 1), (0.375, 1), (0.125, 0.543074), (0.375, 0.543074), (0.375, 0.75), (0.125, 0.543074), (0.375, 0.75), (0.125, 0.75), (0.625, 0.543074), (0.875, 0.543074), (0.875, 0.75), (0.625, 0.543074), (0.875, 0.75), (0.625, 0.75), (0.625, 0.5), (0.625, 0.25), (0.625, 0.25), (0.625, 0.5), (0.625, 0.25), (0.625, 0.5), (0.125, 0.5), (0.375, 0.5), (0.375, 0.543074), (0.125, 0.5), (0.375, 0.543074), (0.125, 0.543074), (0.375, 0.5), (0.625, 0.5), (0.625, 0.543074), (0.375, 0.5), (0.625, 0.543074), (0.375, 0.543074), (0.375, 0), (0.625, 0), (0.625, 0.206926), (0.375, 0), (0.625, 0.206926), (0.375, 0.206926), (0.625, 0.5), (0.875, 0.5), (0.875, 0.543074), (0.625, 0.5), (0.875, 0.543074), (0.625, 0.543074), (0.875, 0.543074), (0.625, 0.543074), (0.625, 0.543074), (0.875, 0.543074), (0.625, 0.543074), (0.875, 0.543074), (0.625, 0.543074), (0.625, 0.5), (0.625, 0.5), (0.625, 0.543074), (0.625, 0.5), (0.625, 0.543074), (0.625, 0.25), (0.625, 0.206926), (0.625, 0.206926), (0.625, 0.25), (0.625, 0.206926), (0.625, 0.25)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }
        }
    }

    def Xform "Monitor_and_keyboard"
    {
        float3 xformOp:rotateXYZ = (0, 0, -160.42818)
        double3 xformOp:translate = (-0.28, -0.3, 0.8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "body"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "visual_monitor"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry"
                {
                    def Mesh "computerScreen"
                    {
                        float3[] extent = [(-0.639173, -2.043972, -0), (0.400867, 1.882908, 2.942852)]
                        int[] faceVertexCounts = [3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5]
                        rel material:binding = </Looks/Material_16>
                        normal3f[] normals = [(-0.99026495, -0, 0.13919508), (-0.99026495, -0, 0.13919508), (-0.99026495, -0, 0.13919508), (-0.99026495, -0, 0.13919508), (-0.99026495, -0, 0.13919508), (-0.99026495, -0, 0.13919508)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.281057, 1.815151, 0.555857), (-0.281057, -1.976215, 0.555857), (0.044136, -1.976215, 2.869724), (0.044136, -1.976215, 2.869724), (0.044136, 1.815151, 2.869724), (-0.281057, 1.815151, 0.555857)]
                        float2[] primvars:st = [(0.266759, 2.363337), (15.1934, 2.363337), (15.1934, 11.56257), (15.1934, 11.56257), (0.266759, 11.56257), (0.266759, 2.363337)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (0.2, 0.2, 0.2)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }

            def Xform "visual_keyboard"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (-0.27, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry"
                {
                    def Mesh "computerKeyboard"
                    {
                        float3[] extent = [(-0.593544, -1.478127, 0), (0.588376, 1.343873, 0.27556)]
                        int[] faceVertexCounts = [3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
                        rel material:binding = </Looks/Material_18>
                        normal3f[] normals = [(-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(0.212003, 1.153028, 0.240709), (-0.427854, 1.153028, 0.106124), (-0.427854, -0.625604, 0.106124), (-0.427854, -0.625604, 0.106124), (0.212003, -0.625604, 0.240709), (0.212003, 1.153028, 0.240709), (0.212003, -0.831791, 0.240709), (-0.427854, -0.831791, 0.106124), (-0.427854, -1.287282, 0.106124), (-0.427854, -1.287282, 0.106124), (0.212003, -1.287282, 0.240709), (0.212003, -0.831791, 0.240709)]
                        float2[] primvars:st = [(0.751358, 3.2986), (0.751358, 0.724354), (7.753848, 0.724354), (7.753848, 0.724354), (7.753848, 3.2986), (0.751358, 3.2986), (8.565606, 3.2986), (8.565606, 0.724354), (10.35888, 0.724354), (10.35888, 0.724354), (10.35888, 3.2986), (8.565606, 3.2986)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (0.2, 0.2, 0.2)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }

            def Xform "collision_monitor"
            {
                uniform token purpose = "guide"
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    rel material:binding = </Looks/MaterialPhysics_6>

                    def Mesh "computerScreen"
                    {
                        float3[] extent = [(-0.639173, -2.043972, -0), (0.400867, 1.882908, 2.942852)]
                        int[] faceVertexCounts = [3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5]
                        rel material:binding = </Looks/Material_20>
                        normal3f[] normals = [(-0.99026495, -0, 0.13919508), (-0.99026495, -0, 0.13919508), (-0.99026495, -0, 0.13919508), (-0.99026495, -0, 0.13919508), (-0.99026495, -0, 0.13919508), (-0.99026495, -0, 0.13919508)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(-0.281057, 1.815151, 0.555857), (-0.281057, -1.976215, 0.555857), (0.044136, -1.976215, 2.869724), (0.044136, -1.976215, 2.869724), (0.044136, 1.815151, 2.869724), (-0.281057, 1.815151, 0.555857)]
                        float2[] primvars:st = [(0.266759, 2.363337), (15.1934, 2.363337), (15.1934, 11.56257), (15.1934, 11.56257), (0.266759, 11.56257), (0.266759, 2.363337)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (0.2, 0.2, 0.2)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }

            def Xform "collision_keyboard"
            {
                uniform token purpose = "guide"
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (-0.27, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    rel material:binding = </Looks/MaterialPhysics_7>

                    def Mesh "computerKeyboard"
                    {
                        float3[] extent = [(-0.593544, -1.478127, 0), (0.588376, 1.343873, 0.27556)]
                        int[] faceVertexCounts = [3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
                        rel material:binding = </Looks/Material_22>
                        normal3f[] normals = [(-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943), (-0.2057988, -0, 0.9785943)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(0.212003, 1.153028, 0.240709), (-0.427854, 1.153028, 0.106124), (-0.427854, -0.625604, 0.106124), (-0.427854, -0.625604, 0.106124), (0.212003, -0.625604, 0.240709), (0.212003, 1.153028, 0.240709), (0.212003, -0.831791, 0.240709), (-0.427854, -0.831791, 0.106124), (-0.427854, -1.287282, 0.106124), (-0.427854, -1.287282, 0.106124), (0.212003, -1.287282, 0.240709), (0.212003, -0.831791, 0.240709)]
                        float2[] primvars:st = [(0.751358, 3.2986), (0.751358, 0.724354), (7.753848, 0.724354), (7.753848, 0.724354), (7.753848, 3.2986), (0.751358, 3.2986), (8.565606, 3.2986), (8.565606, 0.724354), (10.35888, 0.724354), (10.35888, 0.724354), (10.35888, 3.2986), (8.565606, 3.2986)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (0.2, 0.2, 0.2)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }
        }
    }

    def Xform "Books_1"
    {
        float3 xformOp:rotateXYZ = (0, -0, 90)
        double3 xformOp:translate = (-0.25, 0.4, 0.8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "books_link"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "books_mesh"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry"
                {
                    def Mesh "Book"
                    {
                        float3[] extent = [(0, 0, 0), (0.35950786, 0.16078544, 0.2214)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 1, 0, 3, 3, 0, 4, 3, 4, 5, 3, 5, 6]
                        rel material:binding = </Looks/Material_73>
                        normal3f[] normals = [(-0.3511234, -0.9363292, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1.077475e-16, -1, 0), (0.3511234, -0.9363292, 0), (0, 0, 1)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(0.04012686, 0.010648218, 0.17150001), (0.03639886, 0.15987356, 0.17150001), (0.03639886, 0.0128735555, 0.17150001), (0.05239886, 0.15987356, 0.17150001), (0.04439886, 0.009873557, 0.17150001), (0.048670862, 0.010648218, 0.17150001), (0.05239886, 0.0128735555, 0.17150001)]
                        float2[] primvars:st = [(0.2329999, 0.005164411), (0, 1), (0, 0.02), (1, 1), (0.5, 0), (0.7670001, 0.005164411), (1, 0.02)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }

            def Xform "books_collision"
            {
                uniform token purpose = "guide"
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    rel material:binding = </Looks/MaterialPhysics_8>

                    def Mesh "Book"
                    {
                        float3[] extent = [(0, 0, 0), (0.35950786, 0.16078544, 0.2214)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 1, 0, 3, 3, 0, 4, 3, 4, 5, 3, 5, 6]
                        rel material:binding = </Looks/Material_124>
                        normal3f[] normals = [(-0.3511234, -0.9363292, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1.077475e-16, -1, 0), (0.3511234, -0.9363292, 0), (0, 0, 1)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(0.04012686, 0.010648218, 0.17150001), (0.03639886, 0.15987356, 0.17150001), (0.03639886, 0.0128735555, 0.17150001), (0.05239886, 0.15987356, 0.17150001), (0.04439886, 0.009873557, 0.17150001), (0.048670862, 0.010648218, 0.17150001), (0.05239886, 0.0128735555, 0.17150001)]
                        float2[] primvars:st = [(0.2329999, 0.005164411), (0, 1), (0, 0.02), (1, 1), (0.5, 0), (0.7670001, 0.005164411), (1, 0.02)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }
        }
    }

    def Xform "Books_2"
    {
        float3 xformOp:rotateXYZ = (0, -0, 90)
        double3 xformOp:translate = (-0.25, 0.8, 0.8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "books_link"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "books_mesh"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry"
                {
                    def Mesh "Book"
                    {
                        float3[] extent = [(0, 0, 0), (0.35950786, 0.16078544, 0.2214)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 1, 0, 3, 3, 0, 4, 3, 4, 5, 3, 5, 6]
                        rel material:binding = </Looks/Material_175>
                        normal3f[] normals = [(-0.3511234, -0.9363292, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1.077475e-16, -1, 0), (0.3511234, -0.9363292, 0), (0, 0, 1)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(0.04012686, 0.010648218, 0.17150001), (0.03639886, 0.15987356, 0.17150001), (0.03639886, 0.0128735555, 0.17150001), (0.05239886, 0.15987356, 0.17150001), (0.04439886, 0.009873557, 0.17150001), (0.048670862, 0.010648218, 0.17150001), (0.05239886, 0.0128735555, 0.17150001)]
                        float2[] primvars:st = [(0.2329999, 0.005164411), (0, 1), (0, 0.02), (1, 1), (0.5, 0), (0.7670001, 0.005164411), (1, 0.02)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }

            def Xform "books_collision"
            {
                uniform token purpose = "guide"
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    rel material:binding = </Looks/MaterialPhysics_9>

                    def Mesh "Book"
                    {
                        float3[] extent = [(0, 0, 0), (0.35950786, 0.16078544, 0.2214)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 1, 0, 3, 3, 0, 4, 3, 4, 5, 3, 5, 6]
                        rel material:binding = </Looks/Material_226>
                        normal3f[] normals = [(-0.3511234, -0.9363292, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1.077475e-16, -1, 0), (0.3511234, -0.9363292, 0), (0, 0, 1)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(0.04012686, 0.010648218, 0.17150001), (0.03639886, 0.15987356, 0.17150001), (0.03639886, 0.0128735555, 0.17150001), (0.05239886, 0.15987356, 0.17150001), (0.04439886, 0.009873557, 0.17150001), (0.048670862, 0.010648218, 0.17150001), (0.05239886, 0.0128735555, 0.17150001)]
                        float2[] primvars:st = [(0.2329999, 0.005164411), (0, 1), (0, 0.02), (1, 1), (0.5, 0), (0.7670001, 0.005164411), (1, 0.02)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }
        }
    }

    def Xform "Books_3"
    {
        float3 xformOp:rotateXYZ = (0, -0, 90)
        double3 xformOp:translate = (-0.25, 1.5, 0.8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "books_link"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "books_mesh"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry"
                {
                    def Mesh "Book"
                    {
                        float3[] extent = [(0, 0, 0), (0.35950786, 0.16078544, 0.2214)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 1, 0, 3, 3, 0, 4, 3, 4, 5, 3, 5, 6]
                        rel material:binding = </Looks/Material_277>
                        normal3f[] normals = [(-0.3511234, -0.9363292, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1.077475e-16, -1, 0), (0.3511234, -0.9363292, 0), (0, 0, 1)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(0.04012686, 0.010648218, 0.17150001), (0.03639886, 0.15987356, 0.17150001), (0.03639886, 0.0128735555, 0.17150001), (0.05239886, 0.15987356, 0.17150001), (0.04439886, 0.009873557, 0.17150001), (0.048670862, 0.010648218, 0.17150001), (0.05239886, 0.0128735555, 0.17150001)]
                        float2[] primvars:st = [(0.2329999, 0.005164411), (0, 1), (0, 0.02), (1, 1), (0.5, 0), (0.7670001, 0.005164411), (1, 0.02)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }

            def Xform "books_collision"
            {
                uniform token purpose = "guide"
                float3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def "geometry" (
                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    rel material:binding = </Looks/MaterialPhysics_10>

                    def Mesh "Book"
                    {
                        float3[] extent = [(0, 0, 0), (0.35950786, 0.16078544, 0.2214)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 1, 2, 1, 0, 3, 3, 0, 4, 3, 4, 5, 3, 5, 6]
                        rel material:binding = </Looks/Material_328>
                        normal3f[] normals = [(-0.3511234, -0.9363292, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1.077475e-16, -1, 0), (0.3511234, -0.9363292, 0), (0, 0, 1)] (
                            interpolation = "vertex"
                        )
                        point3f[] points = [(0.04012686, 0.010648218, 0.17150001), (0.03639886, 0.15987356, 0.17150001), (0.03639886, 0.0128735555, 0.17150001), (0.05239886, 0.15987356, 0.17150001), (0.04439886, 0.009873557, 0.17150001), (0.048670862, 0.010648218, 0.17150001), (0.05239886, 0.0128735555, 0.17150001)]
                        float2[] primvars:st = [(0.2329999, 0.005164411), (0, 1), (0, 0.02), (1, 1), (0.5, 0), (0.7670001, 0.005164411), (1, 0.02)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:scale"]
                    }
                }
            }
        }
    }

    def DistantLight "sun"
    {
        float inputs:intensity = 100
        float intensity = 100
        float3 xformOp:rotateXYZ = (0, -0, 0)
        double3 xformOp:translate = (0, 0, 10)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
    }
}

def Scope "Looks"
{
    def Material "Material_0"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            token outputs:out
        }
    }

    def Material "MaterialPhysics_0" (
        apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
    )
    {
        float physics:density = 1
        float physics:dynamicFriction = 1
        float physics:restitution = 1
        float physics:staticFriction = 1
        token physXMaterial:frictionCombineMode = "average"
        token physXMaterial:restitutionCombineMode = "average"
    }

    def Material "Material_1"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_1/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_1/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_1/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_2"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_2/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_2/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_2/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_3"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_3/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_3/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_3/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_4"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_4/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_4/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_4/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "MaterialPhysics_1" (
        apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
    )
    {
        float physics:density = 1
        float physics:dynamicFriction = 1
        float physics:restitution = 1
        float physics:staticFriction = 1
        token physXMaterial:frictionCombineMode = "average"
        token physXMaterial:restitutionCombineMode = "average"
    }

    def Material "Material_5"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_5/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_5/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_5/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_6"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_6/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_6/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_6/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_7"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_7/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_7/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_7/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_8"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_8/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_8/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_8/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "MaterialPhysics_2" (
        apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
    )
    {
        float physics:density = 1
        float physics:dynamicFriction = 1
        float physics:restitution = 1
        float physics:staticFriction = 1
        token physXMaterial:frictionCombineMode = "average"
        token physXMaterial:restitutionCombineMode = "average"
    }

    def Material "Material_9"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_9/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_9/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_9/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Drawer.png@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_10"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_10/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_10/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_10/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Drawer.png@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "MaterialPhysics_3" (
        apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
    )
    {
        float physics:density = 1
        float physics:dynamicFriction = 1
        float physics:restitution = 1
        float physics:staticFriction = 1
        token physXMaterial:frictionCombineMode = "average"
        token physXMaterial:restitutionCombineMode = "average"
    }

    def Material "Material_11"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_11/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_11/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_11/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Drawer.png@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_12"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_12/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_12/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_12/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Drawer.png@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "MaterialPhysics_4" (
        apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
    )
    {
        float physics:density = 1
        float physics:dynamicFriction = 1
        float physics:restitution = 1
        float physics:staticFriction = 1
        token physXMaterial:frictionCombineMode = "average"
        token physXMaterial:restitutionCombineMode = "average"
    }

    def Material "Material_13"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_13/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_13/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_13/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/OfficeChairBlack.png@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_14"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_14/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_14/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_14/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "MaterialPhysics_5" (
        apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
    )
    {
        float physics:density = 1
        float physics:dynamicFriction = 1
        float physics:restitution = 1
        float physics:staticFriction = 1
        token physXMaterial:frictionCombineMode = "average"
        token physXMaterial:restitutionCombineMode = "average"
    }

    def Material "Material_15"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_15/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_15/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_15/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.164706, 0.207843, 0.207843) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_16"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_16/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_16/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_16/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.658823, 0.827451, 0.827451) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_17"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_17/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_17/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_17/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.164706, 0.207843, 0.207843) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_18"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_18/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_18/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_18/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.368627, 0.466667, 0.466667) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_19"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_19/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_19/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_19/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.164706, 0.207843, 0.207843) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_20"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_20/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_20/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_20/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.658823, 0.827451, 0.827451) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "MaterialPhysics_6" (
        apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
    )
    {
        float physics:density = 1
        float physics:dynamicFriction = 1
        float physics:restitution = 1
        float physics:staticFriction = 1
        token physXMaterial:frictionCombineMode = "average"
        token physXMaterial:restitutionCombineMode = "average"
    }

    def Material "Material_21"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_21/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_21/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_21/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.164706, 0.207843, 0.207843) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_22"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_22/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_22/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_22/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.368627, 0.466667, 0.466667) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "MaterialPhysics_7" (
        apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
    )
    {
        float physics:density = 1
        float physics:dynamicFriction = 1
        float physics:restitution = 1
        float physics:staticFriction = 1
        token physXMaterial:frictionCombineMode = "average"
        token physXMaterial:restitutionCombineMode = "average"
    }

    def Material "Material_23"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_23/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_23/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_23/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_24"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_24/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_24/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_24/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_25"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_25/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_25/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_25/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_1.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_26"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_26/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_26/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_26/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_2.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_27"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_27/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_27/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_27/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_28"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_28/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_28/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_28/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_3.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_29"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_29/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_29/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_29/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_30"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_30/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_30/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_30/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_4.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_31"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_31/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_31/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_31/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_5.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_32"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_32/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_32/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_32/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_33"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_33/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_33/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_33/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_6.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_34"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_34/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_34/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_34/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_7.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_35"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_35/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_35/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_35/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_36"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_36/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_36/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_36/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_8.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_37"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_37/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_37/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_37/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_9.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_38"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_38/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_38/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_38/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_39"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_39/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_39/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_39/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_10.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_40"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_40/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_40/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_40/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_11.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_41"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_41/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_41/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_41/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_12.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_42"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_42/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_42/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_42/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_43"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_43/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_43/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_43/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_13.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_44"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_44/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_44/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_44/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_45"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_45/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_45/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_45/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_14.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_46"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_46/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_46/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_46/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_15.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_47"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_47/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_47/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_47/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_48"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_48/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_48/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_48/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_16.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_49"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_49/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_49/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_49/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_17.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_50"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_50/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_50/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_50/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_51"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_51/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_51/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_51/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_18.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_52"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_52/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_52/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_52/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_19.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_53"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_53/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_53/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_53/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_54"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_54/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_54/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_54/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_20.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_55"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_55/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_55/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_55/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_21.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_56"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_56/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_56/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_56/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_57"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_57/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_57/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_57/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_22.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_58"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_58/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_58/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_58/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_23.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_59"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_59/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_59/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_59/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_60"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_60/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_60/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_60/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_24.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_61"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_61/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_61/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_61/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_25.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_62"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_62/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_62/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_62/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_26.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_63"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_63/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_63/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_63/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_27.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_64"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_64/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_64/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_64/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_28.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_65"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_65/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_65/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_65/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_29.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_66"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_66/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_66/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_66/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_67"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_67/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_67/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_67/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_30.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_68"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_68/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_68/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_68/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_31.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_69"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_69/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_69/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_69/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_32.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_70"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_70/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_70/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_70/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_33.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_71"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_71/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_71/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_71/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_72"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_72/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_72/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_72/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_34.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_73"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_73/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_73/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_73/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_35.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_74"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_74/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_74/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_74/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_75"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_75/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_75/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_75/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_76"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_76/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_76/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_76/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_1.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_77"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_77/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_77/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_77/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_2.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_78"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_78/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_78/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_78/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_79"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_79/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_79/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_79/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_3.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_80"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_80/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_80/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_80/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_81"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_81/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_81/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_81/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_4.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_82"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_82/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_82/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_82/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_5.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_83"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_83/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_83/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_83/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_84"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_84/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_84/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_84/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_6.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_85"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_85/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_85/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_85/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_7.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_86"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_86/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_86/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_86/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_87"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_87/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_87/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_87/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_8.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_88"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_88/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_88/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_88/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_9.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_89"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_89/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_89/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_89/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_90"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_90/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_90/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_90/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_10.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_91"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_91/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_91/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_91/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_11.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_92"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_92/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_92/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_92/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_12.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_93"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_93/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_93/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_93/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_94"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_94/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_94/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_94/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_13.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_95"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_95/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_95/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_95/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_96"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_96/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_96/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_96/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_14.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_97"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_97/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_97/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_97/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_15.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_98"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_98/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_98/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_98/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_99"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_99/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_99/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_99/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_16.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_100"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_100/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_100/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_100/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_17.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_101"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_101/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_101/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_101/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_102"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_102/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_102/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_102/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_18.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_103"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_103/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_103/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_103/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_19.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_104"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_104/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_104/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_104/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_105"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_105/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_105/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_105/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_20.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_106"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_106/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_106/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_106/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_21.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_107"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_107/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_107/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_107/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_108"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_108/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_108/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_108/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_22.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_109"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_109/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_109/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_109/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_23.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_110"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_110/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_110/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_110/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_111"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_111/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_111/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_111/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_24.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_112"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_112/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_112/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_112/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_25.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_113"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_113/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_113/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_113/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_26.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_114"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_114/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_114/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_114/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_27.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_115"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_115/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_115/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_115/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_28.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_116"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_116/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_116/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_116/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_29.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_117"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_117/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_117/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_117/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_118"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_118/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_118/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_118/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_30.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_119"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_119/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_119/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_119/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_31.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_120"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_120/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_120/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_120/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_32.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_121"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_121/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_121/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_121/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_33.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_122"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_122/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_122/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_122/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_123"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_123/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_123/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_123/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_34.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_124"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_124/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_124/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_124/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_35.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "MaterialPhysics_8" (
        apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
    )
    {
        float physics:density = 1
        float physics:dynamicFriction = 1
        float physics:restitution = 1
        float physics:staticFriction = 1
        token physXMaterial:frictionCombineMode = "average"
        token physXMaterial:restitutionCombineMode = "average"
    }

    def Material "Material_125"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_125/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_125/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_125/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_126"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_126/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_126/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_126/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_127"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_127/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_127/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_127/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_1.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_128"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_128/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_128/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_128/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_2.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_129"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_129/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_129/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_129/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_130"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_130/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_130/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_130/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_3.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_131"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_131/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_131/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_131/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_132"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_132/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_132/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_132/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_4.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_133"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_133/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_133/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_133/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_5.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_134"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_134/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_134/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_134/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_135"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_135/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_135/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_135/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_6.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_136"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_136/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_136/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_136/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_7.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_137"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_137/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_137/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_137/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_138"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_138/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_138/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_138/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_8.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_139"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_139/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_139/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_139/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_9.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_140"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_140/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_140/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_140/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_141"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_141/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_141/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_141/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_10.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_142"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_142/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_142/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_142/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_11.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_143"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_143/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_143/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_143/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_12.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_144"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_144/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_144/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_144/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_145"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_145/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_145/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_145/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_13.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_146"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_146/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_146/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_146/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_147"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_147/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_147/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_147/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_14.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_148"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_148/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_148/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_148/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_15.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_149"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_149/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_149/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_149/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_150"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_150/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_150/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_150/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_16.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_151"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_151/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_151/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_151/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_17.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_152"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_152/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_152/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_152/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_153"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_153/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_153/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_153/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_18.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_154"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_154/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_154/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_154/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_19.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_155"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_155/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_155/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_155/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_156"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_156/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_156/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_156/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_20.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_157"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_157/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_157/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_157/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_21.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_158"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_158/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_158/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_158/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_159"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_159/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_159/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_159/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_22.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_160"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_160/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_160/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_160/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_23.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_161"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_161/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_161/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_161/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_162"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_162/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_162/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_162/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_24.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_163"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_163/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_163/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_163/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_25.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_164"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_164/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_164/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_164/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_26.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_165"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_165/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_165/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_165/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_27.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_166"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_166/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_166/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_166/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_28.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_167"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_167/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_167/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_167/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_29.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_168"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_168/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_168/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_168/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_169"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_169/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_169/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_169/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_30.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_170"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_170/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_170/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_170/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_31.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_171"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_171/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_171/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_171/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_32.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_172"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_172/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_172/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_172/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_33.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_173"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_173/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_173/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_173/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_174"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_174/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_174/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_174/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_34.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_175"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_175/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_175/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_175/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_35.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_176"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_176/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_176/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_176/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_177"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_177/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_177/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_177/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_178"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_178/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_178/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_178/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_1.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_179"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_179/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_179/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_179/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_2.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_180"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_180/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_180/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_180/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_181"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_181/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_181/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_181/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_3.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_182"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_182/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_182/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_182/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_183"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_183/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_183/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_183/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_4.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_184"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_184/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_184/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_184/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_5.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_185"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_185/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_185/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_185/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_186"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_186/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_186/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_186/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_6.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_187"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_187/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_187/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_187/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_7.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_188"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_188/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_188/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_188/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_189"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_189/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_189/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_189/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_8.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_190"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_190/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_190/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_190/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_9.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_191"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_191/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_191/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_191/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_192"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_192/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_192/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_192/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_10.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_193"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_193/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_193/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_193/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_11.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_194"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_194/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_194/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_194/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_12.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_195"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_195/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_195/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_195/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_196"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_196/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_196/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_196/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_13.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_197"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_197/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_197/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_197/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_198"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_198/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_198/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_198/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_14.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_199"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_199/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_199/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_199/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_15.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_200"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_200/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_200/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_200/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_201"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_201/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_201/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_201/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_16.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_202"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_202/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_202/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_202/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_17.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_203"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_203/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_203/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_203/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_204"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_204/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_204/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_204/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_18.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_205"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_205/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_205/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_205/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_19.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_206"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_206/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_206/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_206/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_207"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_207/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_207/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_207/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_20.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_208"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_208/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_208/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_208/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_21.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_209"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_209/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_209/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_209/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_210"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_210/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_210/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_210/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_22.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_211"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_211/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_211/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_211/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_23.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_212"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_212/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_212/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_212/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_213"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_213/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_213/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_213/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_24.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_214"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_214/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_214/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_214/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_25.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_215"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_215/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_215/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_215/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_26.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_216"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_216/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_216/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_216/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_27.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_217"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_217/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_217/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_217/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_28.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_218"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_218/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_218/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_218/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_29.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_219"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_219/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_219/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_219/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_220"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_220/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_220/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_220/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_30.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_221"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_221/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_221/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_221/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_31.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_222"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_222/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_222/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_222/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_32.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_223"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_223/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_223/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_223/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_33.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_224"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_224/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_224/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_224/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_225"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_225/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_225/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_225/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_34.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_226"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_226/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_226/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_226/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_35.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "MaterialPhysics_9" (
        apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
    )
    {
        float physics:density = 1
        float physics:dynamicFriction = 1
        float physics:restitution = 1
        float physics:staticFriction = 1
        token physXMaterial:frictionCombineMode = "average"
        token physXMaterial:restitutionCombineMode = "average"
    }

    def Material "Material_227"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_227/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_227/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_227/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_228"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_228/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_228/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_228/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_229"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_229/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_229/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_229/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_1.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_230"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_230/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_230/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_230/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_2.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_231"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_231/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_231/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_231/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_232"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_232/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_232/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_232/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_3.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_233"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_233/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_233/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_233/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_234"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_234/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_234/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_234/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_4.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_235"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_235/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_235/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_235/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_5.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_236"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_236/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_236/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_236/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_237"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_237/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_237/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_237/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_6.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_238"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_238/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_238/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_238/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_7.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_239"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_239/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_239/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_239/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_240"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_240/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_240/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_240/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_8.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_241"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_241/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_241/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_241/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_9.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_242"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_242/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_242/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_242/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_243"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_243/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_243/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_243/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_10.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_244"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_244/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_244/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_244/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_11.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_245"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_245/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_245/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_245/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_12.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_246"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_246/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_246/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_246/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_247"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_247/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_247/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_247/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_13.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_248"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_248/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_248/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_248/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_249"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_249/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_249/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_249/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_14.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_250"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_250/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_250/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_250/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_15.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_251"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_251/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_251/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_251/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_252"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_252/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_252/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_252/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_16.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_253"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_253/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_253/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_253/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_17.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_254"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_254/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_254/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_254/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_255"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_255/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_255/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_255/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_18.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_256"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_256/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_256/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_256/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_19.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_257"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_257/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_257/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_257/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_258"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_258/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_258/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_258/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_20.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_259"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_259/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_259/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_259/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_21.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_260"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_260/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_260/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_260/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_261"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_261/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_261/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_261/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_22.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_262"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_262/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_262/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_262/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_23.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_263"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_263/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_263/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_263/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_264"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_264/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_264/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_264/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_24.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_265"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_265/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_265/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_265/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_25.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_266"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_266/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_266/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_266/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_26.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_267"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_267/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_267/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_267/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_27.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_268"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_268/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_268/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_268/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_28.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_269"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_269/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_269/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_269/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_29.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_270"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_270/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_270/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_270/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_271"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_271/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_271/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_271/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_30.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_272"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_272/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_272/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_272/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_31.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_273"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_273/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_273/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_273/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_32.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_274"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_274/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_274/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_274/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_33.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_275"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_275/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_275/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_275/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_276"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_276/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_276/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_276/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_34.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_277"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_277/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_277/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_277/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_35.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_278"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_278/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_278/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_278/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_279"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_279/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_279/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_279/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_280"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_280/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_280/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_280/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_1.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_281"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_281/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_281/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_281/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_2.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_282"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_282/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_282/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_282/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_283"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_283/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_283/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_283/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_3.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_284"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_284/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_284/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_284/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_285"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_285/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_285/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_285/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_4.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_286"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_286/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_286/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_286/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_5.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_287"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_287/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_287/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_287/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_288"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_288/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_288/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_288/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_6.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_289"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_289/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_289/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_289/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_7.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_290"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_290/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_290/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_290/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_291"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_291/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_291/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_291/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_8.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_292"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_292/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_292/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_292/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_9.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_293"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_293/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_293/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_293/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_294"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_294/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_294/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_294/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_10.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_295"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_295/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_295/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_295/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_11.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_296"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_296/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_296/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_296/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_12.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_297"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_297/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_297/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_297/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_298"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_298/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_298/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_298/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_13.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_299"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_299/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_299/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_299/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_300"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_300/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_300/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_300/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_14.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_301"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_301/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_301/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_301/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_15.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_302"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_302/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_302/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_302/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_303"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_303/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_303/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_303/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_16.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_304"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_304/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_304/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_304/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_17.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_305"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_305/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_305/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_305/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_306"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_306/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_306/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_306/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_18.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_307"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_307/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_307/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_307/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_19.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_308"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_308/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_308/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_308/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_309"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_309/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_309/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_309/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_20.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_310"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_310/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_310/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_310/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_21.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_311"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_311/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_311/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_311/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_312"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_312/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_312/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_312/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_22.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_313"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_313/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_313/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_313/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_23.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_314"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_314/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_314/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_314/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_315"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_315/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_315/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_315/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_24.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_316"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_316/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_316/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_316/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_25.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_317"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_317/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_317/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_317/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_26.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_318"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_318/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_318/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_318/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_27.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_319"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_319/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_319/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_319/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_28.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_320"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_320/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_320/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_320/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_29.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_321"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_321/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_321/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_321/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_322"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_322/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_322/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_322/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_30.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_323"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_323/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_323/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_323/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_31.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_324"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_324/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_324/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_324/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_32.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_325"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_325/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_325/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_325/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_33.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_326"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_326/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_326/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_326/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_0.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_327"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_327/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_327/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_327/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_34.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "Material_328"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_328/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_328/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_328/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (1, 1, 1) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            asset inputs:diffuse_texture = @materials/textures/Books_1_35.jpg@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Base Map"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            float inputs:metallic_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    double default = 0.5
                    dictionary range = {
                        int max = 1
                        int min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
            )
            token outputs:out
        }
    }

    def Material "MaterialPhysics_10" (
        apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
    )
    {
        float physics:density = 1
        float physics:dynamicFriction = 1
        float physics:restitution = 1
        float physics:staticFriction = 1
        token physXMaterial:frictionCombineMode = "average"
        token physXMaterial:restitutionCombineMode = "average"
    }
}

